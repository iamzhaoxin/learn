{"remainingRequest":"D:\\activiti\\project01\\jeecg-boot-activiti-master\\ant-design-vue-jeecg\\node_modules\\babel-loader\\lib\\index.js!D:\\activiti\\project01\\jeecg-boot-activiti-master\\ant-design-vue-jeecg\\node_modules\\@vue\\cli-plugin-eslint\\node_modules\\eslint-loader\\index.js??ref--13-0!D:\\activiti\\project01\\jeecg-boot-activiti-master\\ant-design-vue-jeecg\\src\\components\\jeecg\\dynamic\\cm_sql_hint.js","dependencies":[{"path":"D:\\activiti\\project01\\jeecg-boot-activiti-master\\ant-design-vue-jeecg\\src\\components\\jeecg\\dynamic\\cm_sql_hint.js","mtime":1611914356000},{"path":"D:\\activiti\\project01\\jeecg-boot-activiti-master\\ant-design-vue-jeecg\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1621061384845},{"path":"D:\\activiti\\project01\\jeecg-boot-activiti-master\\ant-design-vue-jeecg\\node_modules\\babel-loader\\lib\\index.js","mtime":1621061377995},{"path":"D:\\activiti\\project01\\jeecg-boot-activiti-master\\ant-design-vue-jeecg\\node_modules\\@vue\\cli-plugin-eslint\\node_modules\\eslint-loader\\index.js","mtime":1617935819779}],"contextDependencies":[],"result":["function _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\n// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n(function (mod) {\n  /*if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"), require(\"../../mode/sql/sql\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\", \"../../mode/sql/sql\"], mod);\n  else */\n  // Plain browser env\n  mod(CodeMirror);\n})(function (CodeMirror) {\n  \"use strict\";\n\n  var tables;\n  var defaultTable;\n  var keywords;\n  var identifierQuote;\n  var CONS = {\n    QUERY_DIV: \";\",\n    ALIAS_KEYWORD: \"AS\"\n  };\n  var Pos = CodeMirror.Pos,\n      cmpPos = CodeMirror.cmpPos;\n\n  function isArray(val) {\n    return Object.prototype.toString.call(val) == \"[object Array]\";\n  }\n\n  function getKeywords(editor) {\n    var mode = editor.doc.modeOption;\n    if (mode === \"sql\") mode = \"text/x-sql\";\n    return CodeMirror.resolveMode(mode).keywords;\n  }\n\n  function getIdentifierQuote(editor) {\n    var mode = editor.doc.modeOption;\n    if (mode === \"sql\") mode = \"text/x-sql\";\n    return CodeMirror.resolveMode(mode).identifierQuote || \"`\";\n  }\n\n  function getText(item) {\n    return typeof item == \"string\" ? item : item.text;\n  }\n\n  function wrapTable(name, value) {\n    if (isArray(value)) value = {\n      columns: value\n    };\n    if (!value.text) value.text = name;\n    return value;\n  }\n\n  function parseTables(input) {\n    var result = {};\n\n    if (isArray(input)) {\n      for (var i = input.length - 1; i >= 0; i--) {\n        var item = input[i];\n        result[getText(item).toUpperCase()] = wrapTable(getText(item), item);\n      }\n    } else if (input) {\n      for (var name in input) {\n        result[name.toUpperCase()] = wrapTable(name, input[name]);\n      }\n    }\n\n    return result;\n  }\n\n  function getTable(name) {\n    return tables[name.toUpperCase()];\n  }\n\n  function shallowClone(object) {\n    var result = {};\n\n    for (var key in object) {\n      if (object.hasOwnProperty(key)) result[key] = object[key];\n    }\n\n    return result;\n  }\n\n  function match(string, word) {\n    var len = string.length;\n    var sub = getText(word).substr(0, len);\n    return string.toUpperCase() === sub.toUpperCase();\n  }\n\n  function addMatches(result, search, wordlist, formatter) {\n    if (isArray(wordlist)) {\n      for (var i = 0; i < wordlist.length; i++) {\n        if (match(search, wordlist[i])) result.push(formatter(wordlist[i]));\n      }\n    } else {\n      for (var word in wordlist) {\n        if (wordlist.hasOwnProperty(word)) {\n          var val = wordlist[word];\n          if (!val || val === true) val = word;else val = val.displayText ? {\n            text: val.text,\n            displayText: val.displayText\n          } : val.text;\n          if (match(search, val)) result.push(formatter(val));\n        }\n      }\n    }\n  }\n\n  function cleanName(name) {\n    // Get rid name from identifierQuote and preceding dot(.)\n    if (name.charAt(0) == \".\") {\n      name = name.substr(1);\n    } // replace doublicated identifierQuotes with single identifierQuotes\n    // and remove single identifierQuotes\n\n\n    var nameParts = name.split(identifierQuote + identifierQuote);\n\n    for (var i = 0; i < nameParts.length; i++) {\n      nameParts[i] = nameParts[i].replace(new RegExp(identifierQuote, \"g\"), \"\");\n    }\n\n    return nameParts.join(identifierQuote);\n  }\n\n  function insertIdentifierQuotes(name) {\n    var nameParts = getText(name).split(\".\");\n\n    for (var i = 0; i < nameParts.length; i++) {\n      nameParts[i] = identifierQuote + // doublicate identifierQuotes\n      nameParts[i].replace(new RegExp(identifierQuote, \"g\"), identifierQuote + identifierQuote) + identifierQuote;\n    }\n\n    var escaped = nameParts.join(\".\");\n    if (typeof name == \"string\") return escaped;\n    name = shallowClone(name);\n    name.text = escaped;\n    return name;\n  }\n\n  function nameCompletion(cur, token, result, editor) {\n    // Try to complete table, column names and return start position of completion\n    var useIdentifierQuotes = false;\n    var nameParts = [];\n    var start = token.start;\n    var cont = true;\n\n    while (cont) {\n      cont = token.string.charAt(0) == \".\";\n      useIdentifierQuotes = useIdentifierQuotes || token.string.charAt(0) == identifierQuote;\n      start = token.start;\n      nameParts.unshift(cleanName(token.string));\n      token = editor.getTokenAt(Pos(cur.line, token.start));\n\n      if (token.string == \".\") {\n        cont = true;\n        token = editor.getTokenAt(Pos(cur.line, token.start));\n      }\n    } // Try to complete table names\n\n\n    var string = nameParts.join(\".\");\n    addMatches(result, string, tables, function (w) {\n      return useIdentifierQuotes ? insertIdentifierQuotes(w) : w;\n    }); // Try to complete columns from defaultTable\n\n    addMatches(result, string, defaultTable, function (w) {\n      return useIdentifierQuotes ? insertIdentifierQuotes(w) : w;\n    }); // Try to complete columns\n\n    string = nameParts.pop();\n    var table = nameParts.join(\".\");\n    var alias = false;\n    var aliasTable = table; // Check if table is available. If not, find table by Alias\n\n    if (!getTable(table)) {\n      var oldTable = table;\n      table = findTableByAlias(table, editor);\n      if (table !== oldTable) alias = true;\n    }\n\n    var columns = getTable(table);\n    if (columns && columns.columns) columns = columns.columns;\n\n    if (columns) {\n      addMatches(result, string, columns, function (w) {\n        var tableInsert = table;\n        if (alias == true) tableInsert = aliasTable;\n\n        if (typeof w == \"string\") {\n          w = tableInsert + \".\" + w;\n        } else {\n          w = shallowClone(w);\n          w.text = tableInsert + \".\" + w.text;\n        }\n\n        return useIdentifierQuotes ? insertIdentifierQuotes(w) : w;\n      });\n    }\n\n    return start;\n  }\n\n  function eachWord(lineText, f) {\n    var words = lineText.split(/\\s+/);\n\n    for (var i = 0; i < words.length; i++) {\n      if (words[i]) f(words[i].replace(/[,;]/g, ''));\n    }\n  }\n\n  function findTableByAlias(alias, editor) {\n    var doc = editor.doc;\n    var fullQuery = doc.getValue();\n    var aliasUpperCase = alias.toUpperCase();\n    var previousWord = \"\";\n    var table = \"\";\n    var separator = [];\n    var validRange = {\n      start: Pos(0, 0),\n      end: Pos(editor.lastLine(), editor.getLineHandle(editor.lastLine()).length)\n    }; //add separator\n\n    var indexOfSeparator = fullQuery.indexOf(CONS.QUERY_DIV);\n\n    while (indexOfSeparator != -1) {\n      separator.push(doc.posFromIndex(indexOfSeparator));\n      indexOfSeparator = fullQuery.indexOf(CONS.QUERY_DIV, indexOfSeparator + 1);\n    }\n\n    separator.unshift(Pos(0, 0));\n    separator.push(Pos(editor.lastLine(), editor.getLineHandle(editor.lastLine()).text.length)); //find valid range\n\n    var prevItem = null;\n    var current = editor.getCursor();\n\n    for (var i = 0; i < separator.length; i++) {\n      if ((prevItem == null || cmpPos(current, prevItem) > 0) && cmpPos(current, separator[i]) <= 0) {\n        validRange = {\n          start: prevItem,\n          end: separator[i]\n        };\n        break;\n      }\n\n      prevItem = separator[i];\n    }\n\n    if (validRange.start) {\n      var query = doc.getRange(validRange.start, validRange.end, false);\n\n      for (var i = 0; i < query.length; i++) {\n        var lineText = query[i];\n        eachWord(lineText, function (word) {\n          var wordUpperCase = word.toUpperCase();\n          if (wordUpperCase === aliasUpperCase && getTable(previousWord)) table = previousWord;\n          if (wordUpperCase !== CONS.ALIAS_KEYWORD) previousWord = word;\n        });\n        if (table) break;\n      }\n    }\n\n    return table;\n  }\n\n  CodeMirror.registerHelper(\"hint\", \"sql\", function (editor, options) {\n    tables = parseTables(options && options.tables);\n    var defaultTableName = options && options.defaultTable;\n    var disableKeywords = options && options.disableKeywords;\n    defaultTable = defaultTableName && getTable(defaultTableName);\n    keywords = getKeywords(editor);\n    identifierQuote = getIdentifierQuote(editor);\n    if (defaultTableName && !defaultTable) defaultTable = findTableByAlias(defaultTableName, editor);\n    defaultTable = defaultTable || [];\n    if (defaultTable.columns) defaultTable = defaultTable.columns;\n    var cur = editor.getCursor();\n    var result = [];\n    var token = editor.getTokenAt(cur),\n        start,\n        end,\n        search;\n\n    if (token.end > cur.ch) {\n      token.end = cur.ch;\n      token.string = token.string.slice(0, cur.ch - token.start);\n    }\n\n    if (token.string.match(/^[.`\"'\\w@][\\w$#]*$/g)) {\n      search = token.string;\n      start = token.start;\n      end = token.end;\n    } else {\n      start = end = cur.ch;\n      search = \"\";\n    }\n\n    if (search.charAt(0) == \".\" || search.charAt(0) == identifierQuote) {\n      start = nameCompletion(cur, token, result, editor);\n    } else {\n      var objectOrClass = function objectOrClass(w, className) {\n        if (_typeof(w) === \"object\") {\n          w.className = className;\n        } else {\n          w = {\n            text: w,\n            className: className\n          };\n        }\n\n        return w;\n      };\n\n      addMatches(result, search, defaultTable, function (w) {\n        return objectOrClass(w, \"CodeMirror-hint-table CodeMirror-hint-default-table\");\n      });\n      addMatches(result, search, tables, function (w) {\n        return objectOrClass(w, \"CodeMirror-hint-table\");\n      });\n      if (!disableKeywords) addMatches(result, search, keywords, function (w) {\n        return objectOrClass(w.toUpperCase(), \"CodeMirror-hint-keyword\");\n      });\n    }\n\n    return {\n      list: result,\n      from: Pos(cur.line, start),\n      to: Pos(cur.line, end)\n    };\n  });\n});",{"version":3,"sources":["D:/activiti/project01/jeecg-boot-activiti-master/ant-design-vue-jeecg/src/components/jeecg/dynamic/cm_sql_hint.js"],"names":["mod","CodeMirror","tables","defaultTable","keywords","identifierQuote","CONS","QUERY_DIV","ALIAS_KEYWORD","Pos","cmpPos","isArray","val","Object","prototype","toString","call","getKeywords","editor","mode","doc","modeOption","resolveMode","getIdentifierQuote","getText","item","text","wrapTable","name","value","columns","parseTables","input","result","i","length","toUpperCase","getTable","shallowClone","object","key","hasOwnProperty","match","string","word","len","sub","substr","addMatches","search","wordlist","formatter","push","displayText","cleanName","charAt","nameParts","split","replace","RegExp","join","insertIdentifierQuotes","escaped","nameCompletion","cur","token","useIdentifierQuotes","start","cont","unshift","getTokenAt","line","w","pop","table","alias","aliasTable","oldTable","findTableByAlias","tableInsert","eachWord","lineText","f","words","fullQuery","getValue","aliasUpperCase","previousWord","separator","validRange","end","lastLine","getLineHandle","indexOfSeparator","indexOf","posFromIndex","prevItem","current","getCursor","query","getRange","wordUpperCase","registerHelper","options","defaultTableName","disableKeywords","ch","slice","objectOrClass","className","list","from","to"],"mappings":"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","sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n\n(function(mod) {\n  /*if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"), require(\"../../mode/sql/sql\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\", \"../../mode/sql/sql\"], mod);\n  else */\n    // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n  \"use strict\";\n\n  var tables;\n  var defaultTable;\n  var keywords;\n  var identifierQuote;\n  var CONS = {\n    QUERY_DIV: \";\",\n    ALIAS_KEYWORD: \"AS\"\n  };\n  var Pos = CodeMirror.Pos, cmpPos = CodeMirror.cmpPos;\n\n  function isArray(val) { return Object.prototype.toString.call(val) == \"[object Array]\" }\n\n  function getKeywords(editor) {\n    var mode = editor.doc.modeOption;\n    if (mode === \"sql\") mode = \"text/x-sql\";\n    return CodeMirror.resolveMode(mode).keywords;\n  }\n\n  function getIdentifierQuote(editor) {\n    var mode = editor.doc.modeOption;\n    if (mode === \"sql\") mode = \"text/x-sql\";\n    return CodeMirror.resolveMode(mode).identifierQuote || \"`\";\n  }\n\n  function getText(item) {\n    return typeof item == \"string\" ? item : item.text;\n  }\n\n  function wrapTable(name, value) {\n    if (isArray(value)) value = {columns: value}\n    if (!value.text) value.text = name\n    return value\n  }\n\n  function parseTables(input) {\n    var result = {}\n    if (isArray(input)) {\n      for (var i = input.length - 1; i >= 0; i--) {\n        var item = input[i]\n        result[getText(item).toUpperCase()] = wrapTable(getText(item), item)\n      }\n    } else if (input) {\n      for (var name in input)\n        result[name.toUpperCase()] = wrapTable(name, input[name])\n    }\n    return result\n  }\n\n  function getTable(name) {\n    return tables[name.toUpperCase()]\n  }\n\n  function shallowClone(object) {\n    var result = {};\n    for (var key in object) if (object.hasOwnProperty(key))\n      result[key] = object[key];\n    return result;\n  }\n\n  function match(string, word) {\n    var len = string.length;\n    var sub = getText(word).substr(0, len);\n    return string.toUpperCase() === sub.toUpperCase();\n  }\n\n  function addMatches(result, search, wordlist, formatter) {\n    if (isArray(wordlist)) {\n      for (var i = 0; i < wordlist.length; i++)\n        if (match(search, wordlist[i])) result.push(formatter(wordlist[i]))\n    } else {\n      for (var word in wordlist) if (wordlist.hasOwnProperty(word)) {\n        var val = wordlist[word]\n        if (!val || val === true)\n          val = word\n        else\n          val = val.displayText ? {text: val.text, displayText: val.displayText} : val.text\n        if (match(search, val)) result.push(formatter(val))\n      }\n    }\n  }\n\n  function cleanName(name) {\n    // Get rid name from identifierQuote and preceding dot(.)\n    if (name.charAt(0) == \".\") {\n      name = name.substr(1);\n    }\n    // replace doublicated identifierQuotes with single identifierQuotes\n    // and remove single identifierQuotes\n    var nameParts = name.split(identifierQuote+identifierQuote);\n    for (var i = 0; i < nameParts.length; i++)\n      nameParts[i] = nameParts[i].replace(new RegExp(identifierQuote,\"g\"), \"\");\n    return nameParts.join(identifierQuote);\n  }\n\n  function insertIdentifierQuotes(name) {\n    var nameParts = getText(name).split(\".\");\n    for (var i = 0; i < nameParts.length; i++)\n      nameParts[i] = identifierQuote +\n        // doublicate identifierQuotes\n        nameParts[i].replace(new RegExp(identifierQuote,\"g\"), identifierQuote+identifierQuote) +\n        identifierQuote;\n    var escaped = nameParts.join(\".\");\n    if (typeof name == \"string\") return escaped;\n    name = shallowClone(name);\n    name.text = escaped;\n    return name;\n  }\n\n  function nameCompletion(cur, token, result, editor) {\n    // Try to complete table, column names and return start position of completion\n    var useIdentifierQuotes = false;\n    var nameParts = [];\n    var start = token.start;\n    var cont = true;\n    while (cont) {\n      cont = (token.string.charAt(0) == \".\");\n      useIdentifierQuotes = useIdentifierQuotes || (token.string.charAt(0) == identifierQuote);\n\n      start = token.start;\n      nameParts.unshift(cleanName(token.string));\n\n      token = editor.getTokenAt(Pos(cur.line, token.start));\n      if (token.string == \".\") {\n        cont = true;\n        token = editor.getTokenAt(Pos(cur.line, token.start));\n      }\n    }\n\n    // Try to complete table names\n    var string = nameParts.join(\".\");\n    addMatches(result, string, tables, function(w) {\n      return useIdentifierQuotes ? insertIdentifierQuotes(w) : w;\n    });\n\n    // Try to complete columns from defaultTable\n    addMatches(result, string, defaultTable, function(w) {\n      return useIdentifierQuotes ? insertIdentifierQuotes(w) : w;\n    });\n\n    // Try to complete columns\n    string = nameParts.pop();\n    var table = nameParts.join(\".\");\n\n    var alias = false;\n    var aliasTable = table;\n    // Check if table is available. If not, find table by Alias\n    if (!getTable(table)) {\n      var oldTable = table;\n      table = findTableByAlias(table, editor);\n      if (table !== oldTable) alias = true;\n    }\n\n    var columns = getTable(table);\n    if (columns && columns.columns)\n      columns = columns.columns;\n\n    if (columns) {\n      addMatches(result, string, columns, function(w) {\n        var tableInsert = table;\n        if (alias == true) tableInsert = aliasTable;\n        if (typeof w == \"string\") {\n          w = tableInsert + \".\" + w;\n        } else {\n          w = shallowClone(w);\n          w.text = tableInsert + \".\" + w.text;\n        }\n        return useIdentifierQuotes ? insertIdentifierQuotes(w) : w;\n      });\n    }\n\n    return start;\n  }\n\n  function eachWord(lineText, f) {\n    var words = lineText.split(/\\s+/)\n    for (var i = 0; i < words.length; i++)\n      if (words[i]) f(words[i].replace(/[,;]/g, ''))\n  }\n\n  function findTableByAlias(alias, editor) {\n    var doc = editor.doc;\n    var fullQuery = doc.getValue();\n    var aliasUpperCase = alias.toUpperCase();\n    var previousWord = \"\";\n    var table = \"\";\n    var separator = [];\n    var validRange = {\n      start: Pos(0, 0),\n      end: Pos(editor.lastLine(), editor.getLineHandle(editor.lastLine()).length)\n    };\n\n    //add separator\n    var indexOfSeparator = fullQuery.indexOf(CONS.QUERY_DIV);\n    while(indexOfSeparator != -1) {\n      separator.push(doc.posFromIndex(indexOfSeparator));\n      indexOfSeparator = fullQuery.indexOf(CONS.QUERY_DIV, indexOfSeparator+1);\n    }\n    separator.unshift(Pos(0, 0));\n    separator.push(Pos(editor.lastLine(), editor.getLineHandle(editor.lastLine()).text.length));\n\n    //find valid range\n    var prevItem = null;\n    var current = editor.getCursor()\n    for (var i = 0; i < separator.length; i++) {\n      if ((prevItem == null || cmpPos(current, prevItem) > 0) && cmpPos(current, separator[i]) <= 0) {\n        validRange = {start: prevItem, end: separator[i]};\n        break;\n      }\n      prevItem = separator[i];\n    }\n\n    if (validRange.start) {\n      var query = doc.getRange(validRange.start, validRange.end, false);\n\n      for (var i = 0; i < query.length; i++) {\n        var lineText = query[i];\n        eachWord(lineText, function(word) {\n          var wordUpperCase = word.toUpperCase();\n          if (wordUpperCase === aliasUpperCase && getTable(previousWord))\n            table = previousWord;\n          if (wordUpperCase !== CONS.ALIAS_KEYWORD)\n            previousWord = word;\n        });\n        if (table) break;\n      }\n    }\n    return table;\n  }\n\n  CodeMirror.registerHelper(\"hint\", \"sql\", function(editor, options) {\n    tables = parseTables(options && options.tables)\n    var defaultTableName = options && options.defaultTable;\n    var disableKeywords = options && options.disableKeywords;\n    defaultTable = defaultTableName && getTable(defaultTableName);\n    keywords = getKeywords(editor);\n    identifierQuote = getIdentifierQuote(editor);\n\n    if (defaultTableName && !defaultTable)\n      defaultTable = findTableByAlias(defaultTableName, editor);\n\n    defaultTable = defaultTable || [];\n\n    if (defaultTable.columns)\n      defaultTable = defaultTable.columns;\n\n    var cur = editor.getCursor();\n    var result = [];\n    var token = editor.getTokenAt(cur), start, end, search;\n    if (token.end > cur.ch) {\n      token.end = cur.ch;\n      token.string = token.string.slice(0, cur.ch - token.start);\n    }\n\n    if (token.string.match(/^[.`\"'\\w@][\\w$#]*$/g)) {\n      search = token.string;\n      start = token.start;\n      end = token.end;\n    } else {\n      start = end = cur.ch;\n      search = \"\";\n    }\n    if (search.charAt(0) == \".\" || search.charAt(0) == identifierQuote) {\n      start = nameCompletion(cur, token, result, editor);\n    } else {\n      var objectOrClass = function(w, className) {\n        if (typeof w === \"object\") {\n          w.className = className;\n        } else {\n          w = { text: w, className: className };\n        }\n        return w;\n      };\n      addMatches(result, search, defaultTable, function(w) {\n        return objectOrClass(w, \"CodeMirror-hint-table CodeMirror-hint-default-table\");\n      });\n      addMatches(\n        result,\n        search,\n        tables, function(w) {\n          return objectOrClass(w, \"CodeMirror-hint-table\");\n        }\n      );\n      if (!disableKeywords)\n        addMatches(result, search, keywords, function(w) {\n          return objectOrClass(w.toUpperCase(), \"CodeMirror-hint-keyword\");\n        });\n    }\n\n    return {list: result, from: Pos(cur.line, start), to: Pos(cur.line, end)};\n  });\n});"]}]}