{"remainingRequest":"D:\\activiti\\project01\\jeecg-boot-activiti-master\\ant-design-vue-jeecg\\node_modules\\babel-loader\\lib\\index.js!D:\\activiti\\project01\\jeecg-boot-activiti-master\\ant-design-vue-jeecg\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!D:\\activiti\\project01\\jeecg-boot-activiti-master\\ant-design-vue-jeecg\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\activiti\\project01\\jeecg-boot-activiti-master\\ant-design-vue-jeecg\\src\\components\\jeecg\\JModal\\index.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\activiti\\project01\\jeecg-boot-activiti-master\\ant-design-vue-jeecg\\src\\components\\jeecg\\JModal\\index.vue","mtime":1611914356000},{"path":"D:\\activiti\\project01\\jeecg-boot-activiti-master\\ant-design-vue-jeecg\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1621061384845},{"path":"D:\\activiti\\project01\\jeecg-boot-activiti-master\\ant-design-vue-jeecg\\node_modules\\babel-loader\\lib\\index.js","mtime":1621061377995},{"path":"D:\\activiti\\project01\\jeecg-boot-activiti-master\\ant-design-vue-jeecg\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1621061384845},{"path":"D:\\activiti\\project01\\jeecg-boot-activiti-master\\ant-design-vue-jeecg\\node_modules\\vue-loader\\lib\\index.js","mtime":1621061372054}],"contextDependencies":[],"result":["function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport { getClass as _getClass, getStyle as _getStyle } from '@/utils/props-util';\nimport { triggerWindowResizeEvent } from '@/utils/util';\nexport default {\n  name: 'JModal',\n  props: {\n    title: String,\n    // 可使用 .sync 修饰符\n    visible: Boolean,\n    // 是否全屏弹窗，当全屏时无论如何都会禁止 body 滚动。可使用 .sync 修饰符\n    fullscreen: {\n      type: Boolean,\n      default: false\n    },\n    // 是否允许切换全屏（允许后右上角会出现一个按钮）\n    switchFullscreen: {\n      type: Boolean,\n      default: false\n    },\n    // 点击确定按钮的时候是否关闭弹窗\n    okClose: {\n      type: Boolean,\n      default: true\n    }\n  },\n  data: function data() {\n    return {\n      // 内部使用的 slots ，不再处理\n      usedSlots: ['title'],\n      // 实际控制是否全屏的参数\n      innerFullscreen: this.fullscreen\n    };\n  },\n  computed: {\n    // 一些未处理的参数或特殊处理的参数绑定到 a-modal 上\n    _attrs: function _attrs() {\n      var attrs = _objectSpread({}, this.$attrs); // 如果全屏就将宽度设为 100%\n\n\n      if (this.innerFullscreen) {\n        attrs['width'] = '100%';\n      }\n\n      return attrs;\n    },\n    modalClass: function modalClass() {\n      return {\n        'j-modal-box': true,\n        'fullscreen': this.innerFullscreen,\n        'no-title': this.isNoTitle,\n        'no-footer': this.isNoFooter\n      };\n    },\n    modalStyle: function modalStyle() {\n      var style = {}; // 如果全屏就将top设为 0\n\n      if (this.innerFullscreen) {\n        style['top'] = '0';\n      }\n\n      return style;\n    },\n    isNoTitle: function isNoTitle() {\n      return !this.title && !this.allSlotsKeys.includes('title');\n    },\n    isNoFooter: function isNoFooter() {\n      return this._attrs['footer'] === null;\n    },\n    slotsKeys: function slotsKeys() {\n      var _this = this;\n\n      return Object.keys(this.$slots).filter(function (key) {\n        return !_this.usedSlots.includes(key);\n      });\n    },\n    scopedSlotsKeys: function scopedSlotsKeys() {\n      var _this2 = this;\n\n      return Object.keys(this.$scopedSlots).filter(function (key) {\n        return !_this2.usedSlots.includes(key);\n      });\n    },\n    allSlotsKeys: function allSlotsKeys() {\n      return Object.keys(this.$slots).concat(Object.keys(this.$scopedSlots));\n    },\n    // 切换全屏的按钮图标\n    fullscreenButtonIcon: function fullscreenButtonIcon() {\n      return this.innerFullscreen ? 'fullscreen-exit' : 'fullscreen';\n    }\n  },\n  watch: {\n    visible: function visible() {\n      if (this.visible) {\n        this.innerFullscreen = this.fullscreen;\n      }\n    },\n    innerFullscreen: function innerFullscreen(val) {\n      this.$emit('update:fullscreen', val);\n    }\n  },\n  methods: {\n    getClass: function getClass(clazz) {\n      return _objectSpread({}, _getClass(this), {}, clazz);\n    },\n    getStyle: function getStyle(style) {\n      return _objectSpread({}, _getStyle(this), {}, style);\n    },\n    close: function close() {\n      this.$emit('update:visible', false);\n    },\n    handleOk: function handleOk() {\n      if (this.okClose) {\n        this.close();\n      }\n    },\n    handleCancel: function handleCancel() {\n      this.close();\n    },\n\n    /** 切换全屏 */\n    toggleFullscreen: function toggleFullscreen() {\n      this.innerFullscreen = !this.innerFullscreen;\n      triggerWindowResizeEvent();\n    }\n  }\n};",{"version":3,"sources":["index.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n  <a-modal\n    ref=\"modal\"\n    :class=\"getClass(modalClass)\"\n    :style=\"getStyle(modalStyle)\"\n    :visible=\"visible\"\n    v-bind=\"_attrs\"\n    v-on=\"$listeners\"\n    @ok=\"handleOk\"\n    @cancel=\"handleCancel\"\n  >\n\n    <slot></slot>\n\n    <template v-if=\"!isNoTitle\" slot=\"title\">\n      <a-row class=\"j-modal-title-row\" type=\"flex\">\n        <a-col class=\"left\">\n          <slot name=\"title\">{{ title }}</slot>\n        </a-col>\n        <a-col v-if=\"switchFullscreen\" class=\"right\" @click=\"toggleFullscreen\">\n          <a-button class=\"ant-modal-close ant-modal-close-x\" ghost type=\"link\" :icon=\"fullscreenButtonIcon\"/>\n        </a-col>\n      </a-row>\n    </template>\n\n    <!-- 处理 scopedSlots -->\n    <template v-for=\"slotName of scopedSlotsKeys\" :slot=\"slotName\">\n      <slot :name=\"slotName\"></slot>\n    </template>\n\n    <!-- 处理 slots -->\n    <template v-for=\"slotName of slotsKeys\" v-slot:[slotName]>\n      <slot :name=\"slotName\"></slot>\n    </template>\n\n  </a-modal>\n</template>\n\n<script>\n\n  import { getClass, getStyle } from '@/utils/props-util'\n  import { triggerWindowResizeEvent } from '@/utils/util'\n\n  export default {\n    name: 'JModal',\n    props: {\n      title: String,\n      // 可使用 .sync 修饰符\n      visible: Boolean,\n      // 是否全屏弹窗，当全屏时无论如何都会禁止 body 滚动。可使用 .sync 修饰符\n      fullscreen: {\n        type: Boolean,\n        default: false\n      },\n      // 是否允许切换全屏（允许后右上角会出现一个按钮）\n      switchFullscreen: {\n        type: Boolean,\n        default: false\n      },\n      // 点击确定按钮的时候是否关闭弹窗\n      okClose: {\n        type: Boolean,\n        default: true\n      },\n    },\n    data() {\n      return {\n        // 内部使用的 slots ，不再处理\n        usedSlots: ['title'],\n        // 实际控制是否全屏的参数\n        innerFullscreen: this.fullscreen,\n      }\n    },\n    computed: {\n      // 一些未处理的参数或特殊处理的参数绑定到 a-modal 上\n      _attrs() {\n        let attrs = { ...this.$attrs }\n        // 如果全屏就将宽度设为 100%\n        if (this.innerFullscreen) {\n          attrs['width'] = '100%'\n        }\n        return attrs\n      },\n      modalClass() {\n        return {\n          'j-modal-box': true,\n          'fullscreen': this.innerFullscreen,\n          'no-title': this.isNoTitle,\n          'no-footer': this.isNoFooter,\n        }\n      },\n      modalStyle() {\n        let style = {}\n        // 如果全屏就将top设为 0\n        if (this.innerFullscreen) {\n          style['top'] = '0'\n        }\n        return style\n      },\n      isNoTitle() {\n        return !this.title && !this.allSlotsKeys.includes('title')\n      },\n      isNoFooter() {\n        return this._attrs['footer'] === null\n      },\n      slotsKeys() {\n        return Object.keys(this.$slots).filter(key => !this.usedSlots.includes(key))\n      },\n      scopedSlotsKeys() {\n        return Object.keys(this.$scopedSlots).filter(key => !this.usedSlots.includes(key))\n      },\n      allSlotsKeys() {\n        return Object.keys(this.$slots).concat(Object.keys(this.$scopedSlots))\n      },\n      // 切换全屏的按钮图标\n      fullscreenButtonIcon() {\n        return this.innerFullscreen ? 'fullscreen-exit' : 'fullscreen'\n      },\n    },\n    watch: {\n      visible() {\n        if (this.visible) {\n          this.innerFullscreen = this.fullscreen\n        }\n      },\n      innerFullscreen(val) {\n        this.$emit('update:fullscreen', val)\n      },\n    },\n    methods: {\n\n      getClass(clazz) {\n        return { ...getClass(this), ...clazz }\n      },\n      getStyle(style) {\n        return { ...getStyle(this), ...style }\n      },\n\n      close() {\n        this.$emit('update:visible', false)\n      },\n\n      handleOk() {\n        if (this.okClose) {\n          this.close()\n        }\n      },\n      handleCancel() {\n        this.close()\n      },\n\n      /** 切换全屏 */\n      toggleFullscreen() {\n        this.innerFullscreen = !this.innerFullscreen\n        triggerWindowResizeEvent()\n      },\n\n    }\n  }\n</script>\n\n<style lang=\"less\">\n  .j-modal-box {\n\n    &.fullscreen {\n      top: 0;\n      left: 0;\n      padding: 0;\n\n      // 兼容1.6.2版本的antdv\n      & .ant-modal {\n        top: 0;\n        padding: 0;\n        height: 100vh;\n      }\n\n      & .ant-modal-content {\n        height: 100vh;\n        border-radius: 0;\n\n        & .ant-modal-body {\n          /* title 和 footer 各占 55px */\n          height: calc(100% - 55px - 55px);\n          overflow: auto;\n        }\n      }\n\n      &.no-title, &.no-footer {\n        .ant-modal-body {\n          height: calc(100% - 55px);\n        }\n      }\n\n      &.no-title.no-footer {\n        .ant-modal-body {\n          height: 100%;\n        }\n      }\n    }\n\n    .j-modal-title-row {\n      .left {\n        width: calc(100% - 56px - 56px);\n      }\n\n      .right {\n        width: 56px;\n        position: inherit;\n\n        .ant-modal-close {\n          right: 56px;\n          color: rgba(0, 0, 0, 0.45);\n\n          &:hover {\n            color: rgba(0, 0, 0, 0.75);\n          }\n        }\n      }\n    }\n  }\n\n  @media (max-width: 767px) {\n    .j-modal-box.fullscreen {\n      margin: 0;\n      max-width: 100vw;\n    }\n  }\n</style>"],"sourceRoot":"src/components/jeecg/JModal"}]}