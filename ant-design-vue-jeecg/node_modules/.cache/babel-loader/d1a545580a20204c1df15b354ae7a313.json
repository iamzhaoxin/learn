{"remainingRequest":"D:\\activiti\\project01\\jeecg-boot-activiti-master\\ant-design-vue-jeecg\\node_modules\\babel-loader\\lib\\index.js!D:\\activiti\\project01\\jeecg-boot-activiti-master\\ant-design-vue-jeecg\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!D:\\activiti\\project01\\jeecg-boot-activiti-master\\ant-design-vue-jeecg\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\activiti\\project01\\jeecg-boot-activiti-master\\ant-design-vue-jeecg\\src\\components\\jeecgbiz\\modal\\JSelectDepartModal.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\activiti\\project01\\jeecg-boot-activiti-master\\ant-design-vue-jeecg\\src\\components\\jeecgbiz\\modal\\JSelectDepartModal.vue","mtime":1611914356000},{"path":"D:\\activiti\\project01\\jeecg-boot-activiti-master\\ant-design-vue-jeecg\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1621061384845},{"path":"D:\\activiti\\project01\\jeecg-boot-activiti-master\\ant-design-vue-jeecg\\node_modules\\babel-loader\\lib\\index.js","mtime":1621061377995},{"path":"D:\\activiti\\project01\\jeecg-boot-activiti-master\\ant-design-vue-jeecg\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1621061384845},{"path":"D:\\activiti\\project01\\jeecg-boot-activiti-master\\ant-design-vue-jeecg\\node_modules\\vue-loader\\lib\\index.js","mtime":1621061372054}],"contextDependencies":[],"result":["function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }\n\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance\"); }\n\nfunction _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === \"[object Arguments]\") return Array.from(iter); }\n\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport { queryDepartTreeList } from '@/api/api';\nexport default {\n  name: 'JSelectDepartModal',\n  props: ['modalWidth', 'multi', 'rootOpened', 'departId'],\n  data: function data() {\n    return {\n      visible: false,\n      confirmLoading: false,\n      treeData: [],\n      autoExpandParent: true,\n      expandedKeys: [],\n      dataList: [],\n      checkedKeys: [],\n      checkedRows: [],\n      searchValue: \"\"\n    };\n  },\n  created: function created() {\n    this.loadDepart();\n  },\n  watch: {\n    departId: function departId() {\n      this.initDepartComponent();\n    },\n    visible: {\n      handler: function handler() {\n        if (this.departId) {\n          this.checkedKeys = this.departId.split(\",\"); // console.log('this.departId', this.departId)\n        } else {\n          this.checkedKeys = [];\n        }\n      }\n    }\n  },\n  methods: {\n    show: function show() {\n      this.visible = true;\n      this.checkedRows = [];\n      this.checkedKeys = [];\n    },\n    loadDepart: function loadDepart() {\n      var _this = this;\n\n      queryDepartTreeList().then(function (res) {\n        if (res.success) {\n          var arr = _toConsumableArray(res.result);\n\n          _this.reWriterWithSlot(arr);\n\n          _this.treeData = arr;\n\n          _this.initDepartComponent();\n\n          if (_this.rootOpened) {\n            _this.initExpandedKeys(res.result);\n          }\n        }\n      });\n    },\n    initDepartComponent: function initDepartComponent() {\n      var names = '';\n\n      if (this.departId) {\n        var currDepartId = this.departId;\n        var _iteratorNormalCompletion = true;\n        var _didIteratorError = false;\n        var _iteratorError = undefined;\n\n        try {\n          for (var _iterator = this.dataList[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n            var item = _step.value;\n\n            if (currDepartId.indexOf(item.key) >= 0) {\n              names += \",\" + item.title;\n            }\n          }\n        } catch (err) {\n          _didIteratorError = true;\n          _iteratorError = err;\n        } finally {\n          try {\n            if (!_iteratorNormalCompletion && _iterator.return != null) {\n              _iterator.return();\n            }\n          } finally {\n            if (_didIteratorError) {\n              throw _iteratorError;\n            }\n          }\n        }\n\n        if (names) {\n          names = names.substring(1);\n        }\n      }\n\n      this.$emit(\"initComp\", names);\n    },\n    reWriterWithSlot: function reWriterWithSlot(arr) {\n      var _iteratorNormalCompletion2 = true;\n      var _didIteratorError2 = false;\n      var _iteratorError2 = undefined;\n\n      try {\n        for (var _iterator2 = arr[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n          var item = _step2.value;\n\n          if (item.children && item.children.length > 0) {\n            this.reWriterWithSlot(item.children);\n            var temp = Object.assign({}, item);\n            temp.children = {};\n            this.dataList.push(temp);\n          } else {\n            this.dataList.push(item);\n            item.scopedSlots = {\n              title: 'title'\n            };\n          }\n        }\n      } catch (err) {\n        _didIteratorError2 = true;\n        _iteratorError2 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion2 && _iterator2.return != null) {\n            _iterator2.return();\n          }\n        } finally {\n          if (_didIteratorError2) {\n            throw _iteratorError2;\n          }\n        }\n      }\n    },\n    initExpandedKeys: function initExpandedKeys(arr) {\n      if (arr && arr.length > 0) {\n        var keys = [];\n        var _iteratorNormalCompletion3 = true;\n        var _didIteratorError3 = false;\n        var _iteratorError3 = undefined;\n\n        try {\n          for (var _iterator3 = arr[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {\n            var item = _step3.value;\n\n            if (item.children && item.children.length > 0) {\n              keys.push(item.id);\n            }\n          }\n        } catch (err) {\n          _didIteratorError3 = true;\n          _iteratorError3 = err;\n        } finally {\n          try {\n            if (!_iteratorNormalCompletion3 && _iterator3.return != null) {\n              _iterator3.return();\n            }\n          } finally {\n            if (_didIteratorError3) {\n              throw _iteratorError3;\n            }\n          }\n        }\n\n        this.expandedKeys = [].concat(keys);\n      } else {\n        this.expandedKeys = [];\n      }\n    },\n    onCheck: function onCheck(checkedKeys, info) {\n      var _this2 = this;\n\n      if (!this.multi) {\n        var arr = checkedKeys.checked.filter(function (item) {\n          return _this2.checkedKeys.indexOf(item) < 0;\n        });\n        this.checkedKeys = _toConsumableArray(arr);\n        this.checkedRows = this.checkedKeys.length === 0 ? [] : [info.node.dataRef];\n      } else {\n        this.checkedKeys = checkedKeys.checked;\n        this.checkedRows = this.getCheckedRows(this.checkedKeys);\n      }\n    },\n    onSelect: function onSelect(selectedKeys, info) {\n      var keys = [];\n      keys.push(selectedKeys[0]);\n\n      if (!this.checkedKeys || this.checkedKeys.length === 0 || !this.multi) {\n        this.checkedKeys = [].concat(keys);\n        this.checkedRows = [info.node.dataRef];\n      } else {\n        var currKey = info.node.dataRef.key;\n\n        if (this.checkedKeys.indexOf(currKey) >= 0) {\n          this.checkedKeys = this.checkedKeys.filter(function (item) {\n            return item !== currKey;\n          });\n        } else {\n          var _this$checkedKeys;\n\n          (_this$checkedKeys = this.checkedKeys).push.apply(_this$checkedKeys, keys);\n        }\n      }\n\n      this.checkedRows = this.getCheckedRows(this.checkedKeys);\n    },\n    onExpand: function onExpand(expandedKeys) {\n      this.expandedKeys = expandedKeys;\n      this.autoExpandParent = false;\n    },\n    handleSubmit: function handleSubmit() {\n      if (!this.checkedKeys || this.checkedKeys.length == 0) {\n        this.$emit(\"ok\", '');\n      } else {\n        this.$emit(\"ok\", this.checkedRows, this.checkedKeys.join(\",\"));\n      }\n\n      this.handleClear();\n    },\n    handleCancel: function handleCancel() {\n      this.handleClear();\n    },\n    handleClear: function handleClear() {\n      this.visible = false;\n      this.checkedKeys = [];\n    },\n    getParentKey: function getParentKey(currKey, treeData) {\n      var parentKey;\n\n      for (var i = 0; i < treeData.length; i++) {\n        var node = treeData[i];\n\n        if (node.children) {\n          if (node.children.some(function (item) {\n            return item.key === currKey;\n          })) {\n            parentKey = node.key;\n          } else if (this.getParentKey(currKey, node.children)) {\n            parentKey = this.getParentKey(currKey, node.children);\n          }\n        }\n      }\n\n      return parentKey;\n    },\n    onSearch: function onSearch(value) {\n      var _this3 = this;\n\n      var expandedKeys = this.dataList.map(function (item) {\n        if (item.title.indexOf(value) > -1) {\n          return _this3.getParentKey(item.key, _this3.treeData);\n        }\n\n        return null;\n      }).filter(function (item, i, self) {\n        return item && self.indexOf(item) === i;\n      });\n      Object.assign(this, {\n        expandedKeys: expandedKeys,\n        searchValue: value,\n        autoExpandParent: true\n      });\n    },\n    // ца╣цНо checkedKeys шО╖хПЦ rows\n    getCheckedRows: function getCheckedRows(checkedKeys) {\n      var forChildren = function forChildren(list, key) {\n        var _iteratorNormalCompletion4 = true;\n        var _didIteratorError4 = false;\n        var _iteratorError4 = undefined;\n\n        try {\n          for (var _iterator4 = list[Symbol.iterator](), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {\n            var item = _step4.value;\n\n            if (item.id === key) {\n              return item;\n            }\n\n            if (item.children instanceof Array) {\n              var value = forChildren(item.children, key);\n\n              if (value != null) {\n                return value;\n              }\n            }\n          }\n        } catch (err) {\n          _didIteratorError4 = true;\n          _iteratorError4 = err;\n        } finally {\n          try {\n            if (!_iteratorNormalCompletion4 && _iterator4.return != null) {\n              _iterator4.return();\n            }\n          } finally {\n            if (_didIteratorError4) {\n              throw _iteratorError4;\n            }\n          }\n        }\n\n        return null;\n      };\n\n      var rows = [];\n      var _iteratorNormalCompletion5 = true;\n      var _didIteratorError5 = false;\n      var _iteratorError5 = undefined;\n\n      try {\n        for (var _iterator5 = checkedKeys[Symbol.iterator](), _step5; !(_iteratorNormalCompletion5 = (_step5 = _iterator5.next()).done); _iteratorNormalCompletion5 = true) {\n          var key = _step5.value;\n          var row = forChildren(this.treeData, key);\n\n          if (row != null) {\n            rows.push(row);\n          }\n        }\n      } catch (err) {\n        _didIteratorError5 = true;\n        _iteratorError5 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion5 && _iterator5.return != null) {\n            _iterator5.return();\n          }\n        } finally {\n          if (_didIteratorError5) {\n            throw _iteratorError5;\n          }\n        }\n      }\n\n      return rows;\n    }\n  }\n};",{"version":3,"sources":["JSelectDepartModal.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n  <j-modal\n    title=\"щАЙцЛйщГищЧи\"\n    :width=\"modalWidth\"\n    :visible=\"visible\"\n    :confirmLoading=\"confirmLoading\"\n    @ok=\"handleSubmit\"\n    @cancel=\"handleCancel\"\n    switchFullscreen\n    cancelText=\"хЕ│щЧн\">\n    <a-spin tip=\"Loading...\" :spinning=\"false\">\n      <a-input-search style=\"margin-bottom: 1px\" placeholder=\"шп╖ш╛УхЕещГищЧихРНчз░цМЙхЫЮш╜жш┐ЫшбМцРЬч┤в\" @search=\"onSearch\" />\n      <a-tree\n        checkable\n        class=\"my-dept-select-tree\"\n        :treeData=\"treeData\"\n        :checkStrictly=\"true\"\n        @check=\"onCheck\"\n        @select=\"onSelect\"\n        @expand=\"onExpand\"\n        :autoExpandParent=\"autoExpandParent\"\n        :expandedKeys=\"expandedKeys\"\n        :checkedKeys=\"checkedKeys\">\n\n        <template slot=\"title\" slot-scope=\"{title}\">\n          <span v-if=\"title.indexOf(searchValue) > -1\">\n            {{title.substr(0, title.indexOf(searchValue))}}\n            <span style=\"color: #f50\">{{searchValue}}</span>\n            {{title.substr(title.indexOf(searchValue) + searchValue.length)}}\n          </span>\n          <span v-else>{{title}}</span>\n        </template>\n      </a-tree>\n\n    </a-spin>\n  </j-modal>\n</template>\n\n<script>\n  import { queryDepartTreeList } from '@/api/api'\n  export default {\n    name: 'JSelectDepartModal',\n    props:['modalWidth','multi','rootOpened','departId'],\n    data(){\n      return {\n        visible:false,\n        confirmLoading:false,\n        treeData:[],\n        autoExpandParent:true,\n        expandedKeys:[],\n        dataList:[],\n        checkedKeys:[],\n        checkedRows:[],\n        searchValue:\"\"\n      }\n    },\n    created(){\n      this.loadDepart();\n    },\n    watch:{\n      departId(){\n        this.initDepartComponent()\n      },\n      visible: {\n        handler() {\n          if (this.departId) {\n            this.checkedKeys = this.departId.split(\",\");\n            // console.log('this.departId', this.departId)\n          } else {\n            this.checkedKeys = [];\n          }\n        }\n      }\n    },\n    methods:{\n      show(){\n        this.visible=true\n        this.checkedRows=[]\n        this.checkedKeys=[]\n      },\n      loadDepart(){\n        queryDepartTreeList().then(res=>{\n          if(res.success){\n            let arr = [...res.result]\n            this.reWriterWithSlot(arr)\n            this.treeData = arr\n            this.initDepartComponent()\n            if(this.rootOpened){\n              this.initExpandedKeys(res.result)\n            }\n          }\n        })\n      },\n      initDepartComponent(){\n        let names = ''\n        if(this.departId){\n          let currDepartId = this.departId\n          for(let item of this.dataList){\n            if(currDepartId.indexOf(item.key)>=0){\n              names+=\",\"+item.title\n            }\n          }\n          if(names){\n            names = names.substring(1)\n          }\n        }\n        this.$emit(\"initComp\",names)\n      },\n      reWriterWithSlot(arr){\n        for(let item of arr){\n          if(item.children && item.children.length>0){\n            this.reWriterWithSlot(item.children)\n            let temp = Object.assign({},item)\n            temp.children = {}\n            this.dataList.push(temp)\n          }else{\n            this.dataList.push(item)\n            item.scopedSlots={ title: 'title' }\n          }\n        }\n      },\n      initExpandedKeys(arr){\n        if(arr && arr.length>0){\n          let keys = []\n          for(let item of arr){\n            if(item.children && item.children.length>0){\n              keys.push(item.id)\n            }\n          }\n          this.expandedKeys=[...keys]\n        }else{\n          this.expandedKeys=[]\n        }\n      },\n      onCheck (checkedKeys,info) {\n        if(!this.multi){\n          let arr = checkedKeys.checked.filter(item => this.checkedKeys.indexOf(item) < 0)\n          this.checkedKeys = [...arr]\n          this.checkedRows = (this.checkedKeys.length === 0) ? [] : [info.node.dataRef]\n        }else{\n          this.checkedKeys = checkedKeys.checked\n          this.checkedRows = this.getCheckedRows(this.checkedKeys)\n        }\n      },\n      onSelect(selectedKeys,info) {\n        let keys = []\n        keys.push(selectedKeys[0])\n        if(!this.checkedKeys || this.checkedKeys.length===0 || !this.multi){\n          this.checkedKeys = [...keys]\n          this.checkedRows=[info.node.dataRef]\n        }else{\n          let currKey = info.node.dataRef.key\n          if(this.checkedKeys.indexOf(currKey)>=0){\n            this.checkedKeys = this.checkedKeys.filter(item=> item !==currKey)\n          }else{\n            this.checkedKeys.push(...keys)\n          }\n        }\n        this.checkedRows = this.getCheckedRows(this.checkedKeys)\n      },\n      onExpand (expandedKeys) {\n        this.expandedKeys = expandedKeys\n        this.autoExpandParent = false\n      },\n      handleSubmit(){\n        if(!this.checkedKeys || this.checkedKeys.length==0){\n          this.$emit(\"ok\",'')\n        }else{\n          this.$emit(\"ok\",this.checkedRows,this.checkedKeys.join(\",\"))\n        }\n        this.handleClear()\n      },\n      handleCancel(){\n        this.handleClear()\n      },\n      handleClear(){\n        this.visible=false\n        this.checkedKeys=[]\n      },\n      getParentKey(currKey,treeData){\n        let parentKey\n        for (let i = 0; i < treeData.length; i++) {\n          const node = treeData[i]\n          if (node.children) {\n            if (node.children.some(item => item.key === currKey)) {\n              parentKey = node.key\n            } else if (this.getParentKey(currKey, node.children)) {\n              parentKey = this.getParentKey(currKey, node.children)\n            }\n          }\n        }\n        return parentKey\n      },\n      onSearch(value){\n        const expandedKeys = this.dataList.map((item) => {\n          if (item.title.indexOf(value) > -1) {\n            return this.getParentKey(item.key,this.treeData)\n          }\n          return null\n        }).filter((item, i, self) => item && self.indexOf(item) === i)\n\n        Object.assign(this, {\n          expandedKeys,\n          searchValue: value,\n          autoExpandParent: true,\n        })\n\n\n      },\n      // ца╣цНо checkedKeys шО╖хПЦ rows\n      getCheckedRows(checkedKeys) {\n        const forChildren = (list, key) => {\n          for (let item of list) {\n            if (item.id === key) {\n              return item\n            }\n            if (item.children instanceof Array) {\n              let value = forChildren(item.children, key)\n              if (value != null) {\n                return value\n              }\n            }\n          }\n          return null\n        }\n\n        let rows = []\n        for (let key of checkedKeys) {\n          let row = forChildren(this.treeData, key)\n          if (row != null) {\n            rows.push(row)\n          }\n        }\n        return rows\n      }\n    }\n  }\n\n</script>\n\n<style lang=\"less\" scoped>\n  // щЩРхИ╢щГищЧищАЙцЛйцаСщлШх║жя╝МщБ┐хЕНщГищЧихдкхдЪцЧ╢чВ╣хЗ╗чбохоЪф╕Нф╛┐\n  .my-dept-select-tree{\n    height: 350px;\n    overflow-y: scroll;\n  }\n\n</style>"],"sourceRoot":"src/components/jeecgbiz/modal"}]}