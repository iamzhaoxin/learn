{"remainingRequest":"D:\\activiti\\project01\\jeecg-boot-activiti-master\\ant-design-vue-jeecg\\node_modules\\babel-loader\\lib\\index.js!D:\\activiti\\project01\\jeecg-boot-activiti-master\\ant-design-vue-jeecg\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!D:\\activiti\\project01\\jeecg-boot-activiti-master\\ant-design-vue-jeecg\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\activiti\\project01\\jeecg-boot-activiti-master\\ant-design-vue-jeecg\\src\\components\\jeecg\\JEditor.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\activiti\\project01\\jeecg-boot-activiti-master\\ant-design-vue-jeecg\\src\\components\\jeecg\\JEditor.vue","mtime":1611914356000},{"path":"D:\\activiti\\project01\\jeecg-boot-activiti-master\\ant-design-vue-jeecg\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1621061384845},{"path":"D:\\activiti\\project01\\jeecg-boot-activiti-master\\ant-design-vue-jeecg\\node_modules\\babel-loader\\lib\\index.js","mtime":1621061377995},{"path":"D:\\activiti\\project01\\jeecg-boot-activiti-master\\ant-design-vue-jeecg\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1621061384845},{"path":"D:\\activiti\\project01\\jeecg-boot-activiti-master\\ant-design-vue-jeecg\\node_modules\\vue-loader\\lib\\index.js","mtime":1621061372054}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport tinymce from 'tinymce/tinymce';\nimport Editor from '@tinymce/tinymce-vue';\nimport 'tinymce/themes/silver/theme';\nimport 'tinymce/plugins/image';\nimport 'tinymce/plugins/link';\nimport 'tinymce/plugins/media';\nimport 'tinymce/plugins/table';\nimport 'tinymce/plugins/lists';\nimport 'tinymce/plugins/contextmenu';\nimport 'tinymce/plugins/wordcount';\nimport 'tinymce/plugins/colorpicker';\nimport 'tinymce/plugins/textcolor';\nimport 'tinymce/plugins/fullscreen';\nimport 'tinymce/icons/default';\nimport { uploadAction, getFileAccessHttpUrl } from '@/api/manage';\nimport { getVmParentByName } from '@/utils/util';\nexport default {\n  components: {\n    Editor: Editor\n  },\n  props: {\n    value: {\n      type: String,\n      required: false\n    },\n    triggerChange: {\n      type: Boolean,\n      default: false,\n      required: false\n    },\n    disabled: {\n      type: Boolean,\n      default: false\n    },\n    plugins: {\n      type: [String, Array],\n      default: 'lists image link media table textcolor wordcount contextmenu fullscreen'\n    },\n    toolbar: {\n      type: [String, Array],\n      default: 'undo redo |  formatselect | bold italic | alignleft aligncenter alignright alignjustify | bullist numlist outdent indent | lists link unlink image media table | removeformat | fullscreen',\n      branding: false\n    }\n  },\n  data: function data() {\n    return {\n      //初始化配置\n      init: {\n        language_url: '/tinymce/langs/zh_CN.js',\n        language: 'zh_CN',\n        skin_url: '/tinymce/skins/lightgray',\n        height: 300,\n        plugins: this.plugins,\n        toolbar: this.toolbar,\n        branding: false,\n        menubar: false,\n        toolbar_drawer: false,\n        images_upload_handler: function images_upload_handler(blobInfo, success) {\n          var formData = new FormData();\n          formData.append('file', blobInfo.blob(), blobInfo.filename());\n          formData.append('biz', \"jeditor\");\n          formData.append(\"jeditor\", \"1\");\n          /*uploadAction(window._CONFIG['domianURL']+\"/sys/common/upload\", formData).then((res) => {\n            if (res.success) {\n              if(res.message == 'local'){*/\n\n          var img = 'data:image/jpeg;base64,' + blobInfo.base64();\n          success(img);\n          /*  success(img)\n          }else{\n            let img = getFileAccessHttpUrl(res.message)\n            success(img)\n          }\n          }\n          })*/\n        }\n      },\n      myValue: this.value,\n      reloading: false\n    };\n  },\n  mounted: function mounted() {\n    this.initATabsChangeAutoReload();\n  },\n  methods: {\n    reload: function reload() {\n      var _this = this;\n\n      this.reloading = true;\n      this.$nextTick(function () {\n        return _this.reloading = false;\n      });\n    },\n    onClick: function onClick(e) {\n      this.$emit('onClick', e, tinymce);\n    },\n    //可以添加一些自己的自定义事件，如清空内容\n    clear: function clear() {\n      this.myValue = '';\n    },\n\n    /**\n     * 自动判断父级是否是 <a-tabs/> 组件，然后添加事件监听，自动触发reload()\n     *\n     * 由于 tabs 组件切换会导致 tinymce 无法输入，\n     * 只有重新加载才能使用（无论是vue版的还是jQuery版tinymce都有这个通病）\n     */\n    initATabsChangeAutoReload: function initATabsChangeAutoReload() {\n      var _this2 = this;\n\n      // 获取父级\n      var tabs = getVmParentByName(this, 'ATabs');\n      var tabPane = getVmParentByName(this, 'ATabPane');\n\n      if (tabs && tabPane) {\n        // 用户自定义的 key\n        var currentKey = tabPane.$vnode.key; // 添加事件监听\n\n        tabs.$on('change', function (key) {\n          // 切换到自己时执行reload\n          if (currentKey === key) {\n            _this2.reload();\n          }\n        });\n      } else {\n        //update--begin--autor:wangshuai-----date:20200724------for：富文本编辑器切换tab无法修改------\n        var tabLayout = getVmParentByName(this, 'TabLayout');\n        tabLayout.excuteCallback(function () {\n          _this2.reload();\n        }); //update--begin--autor:wangshuai-----date:20200724------for：文本编辑器切换tab无法修改------\n      }\n    }\n  },\n  watch: {\n    value: function value(newValue) {\n      this.myValue = newValue == null ? '' : newValue;\n    },\n    myValue: function myValue(newValue) {\n      if (this.triggerChange) {\n        this.$emit('change', newValue);\n      } else {\n        this.$emit('input', newValue);\n      }\n    }\n  }\n};",{"version":3,"sources":["JEditor.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n  <div class=\"tinymce-editor\">\n    <editor\n      v-if=\"!reloading\"\n      v-model=\"myValue\"\n      :init=\"init\"\n      :disabled=\"disabled\"\n      @onClick=\"onClick\">\n    </editor>\n  </div>\n</template>\n\n<script>\n  import tinymce from 'tinymce/tinymce'\n  import Editor from '@tinymce/tinymce-vue'\n  import 'tinymce/themes/silver/theme'\n  import 'tinymce/plugins/image'\n  import 'tinymce/plugins/link'\n  import 'tinymce/plugins/media'\n  import 'tinymce/plugins/table'\n  import 'tinymce/plugins/lists'\n  import 'tinymce/plugins/contextmenu'\n  import 'tinymce/plugins/wordcount'\n  import 'tinymce/plugins/colorpicker'\n  import 'tinymce/plugins/textcolor'\n  import 'tinymce/plugins/fullscreen'\n  import 'tinymce/icons/default'\n  import { uploadAction,getFileAccessHttpUrl } from '@/api/manage'\n  import { getVmParentByName } from '@/utils/util'\n  export default {\n    components: {\n      Editor\n    },\n    props: {\n      value: {\n        type: String,\n        required:false\n      },\n      triggerChange:{\n        type: Boolean,\n        default: false,\n        required:false\n      },\n      disabled: {\n        type: Boolean,\n        default: false\n      },\n      plugins: {\n        type: [String, Array],\n        default: 'lists image link media table textcolor wordcount contextmenu fullscreen'\n      },\n      toolbar: {\n        type: [String, Array],\n        default: 'undo redo |  formatselect | bold italic | alignleft aligncenter alignright alignjustify | bullist numlist outdent indent | lists link unlink image media table | removeformat | fullscreen',\n        branding:false\n      }\n    },\n    data() {\n      return {\n        //初始化配置\n        init: {\n          language_url: '/tinymce/langs/zh_CN.js',\n          language: 'zh_CN',\n          skin_url: '/tinymce/skins/lightgray',\n          height: 300,\n          plugins: this.plugins,\n          toolbar: this.toolbar,\n          branding: false,\n          menubar: false,\n          toolbar_drawer: false,\n          images_upload_handler: (blobInfo, success) => {\n            let formData = new FormData()\n            formData.append('file', blobInfo.blob(), blobInfo.filename());\n            formData.append('biz', \"jeditor\");\n            formData.append(\"jeditor\",\"1\");\n            /*uploadAction(window._CONFIG['domianURL']+\"/sys/common/upload\", formData).then((res) => {\n              if (res.success) {\n                if(res.message == 'local'){*/\n                  const img = 'data:image/jpeg;base64,' + blobInfo.base64()\n                  success(img)\n                /*  success(img)\n                }else{\n                  let img = getFileAccessHttpUrl(res.message)\n                  success(img)\n                }\n              }\n            })*/\n          }\n        },\n        myValue: this.value,\n        reloading: false,\n      }\n    },\n    mounted() {\n      this.initATabsChangeAutoReload()\n    },\n    methods: {\n\n      reload() {\n        this.reloading = true\n        this.$nextTick(() => this.reloading = false)\n      },\n\n      onClick(e) {\n        this.$emit('onClick', e, tinymce)\n      },\n      //可以添加一些自己的自定义事件，如清空内容\n      clear() {\n        this.myValue = ''\n      },\n\n      /**\n       * 自动判断父级是否是 <a-tabs/> 组件，然后添加事件监听，自动触发reload()\n       *\n       * 由于 tabs 组件切换会导致 tinymce 无法输入，\n       * 只有重新加载才能使用（无论是vue版的还是jQuery版tinymce都有这个通病）\n       */\n      initATabsChangeAutoReload() {\n        // 获取父级\n        let tabs = getVmParentByName(this, 'ATabs')\n        let tabPane = getVmParentByName(this, 'ATabPane')\n        if (tabs && tabPane) {\n          // 用户自定义的 key\n          let currentKey = tabPane.$vnode.key\n          // 添加事件监听\n          tabs.$on('change', (key) => {\n            // 切换到自己时执行reload\n            if (currentKey === key) {\n              this.reload()\n            }\n          })\n        }else{\n          //update--begin--autor:wangshuai-----date:20200724------for：富文本编辑器切换tab无法修改------\n          let tabLayout = getVmParentByName(this, 'TabLayout')\n          tabLayout.excuteCallback(()=>{\n            this.reload()\n          })\n          //update--begin--autor:wangshuai-----date:20200724------for：文本编辑器切换tab无法修改------\n        }\n      },\n\n    },\n    watch: {\n      value(newValue) {\n        this.myValue = (newValue == null ? '' : newValue)\n      },\n      myValue(newValue) {\n        if(this.triggerChange){\n          this.$emit('change', newValue)\n        }else{\n          this.$emit('input', newValue)\n        }\n      }\n    }\n  }\n\n</script>\n<style scoped>\n</style>"],"sourceRoot":"src/components/jeecg"}]}