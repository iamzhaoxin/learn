{"remainingRequest":"D:\\activiti\\project01\\jeecg-boot-activiti-master\\ant-design-vue-jeecg\\node_modules\\babel-loader\\lib\\index.js!D:\\activiti\\project01\\jeecg-boot-activiti-master\\ant-design-vue-jeecg\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!D:\\activiti\\project01\\jeecg-boot-activiti-master\\ant-design-vue-jeecg\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\activiti\\project01\\jeecg-boot-activiti-master\\ant-design-vue-jeecg\\src\\components\\jeecg\\JCategorySelect.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\activiti\\project01\\jeecg-boot-activiti-master\\ant-design-vue-jeecg\\src\\components\\jeecg\\JCategorySelect.vue","mtime":1611914356000},{"path":"D:\\activiti\\project01\\jeecg-boot-activiti-master\\ant-design-vue-jeecg\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1621061384845},{"path":"D:\\activiti\\project01\\jeecg-boot-activiti-master\\ant-design-vue-jeecg\\node_modules\\babel-loader\\lib\\index.js","mtime":1621061377995},{"path":"D:\\activiti\\project01\\jeecg-boot-activiti-master\\ant-design-vue-jeecg\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1621061384845},{"path":"D:\\activiti\\project01\\jeecg-boot-activiti-master\\ant-design-vue-jeecg\\node_modules\\vue-loader\\lib\\index.js","mtime":1621061372054}],"contextDependencies":[],"result":["function _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }\n\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance\"); }\n\nfunction _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === \"[object Arguments]\") return Array.from(iter); }\n\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport { getAction } from '@/api/manage';\nexport default {\n  name: 'JCategorySelect',\n  props: {\n    value: {\n      type: String,\n      required: false\n    },\n    placeholder: {\n      type: String,\n      default: '请选择',\n      required: false\n    },\n    disabled: {\n      type: Boolean,\n      default: false,\n      required: false\n    },\n    condition: {\n      type: String,\n      default: '',\n      required: false\n    },\n    // 是否支持多选\n    multiple: {\n      type: Boolean,\n      default: false\n    },\n    loadTriggleChange: {\n      type: Boolean,\n      default: false,\n      required: false\n    },\n    pid: {\n      type: String,\n      default: '',\n      required: false\n    },\n    pcode: {\n      type: String,\n      default: '',\n      required: false\n    },\n    back: {\n      type: String,\n      default: '',\n      required: false\n    }\n  },\n  data: function data() {\n    return {\n      treeValue: \"\",\n      treeData: [],\n      url: \"/sys/category/loadTreeData\",\n      view: '/sys/category/loadDictItem/',\n      tableName: \"\",\n      text: \"\",\n      code: \"\"\n    };\n  },\n  watch: {\n    value: function value() {\n      this.loadItemByCode();\n    },\n    pcode: function pcode() {\n      this.loadRoot();\n    }\n  },\n  created: function created() {\n    var _this = this;\n\n    this.validateProp().then(function () {\n      _this.loadRoot();\n\n      _this.loadItemByCode();\n    });\n  },\n  methods: {\n    /**加载一级节点 */\n    loadRoot: function loadRoot() {\n      var _this2 = this;\n\n      var param = {\n        pid: this.pid,\n        pcode: !this.pcode ? '0' : this.pcode,\n        condition: this.condition\n      };\n      getAction(this.url, param).then(function (res) {\n        if (res.success && res.result) {\n          var _iteratorNormalCompletion = true;\n          var _didIteratorError = false;\n          var _iteratorError = undefined;\n\n          try {\n            for (var _iterator = res.result[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n              var i = _step.value;\n              i.value = i.key;\n\n              if (i.leaf == false) {\n                i.isLeaf = false;\n              } else if (i.leaf == true) {\n                i.isLeaf = true;\n              }\n            }\n          } catch (err) {\n            _didIteratorError = true;\n            _iteratorError = err;\n          } finally {\n            try {\n              if (!_iteratorNormalCompletion && _iterator.return != null) {\n                _iterator.return();\n              }\n            } finally {\n              if (_didIteratorError) {\n                throw _iteratorError;\n              }\n            }\n          }\n\n          _this2.treeData = _toConsumableArray(res.result);\n        } else {\n          console.log(\"树一级节点查询结果-else\", res);\n        }\n      });\n    },\n\n    /** 数据回显*/\n    loadItemByCode: function loadItemByCode() {\n      var _this3 = this;\n\n      if (!this.value || this.value == \"0\") {\n        this.treeValue = [];\n      } else {\n        getAction(this.view, {\n          ids: this.value\n        }).then(function (res) {\n          if (res.success) {\n            var values = _this3.value.split(',');\n\n            _this3.treeValue = res.result.map(function (item, index) {\n              return {\n                key: values[index],\n                value: values[index],\n                label: item\n              };\n            });\n\n            _this3.onLoadTriggleChange(res.result[0]);\n          }\n        });\n      }\n    },\n    onLoadTriggleChange: function onLoadTriggleChange(text) {\n      //只有单选才会触发\n      if (!this.multiple && this.loadTriggleChange) {\n        this.backValue(this.value, text);\n      }\n    },\n    backValue: function backValue(value, label) {\n      var obj = {};\n\n      if (this.back) {\n        obj[this.back] = label;\n      }\n\n      this.$emit('change', value, obj);\n    },\n    asyncLoadTreeData: function asyncLoadTreeData(treeNode) {\n      var _this4 = this;\n\n      return new Promise(function (resolve) {\n        if (treeNode.$vnode.children) {\n          resolve();\n          return;\n        }\n\n        var pid = treeNode.$vnode.key;\n        var param = {\n          pid: pid,\n          condition: _this4.condition\n        };\n        getAction(_this4.url, param).then(function (res) {\n          if (res.success) {\n            var _iteratorNormalCompletion2 = true;\n            var _didIteratorError2 = false;\n            var _iteratorError2 = undefined;\n\n            try {\n              for (var _iterator2 = res.result[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n                var i = _step2.value;\n                i.value = i.key;\n\n                if (i.leaf == false) {\n                  i.isLeaf = false;\n                } else if (i.leaf == true) {\n                  i.isLeaf = true;\n                }\n              }\n            } catch (err) {\n              _didIteratorError2 = true;\n              _iteratorError2 = err;\n            } finally {\n              try {\n                if (!_iteratorNormalCompletion2 && _iterator2.return != null) {\n                  _iterator2.return();\n                }\n              } finally {\n                if (_didIteratorError2) {\n                  throw _iteratorError2;\n                }\n              }\n            }\n\n            _this4.addChildren(pid, res.result, _this4.treeData);\n\n            _this4.treeData = _toConsumableArray(_this4.treeData);\n          }\n\n          resolve();\n        });\n      });\n    },\n    addChildren: function addChildren(pid, children, treeArray) {\n      if (treeArray && treeArray.length > 0) {\n        var _iteratorNormalCompletion3 = true;\n        var _didIteratorError3 = false;\n        var _iteratorError3 = undefined;\n\n        try {\n          for (var _iterator3 = treeArray[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {\n            var item = _step3.value;\n\n            if (item.key == pid) {\n              if (!children || children.length == 0) {\n                item.isLeaf = true;\n              } else {\n                item.children = children;\n              }\n\n              break;\n            } else {\n              this.addChildren(pid, children, item.children);\n            }\n          }\n        } catch (err) {\n          _didIteratorError3 = true;\n          _iteratorError3 = err;\n        } finally {\n          try {\n            if (!_iteratorNormalCompletion3 && _iterator3.return != null) {\n              _iterator3.return();\n            }\n          } finally {\n            if (_didIteratorError3) {\n              throw _iteratorError3;\n            }\n          }\n        }\n      }\n    },\n    onChange: function onChange(value) {\n      if (!value) {\n        this.$emit('change', '');\n        this.treeValue = '';\n      } else if (Array.isArray(value)) {\n        var labels = [];\n        var values = value.map(function (item) {\n          labels.push(item.label);\n          return item.value;\n        });\n        this.backValue(values.join(','), labels.join(','));\n        this.treeValue = value;\n      } else {\n        this.backValue(value.value, value.label);\n        this.treeValue = value;\n      }\n    },\n    getCurrTreeData: function getCurrTreeData() {\n      return this.treeData;\n    },\n    validateProp: function validateProp() {\n      var _this5 = this;\n\n      var mycondition = this.condition;\n      return new Promise(function (resolve, reject) {\n        if (!mycondition) {\n          resolve();\n        } else {\n          try {\n            var test = JSON.parse(mycondition);\n\n            if (_typeof(test) == 'object' && test) {\n              resolve();\n            } else {\n              _this5.$message.error(\"组件JTreeSelect-condition传值有误，需要一个json字符串!\");\n\n              reject();\n            }\n          } catch (e) {\n            _this5.$message.error(\"组件JTreeSelect-condition传值有误，需要一个json字符串!\");\n\n            reject();\n          }\n        }\n      });\n    }\n  },\n  //2.2新增 在组件内定义 指定父组件调用时候的传值属性和事件类型 这个牛逼\n  model: {\n    prop: 'value',\n    event: 'change'\n  }\n};",{"version":3,"sources":["JCategorySelect.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n  <a-tree-select\n    allowClear\n    labelInValue\n    style=\"width: 100%\"\n    :disabled=\"disabled\"\n    :dropdownStyle=\"{ maxHeight: '400px', overflow: 'auto' }\"\n    :placeholder=\"placeholder\"\n    :loadData=\"asyncLoadTreeData\"\n    :value=\"treeValue\"\n    :treeData=\"treeData\"\n    :multiple=\"multiple\"\n    @change=\"onChange\">\n  </a-tree-select>\n</template>\n<script>\n\n  import { getAction } from '@/api/manage'\n\n  export default {\n    name: 'JCategorySelect',\n    props: {\n      value:{\n        type: String,\n        required: false\n      },\n      placeholder:{\n        type: String,\n        default: '请选择',\n        required: false\n      },\n      disabled:{\n        type:Boolean,\n        default:false,\n        required:false\n      },\n      condition:{\n        type:String,\n        default:'',\n        required:false\n      },\n      // 是否支持多选\n      multiple: {\n        type: Boolean,\n        default: false,\n      },\n      loadTriggleChange:{\n        type: Boolean,\n        default: false,\n        required:false\n      },\n      pid:{\n        type:String,\n        default:'',\n        required:false\n      },\n      pcode:{\n        type:String,\n        default:'',\n        required:false\n      },\n      back:{\n        type:String,\n        default:'',\n        required:false\n      }\n    },\n    data () {\n      return {\n        treeValue:\"\",\n        treeData:[],\n        url:\"/sys/category/loadTreeData\",\n        view:'/sys/category/loadDictItem/',\n        tableName:\"\",\n        text:\"\",\n        code:\"\",\n\n      }\n    },\n    watch: {\n      value () {\n        this.loadItemByCode()\n      },\n      pcode(){\n        this.loadRoot();\n      }\n    },\n    created(){\n      this.validateProp().then(()=>{\n        this.loadRoot()\n        this.loadItemByCode()\n      })\n    },\n    methods: {\n      /**加载一级节点 */\n      loadRoot(){\n        let param = {\n          pid:this.pid,\n          pcode:!this.pcode?'0':this.pcode,\n          condition:this.condition\n        }\n        getAction(this.url,param).then(res=>{\n          if(res.success && res.result){\n            for(let i of res.result){\n              i.value = i.key\n              if(i.leaf==false){\n                i.isLeaf=false\n              }else if(i.leaf==true){\n                i.isLeaf=true\n              }\n            }\n            this.treeData = [...res.result]\n          }else{\n            console.log(\"树一级节点查询结果-else\",res)\n          }\n        })\n      },\n\n      /** 数据回显*/\n      loadItemByCode(){\n        if(!this.value || this.value==\"0\"){\n          this.treeValue = []\n        }else{\n          getAction(this.view,{ids:this.value}).then(res=>{\n            if(res.success){\n              let values = this.value.split(',')\n              this.treeValue = res.result.map((item, index) => ({\n                key: values[index],\n                value: values[index],\n                label: item\n              }))\n              this.onLoadTriggleChange(res.result[0]);\n            }\n          })\n        }\n      },\n      onLoadTriggleChange(text){\n        //只有单选才会触发\n        if(!this.multiple && this.loadTriggleChange){\n          this.backValue(this.value,text)\n        }\n      },\n      backValue(value,label){\n        let obj = {}\n        if(this.back){\n          obj[this.back] = label\n        }\n        this.$emit('change', value, obj)\n      },\n      asyncLoadTreeData (treeNode) {\n        return new Promise((resolve) => {\n          if (treeNode.$vnode.children) {\n            resolve()\n            return\n          }\n          let pid = treeNode.$vnode.key\n          let param = {\n            pid:pid,\n            condition:this.condition\n          }\n          getAction(this.url,param).then(res=>{\n            if(res.success){\n              for(let i of res.result){\n                i.value = i.key\n                if(i.leaf==false){\n                  i.isLeaf=false\n                }else if(i.leaf==true){\n                  i.isLeaf=true\n                }\n              }\n              this.addChildren(pid,res.result,this.treeData)\n              this.treeData = [...this.treeData]\n            }\n            resolve()\n          })\n        })\n      },\n      addChildren(pid,children,treeArray){\n        if(treeArray && treeArray.length>0){\n          for(let item of treeArray){\n            if(item.key == pid){\n              if(!children || children.length==0){\n                item.isLeaf=true\n              }else{\n                item.children = children\n              }\n              break\n            }else{\n              this.addChildren(pid,children,item.children)\n            }\n          }\n        }\n      },\n\n      onChange(value){\n        if(!value){\n          this.$emit('change', '');\n          this.treeValue = ''\n        } else if (Array.isArray(value)) {\n          let labels = []\n          let values = value.map(item => {\n            labels.push(item.label)\n            return item.value\n          })\n          this.backValue(values.join(','), labels.join(','))\n          this.treeValue = value\n        } else {\n          this.backValue(value.value,value.label)\n          this.treeValue = value\n        }\n      },\n      getCurrTreeData(){\n        return this.treeData\n      },\n      validateProp(){\n        let mycondition = this.condition\n        return new Promise((resolve,reject)=>{\n          if(!mycondition){\n            resolve();\n          }else{\n            try {\n              let test=JSON.parse(mycondition);\n              if(typeof test == 'object' && test){\n                resolve()\n              }else{\n                this.$message.error(\"组件JTreeSelect-condition传值有误，需要一个json字符串!\")\n                reject()\n              }\n            } catch(e) {\n              this.$message.error(\"组件JTreeSelect-condition传值有误，需要一个json字符串!\")\n              reject()\n            }\n          }\n        })\n      }\n    },\n    //2.2新增 在组件内定义 指定父组件调用时候的传值属性和事件类型 这个牛逼\n    model: {\n      prop: 'value',\n      event: 'change'\n    }\n  }\n</script>\n"],"sourceRoot":"src/components/jeecg"}]}