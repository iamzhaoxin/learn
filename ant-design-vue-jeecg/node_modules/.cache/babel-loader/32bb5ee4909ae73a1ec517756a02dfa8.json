{"remainingRequest":"D:\\activiti\\project01\\jeecg-boot-activiti-master\\ant-design-vue-jeecg\\node_modules\\babel-loader\\lib\\index.js!D:\\activiti\\project01\\jeecg-boot-activiti-master\\ant-design-vue-jeecg\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!D:\\activiti\\project01\\jeecg-boot-activiti-master\\ant-design-vue-jeecg\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\activiti\\project01\\jeecg-boot-activiti-master\\ant-design-vue-jeecg\\src\\components\\dict\\JMultiSelectTag.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\activiti\\project01\\jeecg-boot-activiti-master\\ant-design-vue-jeecg\\src\\components\\dict\\JMultiSelectTag.vue","mtime":1611914356000},{"path":"D:\\activiti\\project01\\jeecg-boot-activiti-master\\ant-design-vue-jeecg\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1621061384845},{"path":"D:\\activiti\\project01\\jeecg-boot-activiti-master\\ant-design-vue-jeecg\\node_modules\\babel-loader\\lib\\index.js","mtime":1621061377995},{"path":"D:\\activiti\\project01\\jeecg-boot-activiti-master\\ant-design-vue-jeecg\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1621061384845},{"path":"D:\\activiti\\project01\\jeecg-boot-activiti-master\\ant-design-vue-jeecg\\node_modules\\vue-loader\\lib\\index.js","mtime":1621061372054}],"contextDependencies":[],"result":["function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }\n\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance\"); }\n\nfunction _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === \"[object Arguments]\") return Array.from(iter); }\n\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport { ajaxGetDictItems, getDictItemsFromCache } from '@/api/api';\nexport default {\n  name: 'JMultiSelectTag',\n  props: {\n    dictCode: String,\n    placeholder: String,\n    disabled: Boolean,\n    value: String,\n    type: String,\n    options: Array\n  },\n  data: function data() {\n    return {\n      dictOptions: [],\n      tagType: \"\",\n      arrayValue: !this.value ? [] : this.value.split(\",\")\n    };\n  },\n  created: function created() {\n    if (!this.type || this.type === \"list_multi\") {\n      this.tagType = \"select\";\n    } else {\n      this.tagType = this.type;\n    } //获取字典数据\n    //this.initDictData();\n\n  },\n  watch: {\n    options: function options(val) {\n      this.setCurrentDictOptions(val);\n    },\n    dictCode: {\n      immediate: true,\n      handler: function handler() {\n        this.initDictData();\n      }\n    },\n    value: function value(val) {\n      if (!val) {\n        this.arrayValue = [];\n      } else {\n        this.arrayValue = this.value.split(\",\");\n      }\n    }\n  },\n  methods: {\n    initDictData: function initDictData() {\n      var _this = this;\n\n      if (this.options && this.options.length > 0) {\n        this.dictOptions = _toConsumableArray(this.options);\n      } else {\n        //优先从缓存中读取字典配置\n        if (getDictItemsFromCache(this.dictCode)) {\n          this.dictOptions = getDictItemsFromCache(this.dictCode);\n          return;\n        } //根据字典Code, 初始化字典数组\n\n\n        ajaxGetDictItems(this.dictCode, null).then(function (res) {\n          if (res.success) {\n            _this.dictOptions = res.result;\n          }\n        });\n      }\n    },\n    onChange: function onChange(selectedValue) {\n      this.$emit('change', selectedValue.join(\",\"));\n    },\n    setCurrentDictOptions: function setCurrentDictOptions(dictOptions) {\n      this.dictOptions = dictOptions;\n    },\n    getCurrentDictOptions: function getCurrentDictOptions() {\n      return this.dictOptions;\n    },\n    // update--begin--autor:lvdandan-----date:20201120------for：LOWCOD-1086 下拉多选框,搜索时只字典code进行搜索不能通过字典text搜索\n    filterOption: function filterOption(input, option) {\n      return option.componentOptions.children[0].children[0].text.toLowerCase().indexOf(input.toLowerCase()) >= 0;\n    } // update--end--autor:lvdandan-----date:20201120------for：LOWCOD-1086 下拉多选框,搜索时只字典code进行搜索不能通过字典text搜索\n\n  },\n  model: {\n    prop: 'value',\n    event: 'change'\n  }\n};",{"version":3,"sources":["JMultiSelectTag.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA6BA,SAAA,gBAAA,EAAA,qBAAA,QAAA,WAAA;AACA,eAAA;AACA,EAAA,IAAA,EAAA,iBADA;AAEA,EAAA,KAAA,EAAA;AACA,IAAA,QAAA,EAAA,MADA;AAEA,IAAA,WAAA,EAAA,MAFA;AAGA,IAAA,QAAA,EAAA,OAHA;AAIA,IAAA,KAAA,EAAA,MAJA;AAKA,IAAA,IAAA,EAAA,MALA;AAMA,IAAA,OAAA,EAAA;AANA,GAFA;AAUA,EAAA,IAVA,kBAUA;AACA,WAAA;AACA,MAAA,WAAA,EAAA,EADA;AAEA,MAAA,OAAA,EAAA,EAFA;AAGA,MAAA,UAAA,EAAA,CAAA,KAAA,KAAA,GAAA,EAAA,GAAA,KAAA,KAAA,CAAA,KAAA,CAAA,GAAA;AAHA,KAAA;AAKA,GAhBA;AAiBA,EAAA,OAjBA,qBAiBA;AACA,QAAA,CAAA,KAAA,IAAA,IAAA,KAAA,IAAA,KAAA,YAAA,EAAA;AACA,WAAA,OAAA,GAAA,QAAA;AACA,KAFA,MAEA;AACA,WAAA,OAAA,GAAA,KAAA,IAAA;AACA,KALA,CAMA;AACA;;AACA,GAzBA;AA0BA,EAAA,KAAA,EAAA;AACA,IAAA,OAAA,EAAA,iBAAA,GAAA,EAAA;AACA,WAAA,qBAAA,CAAA,GAAA;AACA,KAHA;AAIA,IAAA,QAAA,EAAA;AACA,MAAA,SAAA,EAAA,IADA;AAEA,MAAA,OAFA,qBAEA;AACA,aAAA,YAAA;AACA;AAJA,KAJA;AAUA,IAAA,KAVA,iBAUA,GAVA,EAUA;AACA,UAAA,CAAA,GAAA,EAAA;AACA,aAAA,UAAA,GAAA,EAAA;AACA,OAFA,MAEA;AACA,aAAA,UAAA,GAAA,KAAA,KAAA,CAAA,KAAA,CAAA,GAAA,CAAA;AACA;AACA;AAhBA,GA1BA;AA4CA,EAAA,OAAA,EAAA;AACA,IAAA,YADA,0BACA;AAAA;;AACA,UAAA,KAAA,OAAA,IAAA,KAAA,OAAA,CAAA,MAAA,GAAA,CAAA,EAAA;AACA,aAAA,WAAA,sBAAA,KAAA,OAAA;AACA,OAFA,MAEA;AACA;AACA,YAAA,qBAAA,CAAA,KAAA,QAAA,CAAA,EAAA;AACA,eAAA,WAAA,GAAA,qBAAA,CAAA,KAAA,QAAA,CAAA;AACA;AACA,SALA,CAMA;;;AACA,QAAA,gBAAA,CAAA,KAAA,QAAA,EAAA,IAAA,CAAA,CAAA,IAAA,CAAA,UAAA,GAAA,EAAA;AACA,cAAA,GAAA,CAAA,OAAA,EAAA;AACA,YAAA,KAAA,CAAA,WAAA,GAAA,GAAA,CAAA,MAAA;AACA;AACA,SAJA;AAKA;AAEA,KAlBA;AAmBA,IAAA,QAnBA,oBAmBA,aAnBA,EAmBA;AACA,WAAA,KAAA,CAAA,QAAA,EAAA,aAAA,CAAA,IAAA,CAAA,GAAA,CAAA;AACA,KArBA;AAsBA,IAAA,qBAtBA,iCAsBA,WAtBA,EAsBA;AACA,WAAA,WAAA,GAAA,WAAA;AACA,KAxBA;AAyBA,IAAA,qBAzBA,mCAyBA;AACA,aAAA,KAAA,WAAA;AACA,KA3BA;AA4BA;AACA,IAAA,YA7BA,wBA6BA,KA7BA,EA6BA,MA7BA,EA6BA;AACA,aAAA,MAAA,CAAA,gBAAA,CAAA,QAAA,CAAA,CAAA,EAAA,QAAA,CAAA,CAAA,EAAA,IAAA,CAAA,WAAA,GAAA,OAAA,CAAA,KAAA,CAAA,WAAA,EAAA,KAAA,CAAA;AACA,KA/BA,CAgCA;;AAhCA,GA5CA;AA8EA,EAAA,KAAA,EAAA;AACA,IAAA,IAAA,EAAA,OADA;AAEA,IAAA,KAAA,EAAA;AAFA;AA9EA,CAAA","sourcesContent":["<template>\n  <a-checkbox-group v-if=\"tagType=='checkbox'\" @change=\"onChange\" :value=\"arrayValue\" :disabled=\"disabled\">\n    <a-checkbox v-for=\"(item, key) in dictOptions\" :key=\"key\" :value=\"item.value\">{{ item.text || item.label }}</a-checkbox>\n  </a-checkbox-group>\n\n  <a-select\n    v-else-if=\"tagType=='select'\"\n    :value=\"arrayValue\"\n    @change=\"onChange\"\n    :disabled=\"disabled\"\n    mode=\"multiple\"\n    :placeholder=\"placeholder\"\n    :getPopupContainer=\"(node) => node.parentNode\"\n    optionFilterProp=\"children\"\n    :filterOption=\"filterOption\"\n    allowClear>\n    <a-select-option\n      v-for=\"(item,index) in dictOptions\"\n      :key=\"index\"\n      :value=\"item.value\">\n      <span style=\"display: inline-block;width: 100%\" :title=\" item.text || item.label \">\n        {{ item.text || item.label }}\n      </span>\n    </a-select-option>\n  </a-select>\n\n</template>\n\n<script>\n  import {ajaxGetDictItems,getDictItemsFromCache} from '@/api/api'\n  export default {\n    name: 'JMultiSelectTag',\n    props: {\n      dictCode: String,\n      placeholder: String,\n      disabled: Boolean,\n      value: String,\n      type: String,\n      options:Array\n    },\n    data() {\n      return {\n        dictOptions: [],\n        tagType:\"\",\n        arrayValue:!this.value?[]:this.value.split(\",\")\n      }\n    },\n    created() {\n      if(!this.type || this.type===\"list_multi\"){\n        this.tagType = \"select\"\n      }else{\n        this.tagType = this.type\n      }\n      //获取字典数据\n      //this.initDictData();\n    },\n    watch:{\n      options: function(val){\n        this.setCurrentDictOptions(val);\n      },\n      dictCode:{\n        immediate:true,\n        handler() {\n          this.initDictData()\n        },\n      },\n      value (val) {\n        if(!val){\n          this.arrayValue = []\n        }else{\n          this.arrayValue = this.value.split(\",\")\n        }\n      }\n    },\n    methods: {\n      initDictData() {\n        if(this.options && this.options.length>0){\n          this.dictOptions = [...this.options]\n        }else{\n          //优先从缓存中读取字典配置\n          if(getDictItemsFromCache(this.dictCode)){\n            this.dictOptions = getDictItemsFromCache(this.dictCode);\n            return\n          }\n          //根据字典Code, 初始化字典数组\n          ajaxGetDictItems(this.dictCode, null).then((res) => {\n            if (res.success) {\n              this.dictOptions = res.result;\n            }\n          })\n        }\n\n      },\n      onChange (selectedValue) {\n        this.$emit('change', selectedValue.join(\",\"));\n      },\n      setCurrentDictOptions(dictOptions){\n        this.dictOptions = dictOptions\n      },\n      getCurrentDictOptions(){\n        return this.dictOptions\n      },\n      // update--begin--autor:lvdandan-----date:20201120------for：LOWCOD-1086 下拉多选框,搜索时只字典code进行搜索不能通过字典text搜索\n      filterOption(input, option) {\n        return option.componentOptions.children[0].children[0].text.toLowerCase().indexOf(input.toLowerCase()) >= 0\n      }\n      // update--end--autor:lvdandan-----date:20201120------for：LOWCOD-1086 下拉多选框,搜索时只字典code进行搜索不能通过字典text搜索\n    },\n    model: {\n      prop: 'value',\n      event: 'change'\n    }\n  }\n</script>\n"],"sourceRoot":"src/components/dict"}]}