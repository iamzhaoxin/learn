{"remainingRequest":"D:\\activiti\\project01\\jeecg-boot-activiti-master\\ant-design-vue-jeecg\\node_modules\\babel-loader\\lib\\index.js!D:\\activiti\\project01\\jeecg-boot-activiti-master\\ant-design-vue-jeecg\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!D:\\activiti\\project01\\jeecg-boot-activiti-master\\ant-design-vue-jeecg\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\activiti\\project01\\jeecg-boot-activiti-master\\ant-design-vue-jeecg\\src\\components\\jeecg\\modal\\JPopupOnlReport.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\activiti\\project01\\jeecg-boot-activiti-master\\ant-design-vue-jeecg\\src\\components\\jeecg\\modal\\JPopupOnlReport.vue","mtime":1611914356000},{"path":"D:\\activiti\\project01\\jeecg-boot-activiti-master\\ant-design-vue-jeecg\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1621061384845},{"path":"D:\\activiti\\project01\\jeecg-boot-activiti-master\\ant-design-vue-jeecg\\node_modules\\babel-loader\\lib\\index.js","mtime":1621061377995},{"path":"D:\\activiti\\project01\\jeecg-boot-activiti-master\\ant-design-vue-jeecg\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1621061384845},{"path":"D:\\activiti\\project01\\jeecg-boot-activiti-master\\ant-design-vue-jeecg\\node_modules\\vue-loader\\lib\\index.js","mtime":1621061372054}],"contextDependencies":[],"result":["function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }\n\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance\"); }\n\nfunction _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === \"[object Arguments]\") return Array.from(iter); }\n\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport { getAction } from '@/api/manage';\nimport { filterObj } from '@/utils/util';\nimport { filterMultiDictText } from '@/components/dict/JDictSelectUtil';\nimport { httpGroupRequest } from '@/api/GroupRequest.js';\nvar MODAL_WIDTH = 1200;\nexport default {\n  name: 'JPopupOnlReport',\n  props: ['multi', 'code', 'groupId', 'param'],\n  components: {},\n  data: function data() {\n    return {\n      visible: false,\n      title: \"\",\n      confirmLoading: false,\n      queryInfo: [],\n      toggleSearchStatus: false,\n      queryParam: {},\n      dictOptions: {},\n      url: {\n        getColumns: '/online/cgreport/api/getRpColumns/',\n        getData: '/online/cgreport/api/getData/',\n        getQueryInfo: '/online/cgreport/api/getQueryInfo/'\n      },\n      table: {\n        loading: true,\n        // 表头\n        columns: [],\n        //数据集\n        dataSource: [],\n        // 选择器\n        selectedRowKeys: [],\n        selectionRows: [],\n        // 分页参数\n        pagination: {\n          current: 1,\n          pageSize: 10,\n          pageSizeOptions: ['10', '20', '30'],\n          showTotal: function showTotal(total, range) {\n            return range[0] + '-' + range[1] + ' 共' + total + '条';\n          },\n          showQuickJumper: true,\n          showSizeChanger: true,\n          total: 0\n        }\n      },\n      cgRpConfigId: \"\",\n      modalWidth: MODAL_WIDTH,\n      tableScroll: {\n        x: MODAL_WIDTH - 100\n      },\n      dynamicParam: {}\n    };\n  },\n  mounted: function mounted() {//this.loadColumnsInfo()\n  },\n  watch: {\n    code: function code() {\n      this.loadColumnsInfo();\n    },\n    param: {\n      deep: true,\n      handler: function handler() {\n        this.dynamicParamHandler();\n        this.loadData();\n      }\n    }\n  },\n  computed: {\n    showSearchFlag: function showSearchFlag() {\n      return this.queryInfo && this.queryInfo.length > 0;\n    }\n  },\n  methods: {\n    loadColumnsInfo: function loadColumnsInfo() {\n      var _this = this;\n\n      var url = \"\".concat(this.url.getColumns).concat(this.code); //缓存key\n\n      var groupIdKey;\n\n      if (this.groupId) {\n        groupIdKey = this.groupId + url;\n      }\n\n      httpGroupRequest(function () {\n        return getAction(url);\n      }, groupIdKey).then(function (res) {\n        if (res.success) {\n          _this.initDictOptionData(res.result.dictOptions);\n\n          _this.cgRpConfigId = res.result.cgRpConfigId;\n          _this.title = res.result.cgRpConfigName;\n          var currColumns = res.result.columns;\n\n          for (var a = 0; a < currColumns.length; a++) {\n            if (currColumns[a].customRender) {\n              (function () {\n                var dictCode = currColumns[a].customRender;\n\n                currColumns[a].customRender = function (text) {\n                  return filterMultiDictText(_this.dictOptions[dictCode], text + \"\");\n                };\n              })();\n            }\n          }\n\n          _this.table.columns = _toConsumableArray(currColumns);\n\n          _this.initQueryInfo();\n        }\n      });\n    },\n    initQueryInfo: function initQueryInfo() {\n      var _this2 = this;\n\n      var url = \"\".concat(this.url.getQueryInfo).concat(this.cgRpConfigId); //缓存key\n\n      var groupIdKey;\n\n      if (this.groupId) {\n        groupIdKey = this.groupId + url;\n      }\n\n      httpGroupRequest(function () {\n        return getAction(url);\n      }, groupIdKey).then(function (res) {\n        // console.log(\"获取查询条件\", res);\n        if (res.success) {\n          _this2.dynamicParamHandler(res.result);\n\n          _this2.queryInfo = res.result; //查询条件加载后再请求数据\n\n          _this2.loadData(1);\n        } else {\n          _this2.$message.warning(res.message);\n        }\n      });\n    },\n    //处理动态参数\n    dynamicParamHandler: function dynamicParamHandler(arr) {\n      var _this3 = this;\n\n      if (arr && arr.length > 0) {\n        //第一次加载查询条件前 初始化queryParam为空对象\n        var queryTemp = {};\n        var _iteratorNormalCompletion = true;\n        var _didIteratorError = false;\n        var _iteratorError = undefined;\n\n        try {\n          for (var _iterator = arr[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n            var item = _step.value;\n\n            if (item.mode === 'single') {\n              queryTemp[item.field] = '';\n            }\n          }\n        } catch (err) {\n          _didIteratorError = true;\n          _iteratorError = err;\n        } finally {\n          try {\n            if (!_iteratorNormalCompletion && _iterator.return != null) {\n              _iterator.return();\n            }\n          } finally {\n            if (_didIteratorError) {\n              throw _iteratorError;\n            }\n          }\n        }\n\n        this.queryParam = _objectSpread({}, queryTemp);\n      }\n\n      var dynamicTemp = {};\n\n      if (this.param) {\n        Object.keys(this.param).map(function (key) {\n          var str = _this3.param[key];\n\n          if (key in _this3.queryParam) {\n            if (str && str.startsWith(\"'\") && str.endsWith(\"'\")) {\n              str = str.substring(1, str.length - 1);\n            } //如果查询条件包含参数 设置值\n\n\n            _this3.queryParam[key] = str;\n          }\n\n          dynamicTemp[key] = _this3.param[key];\n        });\n      }\n\n      this.dynamicParam = _objectSpread({}, dynamicTemp);\n    },\n    loadData: function loadData(arg) {\n      var _this4 = this;\n\n      if (arg == 1) {\n        this.table.pagination.current = 1;\n      }\n\n      var params = this.getQueryParams(); //查询条件\n\n      this.table.loading = true;\n      var url = \"\".concat(this.url.getData).concat(this.cgRpConfigId); //缓存key\n\n      var groupIdKey;\n\n      if (this.groupId) {\n        groupIdKey = this.groupId + url + JSON.stringify(params);\n      }\n\n      httpGroupRequest(function () {\n        return getAction(url, params);\n      }, groupIdKey).then(function (res) {\n        _this4.table.loading = false; // console.log(\"daa\",res)\n\n        var data = res.result;\n\n        if (data) {\n          _this4.table.pagination.total = Number(data.total);\n          _this4.table.dataSource = data.records;\n        } else {\n          _this4.table.pagination.total = 0;\n          _this4.table.dataSource = [];\n        }\n      });\n    },\n    getQueryParams: function getQueryParams() {\n      var _this5 = this;\n\n      var paramTarget = {};\n\n      if (this.dynamicParam) {\n        //处理自定义参数\n        Object.keys(this.dynamicParam).map(function (key) {\n          paramTarget['self_' + key] = _this5.dynamicParam[key];\n        });\n      }\n\n      var param = Object.assign(paramTarget, this.queryParam, this.sorter);\n      param.pageNo = this.table.pagination.current;\n      param.pageSize = this.table.pagination.pageSize;\n      return filterObj(param);\n    },\n    handleChangeInTableSelect: function handleChangeInTableSelect(selectedRowKeys, selectionRows) {\n      var _this6 = this;\n\n      //update-begin-author:taoyan date:2020902 for:【issue】开源online的几个问题 LOWCOD-844\n      if (!selectedRowKeys || selectedRowKeys.length == 0) {\n        this.table.selectionRows = [];\n      } else if (selectedRowKeys.length == selectionRows.length) {\n        this.table.selectionRows = selectionRows;\n      } else {\n        //当两者长度不一的时候 需要判断\n        var keys = this.table.selectedRowKeys;\n        var rows = this.table.selectionRows; //这个循环 添加新的记录\n\n        for (var i = 0; i < selectionRows.length; i++) {\n          var combineKey = this.combineRowKey(selectionRows[i]);\n\n          if (keys.indexOf(combineKey) < 0) {\n            //如果 原来的key 不包含当前记录 push\n            rows.push(selectionRows[i]);\n          }\n        } //这个循环 移除取消选中的数据\n\n\n        this.table.selectionRows = rows.filter(function (item) {\n          var combineKey = _this6.combineRowKey(item);\n\n          return selectedRowKeys.indexOf(combineKey) >= 0;\n        });\n      } //update-end-author:taoyan date:2020902 for:【issue】开源online的几个问题 LOWCOD-844\n\n\n      this.table.selectedRowKeys = selectedRowKeys;\n    },\n    handleChangeInTable: function handleChangeInTable(pagination, filters, sorter) {\n      //分页、排序、筛选变化时触发\n      if (Object.keys(sorter).length > 0) {\n        this.sorter.column = sorter.field;\n        this.sorter.order = 'ascend' == sorter.order ? 'asc' : 'desc';\n      }\n\n      this.table.pagination = pagination;\n      this.loadData();\n    },\n    handleCancel: function handleCancel() {\n      this.close();\n    },\n    handleSubmit: function handleSubmit() {\n      if (!this.multi) {\n        if (this.table.selectionRows && this.table.selectionRows.length > 1) {\n          this.$message.warning(\"请选择一条记录\");\n          return false;\n        }\n      }\n\n      if (!this.table.selectionRows || this.table.selectionRows.length == 0) {\n        this.$message.warning(\"请选择一条记录\");\n        return false;\n      }\n\n      this.$emit('ok', this.table.selectionRows);\n      this.close();\n    },\n    close: function close() {\n      this.$emit('close');\n      this.visible = false;\n      this.onClearSelected();\n    },\n    show: function show() {\n      this.visible = true;\n      this.loadColumnsInfo();\n    },\n    handleToggleSearch: function handleToggleSearch() {\n      this.toggleSearchStatus = !this.toggleSearchStatus;\n    },\n    searchByquery: function searchByquery() {\n      this.loadData(1);\n    },\n    onlyReload: function onlyReload() {\n      this.loadData();\n    },\n    searchReset: function searchReset() {\n      var _this7 = this;\n\n      Object.keys(this.queryParam).forEach(function (key) {\n        _this7.queryParam[key] = \"\";\n      });\n      this.loadData(1);\n    },\n    onClearSelected: function onClearSelected() {\n      this.table.selectedRowKeys = [];\n      this.table.selectionRows = [];\n    },\n    combineRowKey: function combineRowKey(record) {\n      var res = '';\n      Object.keys(record).forEach(function (key) {\n        res += record[key];\n      });\n\n      if (res.length > 50) {\n        res = res.substring(0, 50);\n      }\n\n      return res;\n    },\n    clickThenCheck: function clickThenCheck(record) {\n      var _this8 = this;\n\n      return {\n        on: {\n          click: function click() {\n            var rowKey = _this8.combineRowKey(record);\n\n            if (!_this8.table.selectedRowKeys || _this8.table.selectedRowKeys.length == 0) {\n              var arr1 = [],\n                  arr2 = [];\n              arr1.push(record);\n              arr2.push(rowKey);\n              _this8.table.selectedRowKeys = arr2;\n              _this8.table.selectionRows = arr1;\n            } else {\n              if (_this8.table.selectedRowKeys.indexOf(rowKey) < 0) {\n                _this8.table.selectedRowKeys.push(rowKey);\n\n                _this8.table.selectionRows.push(record);\n              } else {\n                var rowKey_index = _this8.table.selectedRowKeys.indexOf(rowKey);\n\n                _this8.table.selectedRowKeys.splice(rowKey_index, 1);\n\n                _this8.table.selectionRows.splice(rowKey_index, 1);\n              }\n            }\n          }\n        }\n      };\n    },\n    //防止字典中有垃圾数据\n    initDictOptionData: function initDictOptionData(dictOptions) {\n      var obj = {};\n      Object.keys(dictOptions).map(function (k) {\n        obj[k] = dictOptions[k].filter(function (item) {\n          return item != null;\n        });\n      });\n      this.dictOptions = obj;\n    }\n  }\n};",{"version":3,"sources":["JPopupOnlReport.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n  <j-modal\n    :title=\"title\"\n    :width=\"modalWidth\"\n    :visible=\"visible\"\n    :confirmLoading=\"confirmLoading\"\n    switchFullscreen\n    wrapClassName=\"j-popup-modal\"\n    @ok=\"handleSubmit\"\n    @cancel=\"handleCancel\"\n    cancelText=\"关闭\">\n\n    <div class=\"table-page-search-wrapper\">\n      <a-form layout=\"inline\" @keyup.enter.native=\"searchByquery\">\n        <a-row :gutter=\"24\" v-if=\"showSearchFlag\">\n          <template v-for=\"(item,index) in queryInfo\">\n            <template v-if=\" item.hidden==='1' \">\n              <a-col :md=\"8\" :sm=\"24\" :key=\" 'query'+index \" v-show=\"toggleSearchStatus\">\n                <online-query-form-item :queryParam=\"queryParam\" :item=\"item\" :dictOptions=\"dictOptions\"></online-query-form-item>\n              </a-col>\n            </template>\n            <template v-else>\n              <a-col :md=\"8\" :sm=\"24\" :key=\" 'query'+index \">\n                <online-query-form-item :queryParam=\"queryParam\" :item=\"item\" :dictOptions=\"dictOptions\"></online-query-form-item>\n              </a-col>\n            </template>\n          </template>\n\n          <a-col :md=\"8\" :sm=\"8\">\n            <span style=\"float: left;overflow: hidden;\" class=\"table-page-search-submitButtons\">\n              <a-button type=\"primary\" @click=\"searchByquery\" icon=\"search\">查询</a-button>\n              <a-button type=\"primary\" @click=\"searchReset\" icon=\"reload\" style=\"margin-left: 8px\">重置</a-button>\n              <a @click=\"handleToggleSearch\" style=\"margin-left: 8px\">\n                {{ toggleSearchStatus ? '收起' : '展开' }}\n                <a-icon :type=\"toggleSearchStatus ? 'up' : 'down'\"/>\n              </a>\n            </span>\n          </a-col>\n\n        </a-row>\n      </a-form>\n    </div>\n\n    <div class=\"ant-alert ant-alert-info\" style=\"margin-bottom: 16px;\">\n      <i class=\"anticon anticon-info-circle ant-alert-icon\"></i>\n      已选择&nbsp;<a style=\"font-weight: 600\">{{ table.selectedRowKeys.length }}</a>项&nbsp;&nbsp;\n      <a style=\"margin-left: 24px\" @click=\"onClearSelected\">清空</a>\n\n      <a v-if=\"!showSearchFlag\" style=\"margin-left: 24px\" @click=\"onlyReload\">刷新</a>\n    </div>\n\n    <a-table\n      ref=\"table\"\n      size=\"middle\"\n      bordered\n      :rowKey=\"combineRowKey\"\n      :columns=\"table.columns\"\n      :dataSource=\"table.dataSource\"\n      :pagination=\"table.pagination\"\n      :loading=\"table.loading\"\n      :rowSelection=\"{fixed:true,selectedRowKeys: table.selectedRowKeys, onChange: handleChangeInTableSelect}\"\n      @change=\"handleChangeInTable\"\n      style=\"min-height: 300px\"\n      :scroll=\"tableScroll\"\n      :customRow=\"clickThenCheck\">\n    </a-table>\n\n\n  </j-modal>\n</template>\n\n<script>\n  import { getAction } from '@/api/manage'\n  import {filterObj} from '@/utils/util'\n  import { filterMultiDictText } from '@/components/dict/JDictSelectUtil'\n  import { httpGroupRequest } from '@/api/GroupRequest.js'\n\n  const MODAL_WIDTH = 1200;\n  export default {\n    name: 'JPopupOnlReport',\n    props: ['multi', 'code', 'groupId', 'param'],\n    components:{\n    },\n    data(){\n      return {\n        visible:false,\n        title:\"\",\n        confirmLoading:false,\n        queryInfo:[],\n        toggleSearchStatus:false,\n        queryParam:{\n\n        },\n        dictOptions: {},\n        url: {\n          getColumns: '/online/cgreport/api/getRpColumns/',\n          getData: '/online/cgreport/api/getData/',\n          getQueryInfo: '/online/cgreport/api/getQueryInfo/'\n        },\n        table: {\n          loading: true,\n          // 表头\n          columns: [],\n          //数据集\n          dataSource: [],\n          // 选择器\n          selectedRowKeys: [],\n          selectionRows: [],\n          // 分页参数\n          pagination: {\n            current: 1,\n            pageSize: 10,\n            pageSizeOptions: ['10', '20', '30'],\n            showTotal: (total, range) => {\n              return range[0] + '-' + range[1] + ' 共' + total + '条'\n            },\n            showQuickJumper: true,\n            showSizeChanger: true,\n            total: 0\n          }\n        },\n        cgRpConfigId:\"\",\n        modalWidth:MODAL_WIDTH,\n        tableScroll:{x:MODAL_WIDTH-100},\n        dynamicParam:{}\n\n      }\n    },\n    mounted() {\n      //this.loadColumnsInfo()\n    },\n    watch: {\n      code() {\n        this.loadColumnsInfo()\n      },\n      param:{\n        deep:true,\n        handler(){\n          this.dynamicParamHandler()\n          this.loadData();\n        },\n      }\n    },\n    computed:{\n      showSearchFlag(){\n        return this.queryInfo && this.queryInfo.length>0\n      }\n    },\n    methods:{\n      loadColumnsInfo(){\n        let url = `${this.url.getColumns}${this.code}`\n        //缓存key\n        let groupIdKey\n        if (this.groupId) {\n          groupIdKey = this.groupId + url\n        }\n        httpGroupRequest(() => getAction(url), groupIdKey).then(res => {\n          if(res.success){\n            this.initDictOptionData(res.result.dictOptions);\n            this.cgRpConfigId = res.result.cgRpConfigId\n            this.title = res.result.cgRpConfigName\n            let currColumns = res.result.columns\n            for(let a=0;a<currColumns.length;a++){\n              if(currColumns[a].customRender){\n                let dictCode = currColumns[a].customRender;\n                currColumns[a].customRender=(text)=>{\n                  return filterMultiDictText(this.dictOptions[dictCode], text+\"\");\n                }\n              }\n            }\n            this.table.columns = [...currColumns]\n            this.initQueryInfo()\n          }\n        })\n      },\n      initQueryInfo() {\n        let url = `${this.url.getQueryInfo}${this.cgRpConfigId}`\n        //缓存key\n        let groupIdKey\n        if (this.groupId) {\n          groupIdKey = this.groupId + url\n        }\n        httpGroupRequest(() => getAction(url), groupIdKey).then((res) => {\n          // console.log(\"获取查询条件\", res);\n          if (res.success) {\n            this.dynamicParamHandler(res.result)\n            this.queryInfo = res.result\n            //查询条件加载后再请求数据\n            this.loadData(1)\n          } else {\n            this.$message.warning(res.message)\n          }\n        })\n      },\n      //处理动态参数\n      dynamicParamHandler(arr){\n        if(arr && arr.length>0){\n          //第一次加载查询条件前 初始化queryParam为空对象\n          let queryTemp = {}\n          for(let item of arr){\n            if(item.mode==='single'){\n              queryTemp[item.field] = ''\n            }\n          }\n          this.queryParam = {...queryTemp}\n        }\n        let dynamicTemp = {}\n        if(this.param){\n          Object.keys(this.param).map(key=>{\n            let str = this.param[key]\n            if(key in this.queryParam){\n              if(str && str.startsWith(\"'\") && str.endsWith(\"'\")){\n                str = str.substring(1,str.length-1)\n              }\n              //如果查询条件包含参数 设置值\n              this.queryParam[key]=str\n            }\n            dynamicTemp[key] = this.param[key]\n          })\n        }\n        this.dynamicParam = {...dynamicTemp}\n      },\n      loadData(arg) {\n        if (arg == 1) {\n          this.table.pagination.current = 1\n        }\n        let params = this.getQueryParams();//查询条件\n        this.table.loading = true\n        let url = `${this.url.getData}${this.cgRpConfigId}`\n        //缓存key\n        let groupIdKey\n        if (this.groupId) {\n          groupIdKey = this.groupId + url + JSON.stringify(params)\n        }\n        httpGroupRequest(() => getAction(url, params), groupIdKey).then(res => {\n          this.table.loading = false\n          // console.log(\"daa\",res)\n          let data = res.result\n          if (data) {\n            this.table.pagination.total = Number(data.total)\n            this.table.dataSource = data.records\n          } else {\n            this.table.pagination.total = 0\n            this.table.dataSource = []\n          }\n        })\n      },\n      getQueryParams() {\n        let paramTarget = {}\n        if(this.dynamicParam){\n          //处理自定义参数\n         Object.keys(this.dynamicParam).map(key=>{\n           paramTarget['self_'+key] = this.dynamicParam[key]\n         })\n        }\n        let param = Object.assign(paramTarget, this.queryParam, this.sorter);\n        param.pageNo = this.table.pagination.current;\n        param.pageSize = this.table.pagination.pageSize;\n        return filterObj(param);\n      },\n      handleChangeInTableSelect(selectedRowKeys, selectionRows) {\n        //update-begin-author:taoyan date:2020902 for:【issue】开源online的几个问题 LOWCOD-844\n        if(!selectedRowKeys || selectedRowKeys.length==0){\n          this.table.selectionRows = []\n        }else if(selectedRowKeys.length == selectionRows.length){\n          this.table.selectionRows = selectionRows\n        }else{\n          //当两者长度不一的时候 需要判断\n          let keys = this.table.selectedRowKeys\n          let rows = this.table.selectionRows;\n          //这个循环 添加新的记录\n          for(let i=0;i<selectionRows.length;i++){\n            let combineKey = this.combineRowKey(selectionRows[i])\n            if(keys.indexOf(combineKey)<0){\n              //如果 原来的key 不包含当前记录 push\n              rows.push(selectionRows[i])\n            }\n          }\n          //这个循环 移除取消选中的数据\n          this.table.selectionRows = rows.filter(item=>{\n            let combineKey = this.combineRowKey(item)\n            return selectedRowKeys.indexOf(combineKey)>=0\n          })\n        }\n        //update-end-author:taoyan date:2020902 for:【issue】开源online的几个问题 LOWCOD-844\n        this.table.selectedRowKeys = selectedRowKeys\n      },\n      handleChangeInTable(pagination, filters, sorter) {\n        //分页、排序、筛选变化时触发\n        if (Object.keys(sorter).length > 0) {\n          this.sorter.column = sorter.field\n          this.sorter.order = 'ascend' == sorter.order ? 'asc' : 'desc'\n        }\n        this.table.pagination = pagination\n        this.loadData()\n      },\n      handleCancel() {\n        this.close()\n      },\n      handleSubmit() {\n        if(!this.multi){\n          if(this.table.selectionRows && this.table.selectionRows.length>1){\n            this.$message.warning(\"请选择一条记录\")\n            return false\n          }\n        }\n        if(!this.table.selectionRows || this.table.selectionRows.length==0){\n          this.$message.warning(\"请选择一条记录\")\n          return false\n        }\n        this.$emit('ok', this.table.selectionRows);\n        this.close()\n      },\n      close() {\n        this.$emit('close');\n        this.visible = false;\n        this.onClearSelected()\n      },\n      show(){\n        this.visible = true\n        this.loadColumnsInfo()\n      },\n      handleToggleSearch(){\n        this.toggleSearchStatus = !this.toggleSearchStatus;\n      },\n      searchByquery(){\n        this.loadData(1);\n      },\n      onlyReload(){\n        this.loadData();\n      },\n      searchReset(){\n        Object.keys(this.queryParam).forEach(key=>{\n          this.queryParam[key]=\"\"\n        })\n        this.loadData(1);\n      },\n      onClearSelected(){\n        this.table.selectedRowKeys = []\n        this.table.selectionRows = []\n      },\n      combineRowKey(record){\n        let res = ''\n         Object.keys(record).forEach(key=>{\n           res+=record[key]\n         })\n        if(res.length>50){\n          res = res.substring(0,50)\n        }\n        return res\n      },\n\n      clickThenCheck(record){\n        return {\n          on: {\n            click: () => {\n              let rowKey = this.combineRowKey(record)\n              if(!this.table.selectedRowKeys || this.table.selectedRowKeys.length==0){\n                let arr1=[],arr2=[]\n                arr1.push(record)\n                arr2.push(rowKey)\n                this.table.selectedRowKeys=arr2\n                this.table.selectionRows=arr1\n              }else{\n                if(this.table.selectedRowKeys.indexOf(rowKey)<0){\n                  this.table.selectedRowKeys.push(rowKey)\n                  this.table.selectionRows.push(record)\n                }else{\n                  let rowKey_index = this.table.selectedRowKeys.indexOf(rowKey)\n                  this.table.selectedRowKeys.splice(rowKey_index,1);\n                  this.table.selectionRows.splice(rowKey_index,1);\n                }\n              }\n            }\n          }\n        }\n      },\n      //防止字典中有垃圾数据\n      initDictOptionData(dictOptions){\n        let obj = { }\n        Object.keys(dictOptions).map(k=>{\n          obj[k] = dictOptions[k].filter(item=>{\n            return item!=null\n          });\n        });\n        this.dictOptions  = obj\n      }\n\n    }\n  }\n</script>\n\n<style scoped>\n\n</style>"],"sourceRoot":"src/components/jeecg/modal"}]}