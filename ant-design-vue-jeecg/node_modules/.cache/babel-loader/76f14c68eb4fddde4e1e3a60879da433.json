{"remainingRequest":"D:\\activiti\\project01\\jeecg-boot-activiti-master\\ant-design-vue-jeecg\\node_modules\\babel-loader\\lib\\index.js!D:\\activiti\\project01\\jeecg-boot-activiti-master\\ant-design-vue-jeecg\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!D:\\activiti\\project01\\jeecg-boot-activiti-master\\ant-design-vue-jeecg\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\activiti\\project01\\jeecg-boot-activiti-master\\ant-design-vue-jeecg\\src\\views\\jeecg\\JVxeDemo\\layout-demo\\ErpTemplate.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\activiti\\project01\\jeecg-boot-activiti-master\\ant-design-vue-jeecg\\src\\views\\jeecg\\JVxeDemo\\layout-demo\\ErpTemplate.vue","mtime":1611914356000},{"path":"D:\\activiti\\project01\\jeecg-boot-activiti-master\\ant-design-vue-jeecg\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1621061384845},{"path":"D:\\activiti\\project01\\jeecg-boot-activiti-master\\ant-design-vue-jeecg\\node_modules\\babel-loader\\lib\\index.js","mtime":1621061377995},{"path":"D:\\activiti\\project01\\jeecg-boot-activiti-master\\ant-design-vue-jeecg\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1621061384845},{"path":"D:\\activiti\\project01\\jeecg-boot-activiti-master\\ant-design-vue-jeecg\\node_modules\\vue-loader\\lib\\index.js","mtime":1621061372054}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport { JVXETypes } from '@/components/jeecg/JVxeTable';\nimport { getAction } from '@api/manage';\nexport default {\n  name: 'ErpTemplate',\n  data: function data() {\n    var _this = this;\n\n    var h = this.$createElement;\n    return {\n      toolbarConfig: {\n        // prefix 前缀；suffix 后缀\n        slot: ['prefix', 'suffix'],\n        // add 新增按钮；remove 删除按钮；clearSelection 清空选择按钮\n        btn: ['add', 'remove', 'clearSelection']\n      },\n      expandConfig: {\n        // 是否只能同时展开一行\n        accordion: true\n      },\n      // 子表 tabs\n      subTabs: {\n        show: false,\n        // 是否展开\n        expand: true,\n        // 是否自动展开\n        autoExpand: true\n      },\n      table1: {\n        // 是否正在加载\n        loading: false,\n        // 分页器参数\n        pagination: {\n          // 当前页码\n          current: 1,\n          // 每页的条数\n          pageSize: 200,\n          // 可切换的条数\n          pageSizeOptions: ['10', '20', '30', '100', '200'],\n          // 数据总数（目前并不知道真实的总数，所以先填写0，在后台查出来后再赋值）\n          total: 0,\n          showTotal: function showTotal(total, range) {\n            // 此处为 jsx 语法\n            var text = h(\"span\", [range[0] + '-' + range[1] + ' 共 ' + total + ' 条']); // 判断子表是否显示，如果显示就渲染展开收起按钮\n\n            if (_this.subTabs.show) {\n              var expand = h(\"span\", [h(\"a-button\", {\n                \"attrs\": {\n                  \"type\": \"link\"\n                },\n                \"on\": {\n                  \"click\": _this.handleToggleTabs\n                }\n              }, [h(\"a-icon\", {\n                \"attrs\": {\n                  \"type\": _this.subTabs.expand ? 'up' : 'down'\n                }\n              }), h(\"span\", [_this.subTabs.expand ? '收起' : '展开'])]), h(\"a-checkbox\", {\n                \"model\": {\n                  value: _this.subTabs.autoExpand,\n                  callback: function callback($$v) {\n                    _this.$set(_this.subTabs, \"autoExpand\", $$v);\n                  }\n                }\n              }, [\"\\u81EA\\u52A8\\u5C55\\u5F00\"])]); // 返回多个dom用数组\n\n              return [expand, text];\n            } else {\n              // 直接返回单个dom\n              return text;\n            }\n          }\n        },\n        // 选择的行\n        selectedRows: [],\n        // 数据源，控制表格的数据\n        dataSource: [],\n        // 列配置，控制表格显示的列\n        columns: [{\n          key: 'num',\n          title: '序号',\n          width: '80px'\n        }, {\n          // 字段key，跟后台数据的字段名匹配\n          key: 'ship_name',\n          // 列的标题\n          title: '船名',\n          // 列的宽度\n          width: '180px',\n          // 如果加上了该属性，就代表当前单元格是可编辑的，type就是表单的类型，input就是简单的输入框\n          type: JVXETypes.input\n        }, {\n          key: 'call',\n          title: '呼叫',\n          width: '990px',\n          type: JVXETypes.input\n        }, {\n          key: 'len',\n          title: '长',\n          width: '80px',\n          type: JVXETypes.inputNumber\n        }, {\n          key: 'ton',\n          title: '吨',\n          width: '120px',\n          type: JVXETypes.inputNumber\n        }, {\n          key: 'payer',\n          title: '付款方',\n          width: '120px',\n          type: JVXETypes.input\n        }, {\n          key: 'count',\n          title: '数',\n          width: '40px'\n        }, {\n          key: 'company',\n          title: '公司',\n          // 最小宽度，与宽度不同的是，这个不是固定的宽度，如果表格有多余的空间，会平均分配给设置了 minWidth 的列\n          // 如果要做占满表格的列可以这么写\n          minWidth: '180px',\n          type: JVXETypes.input\n        }, {\n          key: 'trend',\n          title: '动向',\n          width: '120px',\n          type: JVXETypes.input\n        }]\n      },\n      // 子级表的配置信息 （配置和主表的完全一致，就不写冗余的注释了）\n      table2: {\n        currentRowId: null,\n        loading: false,\n        pagination: {\n          current: 1,\n          pageSize: 10,\n          pageSizeOptions: ['5', '10', '20', '30'],\n          total: 0\n        },\n        selectedRows: [],\n        dataSource: [],\n        columns: [{\n          key: 'dd_num',\n          title: '调度序号',\n          width: '120px'\n        }, {\n          key: 'tug',\n          title: '拖轮',\n          width: '180px',\n          type: JVXETypes.input\n        }, {\n          key: 'work_start_time',\n          title: '作业开始时间',\n          width: '180px',\n          type: JVXETypes.input\n        }, {\n          key: 'work_stop_time',\n          title: '作业结束时间',\n          width: '180px',\n          type: JVXETypes.input\n        }, {\n          key: 'type',\n          title: '船舶分类',\n          width: '120px',\n          type: JVXETypes.input\n        }, {\n          key: 'port_area',\n          title: '所属港区',\n          width: '120px',\n          type: JVXETypes.input\n        }]\n      },\n      currentSubRow: null,\n      // 查询url地址\n      url: {\n        getData: '/mock/vxe/getData'\n      }\n    };\n  },\n  computed: {\n    tableHeight: function tableHeight() {\n      var _this$subTabs = this.subTabs,\n          show = _this$subTabs.show,\n          expand = _this$subTabs.expand;\n      return show ? expand ? 350 : 482 : 482;\n    }\n  },\n  created: function created() {\n    this.loadTable1Data();\n  },\n  methods: {\n    // 加载table1【主表】的数据\n    loadTable1Data: function loadTable1Data() {\n      var _this2 = this;\n\n      // 封装查询条件\n      var formData = {\n        pageNo: this.table1.pagination.current,\n        pageSize: this.table1.pagination.pageSize\n      }; // 调用查询数据接口\n\n      this.table1.loading = true;\n      getAction(this.url.getData, formData).then(function (res) {\n        if (res.success) {\n          // 后台查询回来的 total，数据总数量\n          _this2.table1.pagination.total = res.result.total; // 将查询的数据赋值给 dataSource\n\n          _this2.table1.dataSource = res.result.records; // 重置选择\n\n          _this2.table1.selectedRows = [];\n        } else {\n          _this2.$error({\n            title: '主表查询失败',\n            content: res.message\n          });\n        }\n      }).finally(function () {\n        // 这里是无论成功或失败都会执行的方法，在这里关闭loading\n        _this2.table1.loading = false;\n      });\n    },\n    // 查询子表数据\n    loadSubData: function loadSubData(row) {\n      if (row) {\n        // 这里一定要做限制，限制不能重复查询，否者会出现死循环\n        if (this.table2.currentRowId === row.id) {\n          return true;\n        }\n\n        this.table2.currentRowId = row.id;\n        this.loadTable2Data();\n        return true;\n      } else {\n        return false;\n      }\n    },\n    // 查询子表数据\n    loadTable2Data: function loadTable2Data() {\n      var _this3 = this;\n\n      var table2 = this.table2;\n      var formData = {\n        parentId: table2.currentRowId,\n        pageNo: this.table2.pagination.current,\n        pageSize: this.table2.pagination.pageSize\n      };\n      table2.loading = true;\n      getAction(this.url.getData, formData).then(function (res) {\n        if (res.success) {\n          // 将查询的数据赋值给 dataSource\n          table2.selectedRows = [];\n          table2.dataSource = res.result.records;\n          table2.pagination.total = res.result.total;\n        } else {\n          _this3.$error({\n            title: '子表查询失败',\n            content: res.message\n          });\n        }\n      }).finally(function () {\n        // 这里是无论成功或失败都会执行的方法，在这里关闭loading\n        table2.loading = false;\n      });\n    },\n    // table1【主表】当选择的行变化时触发的事件\n    handleTable1SelectRowChange: function handleTable1SelectRowChange(event) {\n      this.table1.selectedRows = event.selectedRows;\n      this.subTabs.show = true;\n\n      if (this.subTabs.autoExpand) {\n        this.subTabs.expand = true;\n      }\n\n      this.loadSubData(event.selectedRows[0]);\n    },\n    // table2【子表】当选择的行变化时触发的事件\n    handleTable2SelectRowChange: function handleTable2SelectRowChange(event) {\n      this.table2.selectedRows = event.selectedRows;\n    },\n    handleTable1PageChange: function handleTable1PageChange(event) {\n      // 重新赋值\n      this.table1.pagination.current = event.current;\n      this.table1.pagination.pageSize = event.pageSize; // 查询数据\n\n      this.loadTable1Data();\n    },\n    // 当table2【子表】分页参数变化时触发的事件\n    handleTable2PageChange: function handleTable2PageChange(event) {\n      // 重新赋值\n      this.table2.pagination.current = event.current;\n      this.table2.pagination.pageSize = event.pageSize; // 查询数据\n\n      this.loadTable2Data();\n    },\n    // 展开或收起子表tabs\n    handleToggleTabs: function handleToggleTabs() {\n      this.subTabs.expand = !this.subTabs.expand;\n    }\n  }\n};",{"version":3,"sources":["ErpTemplate.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n\n  <a-card :bordered=\"false\">\n    <j-vxe-table\n      toolbar\n      :toolbarConfig=\"toolbarConfig\"\n\n      row-number\n      row-selection\n      row-selection-type=\"radio\"\n      highlight-current-row\n      click-select-row\n      :height=\"tableHeight\"\n      :loading=\"table1.loading\"\n      :columns=\"table1.columns\"\n      :dataSource=\"table1.dataSource\"\n      :pagination=\"table1.pagination\"\n      :expand-config=\"expandConfig\"\n      style=\"margin-bottom: 8px\"\n\n      @pageChange=\"handleTable1PageChange\"\n      @selectRowChange=\"handleTable1SelectRowChange\"\n    ></j-vxe-table>\n\n    <a-tabs v-show=\"subTabs.show\" :class=\"{'sub-tabs':true, 'un-expand': !subTabs.expand}\">\n      <a-tab-pane tab=\"子表1\" key=\"1\">\n        <j-vxe-table\n          toolbar\n          row-number\n          row-selection\n          height=\"auto\"\n          :maxHeight=\"350\"\n          :loading=\"table2.loading\"\n          :columns=\"table2.columns\"\n          :dataSource=\"table2.dataSource\"\n          :pagination=\"table2.pagination\"\n          @pageChange=\"handleTable2PageChange\"\n          @selectRowChange=\"handleTable2SelectRowChange\"\n        />\n      </a-tab-pane>\n      <a-tab-pane tab=\"子表2\" key=\"2\">\n        <h1>这里是子表2</h1>\n        <h1>这里是子表2</h1>\n        <h1>这里是子表2</h1>\n        <h1>这里是子表2</h1>\n        <h1>这里是子表2</h1>\n        <h1>这里是子表2</h1>\n      </a-tab-pane>\n    </a-tabs>\n\n  </a-card>\n</template>\n\n<script>\n  import { JVXETypes } from '@/components/jeecg/JVxeTable'\n  import { getAction } from '@api/manage'\n\n  export default {\n    name: 'ErpTemplate',\n    data() {\n      return {\n        toolbarConfig: {\n          // prefix 前缀；suffix 后缀\n          slot: ['prefix', 'suffix'],\n          // add 新增按钮；remove 删除按钮；clearSelection 清空选择按钮\n          btn: ['add', 'remove', 'clearSelection']\n        },\n\n        expandConfig: {\n          // 是否只能同时展开一行\n          accordion: true\n        },\n\n        // 子表 tabs\n        subTabs: {\n          show: false,\n          // 是否展开\n          expand: true,\n          // 是否自动展开\n          autoExpand: true,\n        },\n\n        table1: {\n          // 是否正在加载\n          loading: false,\n          // 分页器参数\n          pagination: {\n            // 当前页码\n            current: 1,\n            // 每页的条数\n            pageSize: 200,\n            // 可切换的条数\n            pageSizeOptions: ['10', '20', '30', '100', '200'],\n            // 数据总数（目前并不知道真实的总数，所以先填写0，在后台查出来后再赋值）\n            total: 0,\n            showTotal: (total, range) => {\n              // 此处为 jsx 语法\n              let text = <span>{range[0] + '-' + range[1] + ' 共 ' + total + ' 条'}</span>\n              // 判断子表是否显示，如果显示就渲染展开收起按钮\n              if (this.subTabs.show) {\n                let expand = (<span>\n                <a-button type=\"link\" onClick={this.handleToggleTabs}>\n                  <a-icon type={this.subTabs.expand ? 'up' : 'down'}/>\n                  <span>{this.subTabs.expand ? '收起' : '展开'}</span>\n                </a-button>\n                <a-checkbox vModel={this.subTabs.autoExpand}>自动展开</a-checkbox>\n              </span>)\n                // 返回多个dom用数组\n                return [expand, text]\n              } else {\n                // 直接返回单个dom\n                return text\n              }\n            },\n          },\n          // 选择的行\n          selectedRows: [],\n          // 数据源，控制表格的数据\n          dataSource: [],\n          // 列配置，控制表格显示的列\n          columns: [\n            {key: 'num', title: '序号', width: '80px'},\n            {\n              // 字段key，跟后台数据的字段名匹配\n              key: 'ship_name',\n              // 列的标题\n              title: '船名',\n              // 列的宽度\n              width: '180px',\n              // 如果加上了该属性，就代表当前单元格是可编辑的，type就是表单的类型，input就是简单的输入框\n              type: JVXETypes.input\n            },\n            {key: 'call', title: '呼叫', width: '990px', type: JVXETypes.input},\n            {key: 'len', title: '长', width: '80px', type: JVXETypes.inputNumber},\n            {key: 'ton', title: '吨', width: '120px', type: JVXETypes.inputNumber},\n            {key: 'payer', title: '付款方', width: '120px', type: JVXETypes.input},\n            {key: 'count', title: '数', width: '40px'},\n            {\n              key: 'company',\n              title: '公司',\n              // 最小宽度，与宽度不同的是，这个不是固定的宽度，如果表格有多余的空间，会平均分配给设置了 minWidth 的列\n              // 如果要做占满表格的列可以这么写\n              minWidth: '180px',\n              type: JVXETypes.input\n            },\n            {key: 'trend', title: '动向', width: '120px', type: JVXETypes.input},\n          ],\n        },\n        // 子级表的配置信息 （配置和主表的完全一致，就不写冗余的注释了）\n        table2: {\n          currentRowId: null,\n          loading: false,\n          pagination: {current: 1, pageSize: 10, pageSizeOptions: ['5', '10', '20', '30'], total: 0},\n          selectedRows: [],\n          dataSource: [],\n          columns: [\n            {key: 'dd_num', title: '调度序号', width: '120px'},\n            {key: 'tug', title: '拖轮', width: '180px', type: JVXETypes.input},\n            {key: 'work_start_time', title: '作业开始时间', width: '180px', type: JVXETypes.input},\n            {key: 'work_stop_time', title: '作业结束时间', width: '180px', type: JVXETypes.input},\n            {key: 'type', title: '船舶分类', width: '120px', type: JVXETypes.input},\n            {key: 'port_area', title: '所属港区', width: '120px', type: JVXETypes.input},\n          ],\n        },\n        currentSubRow: null,\n        // 查询url地址\n        url: {\n          getData: '/mock/vxe/getData',\n        },\n      }\n    },\n    computed: {\n      tableHeight() {\n        let {show, expand} = this.subTabs\n        return show ? (expand ? 350 : 482) : 482\n      },\n    },\n    created() {\n      this.loadTable1Data()\n    },\n    methods: {\n\n      // 加载table1【主表】的数据\n      loadTable1Data() {\n        // 封装查询条件\n        let formData = {\n          pageNo: this.table1.pagination.current,\n          pageSize: this.table1.pagination.pageSize\n        }\n        // 调用查询数据接口\n        this.table1.loading = true\n        getAction(this.url.getData, formData).then(res => {\n          if (res.success) {\n            // 后台查询回来的 total，数据总数量\n            this.table1.pagination.total = res.result.total\n            // 将查询的数据赋值给 dataSource\n            this.table1.dataSource = res.result.records\n            // 重置选择\n            this.table1.selectedRows = []\n          } else {\n            this.$error({title: '主表查询失败', content: res.message})\n          }\n        }).finally(() => {\n          // 这里是无论成功或失败都会执行的方法，在这里关闭loading\n          this.table1.loading = false\n        })\n      },\n\n      // 查询子表数据\n      loadSubData(row) {\n        if (row) {\n          // 这里一定要做限制，限制不能重复查询，否者会出现死循环\n          if (this.table2.currentRowId === row.id) {\n            return true\n          }\n          this.table2.currentRowId = row.id\n          this.loadTable2Data()\n          return true\n        } else {\n          return false\n        }\n      },\n      // 查询子表数据\n      loadTable2Data() {\n        let table2 = this.table2\n        let formData = {\n          parentId: table2.currentRowId,\n          pageNo: this.table2.pagination.current,\n          pageSize: this.table2.pagination.pageSize\n        }\n        table2.loading = true\n        getAction(this.url.getData, formData).then(res => {\n          if (res.success) {\n            // 将查询的数据赋值给 dataSource\n            table2.selectedRows = []\n            table2.dataSource = res.result.records\n            table2.pagination.total = res.result.total\n          } else {\n            this.$error({title: '子表查询失败', content: res.message})\n          }\n        }).finally(() => {\n          // 这里是无论成功或失败都会执行的方法，在这里关闭loading\n          table2.loading = false\n        })\n      },\n\n\n      // table1【主表】当选择的行变化时触发的事件\n      handleTable1SelectRowChange(event) {\n        this.table1.selectedRows = event.selectedRows\n        this.subTabs.show = true\n        if (this.subTabs.autoExpand) {\n          this.subTabs.expand = true\n        }\n        this.loadSubData(event.selectedRows[0])\n      },\n      // table2【子表】当选择的行变化时触发的事件\n      handleTable2SelectRowChange(event) {\n        this.table2.selectedRows = event.selectedRows\n      },\n\n      handleTable1PageChange(event) {\n        // 重新赋值\n        this.table1.pagination.current = event.current\n        this.table1.pagination.pageSize = event.pageSize\n        // 查询数据\n        this.loadTable1Data()\n      },\n      // 当table2【子表】分页参数变化时触发的事件\n      handleTable2PageChange(event) {\n        // 重新赋值\n        this.table2.pagination.current = event.current\n        this.table2.pagination.pageSize = event.pageSize\n        // 查询数据\n        this.loadTable2Data()\n      },\n\n      // 展开或收起子表tabs\n      handleToggleTabs() {\n        this.subTabs.expand = !this.subTabs.expand\n      },\n\n    },\n\n  }\n</script>\n\n<style lang=\"less\" scoped>\n  .sub-tabs {\n    &.un-expand {\n      /deep/ .ant-tabs-content {\n        height: 0 !important;\n      }\n\n      /deep/ .ant-tabs-bar {\n        border-color: transparent !important;\n      }\n\n      /deep/ .ant-tabs-ink-bar {\n        background-color: transparent !important;\n      }\n\n      /deep/ .ant-tabs-tab {\n        display: none !important;\n      }\n    }\n  }\n</style>"],"sourceRoot":"src/views/jeecg/JVxeDemo/layout-demo"}]}