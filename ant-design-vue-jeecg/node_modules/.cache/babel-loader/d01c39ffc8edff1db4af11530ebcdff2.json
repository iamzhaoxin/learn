{"remainingRequest":"D:\\activiti\\project01\\jeecg-boot-activiti-master\\ant-design-vue-jeecg\\node_modules\\babel-loader\\lib\\index.js!D:\\activiti\\project01\\jeecg-boot-activiti-master\\ant-design-vue-jeecg\\node_modules\\@vue\\cli-plugin-eslint\\node_modules\\eslint-loader\\index.js??ref--13-0!D:\\activiti\\project01\\jeecg-boot-activiti-master\\ant-design-vue-jeecg\\src\\components\\jeecg\\JVxeTable\\utils\\vxeUtils.js","dependencies":[{"path":"D:\\activiti\\project01\\jeecg-boot-activiti-master\\ant-design-vue-jeecg\\src\\components\\jeecg\\JVxeTable\\utils\\vxeUtils.js","mtime":1611914356000},{"path":"D:\\activiti\\project01\\jeecg-boot-activiti-master\\ant-design-vue-jeecg\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1621061384845},{"path":"D:\\activiti\\project01\\jeecg-boot-activiti-master\\ant-design-vue-jeecg\\node_modules\\babel-loader\\lib\\index.js","mtime":1621061377995},{"path":"D:\\activiti\\project01\\jeecg-boot-activiti-master\\ant-design-vue-jeecg\\node_modules\\@vue\\cli-plugin-eslint\\node_modules\\eslint-loader\\index.js","mtime":1617935819779}],"contextDependencies":[],"result":["import _regeneratorRuntime from \"D:\\\\activiti\\\\project01\\\\jeecg-boot-activiti-master\\\\ant-design-vue-jeecg\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\n\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\nimport { getVmParentByName } from '@/utils/util';\nimport { JVXETypes } from '@comp/jeecg/JVxeTable/index';\nexport var VALIDATE_FAILED = Symbol();\n/**\n * 获取指定的 $refs 对象\n * 有时候可能会遇到组件未挂载到页面中的情况，导致无法获取 $refs 中的某个对象\n * 这个方法可以等待挂载完成之后再返回 $refs 的对象，避免报错\n * @author sunjianlei\n **/\n\nexport function getRefPromise(vm, name) {\n  return new Promise(function (resolve) {\n    (function next() {\n      var ref = vm.$refs[name];\n\n      if (ref) {\n        resolve(ref);\n      } else {\n        setTimeout(function () {\n          next();\n        }, 10);\n      }\n    })();\n  });\n}\n/** 获取某一数字输入框列中的最大的值 */\n\nexport function getInputNumberMaxValue(col, rowsValues) {\n  var maxNum = 0;\n  Object.values(rowsValues).forEach(function (rowValue, index) {\n    var val = rowValue[col.key],\n        num;\n\n    try {\n      num = Number.parseFloat(val);\n    } catch (_unused) {\n      num = 0;\n    } // 把首次循环的结果当成最大值\n\n\n    if (index === 0) {\n      maxNum = num;\n    } else {\n      maxNum = num > maxNum ? num : maxNum;\n    }\n  });\n  return maxNum;\n}\n/**\n *\n * 根据 tagName 获取父级节点\n *\n * @param dom 一级dom节点\n * @param tagName 标签名，不区分大小写\n * @return {HTMLElement | NULL}\n */\n\nexport function getParentNodeByTagName(dom) {\n  var tagName = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'body';\n\n  if (tagName === 'body') {\n    return document.body;\n  }\n\n  if (dom.parentNode) {\n    if (dom.parentNode.tagName.toLowerCase() === tagName.trim().toLowerCase()) {\n      return dom.parentNode;\n    } else {\n      return getParentNodeByTagName(dom.parentNode, tagName);\n    }\n  } else {\n    return null;\n  }\n}\n/**\n * vxe columns 封装成高级查询可识别的选项\n * @param columns\n * @param handler 单独处理方法\n */\n\nexport function vxePackageToSuperQuery(columns, handler) {\n  if (Array.isArray(columns)) {\n    // 高级查询所需要的参数\n    var fieldList = []; // 遍历列\n\n    for (var i = 0; i < columns.length; i++) {\n      var col = columns[i];\n\n      if (col.type === JVXETypes.rowCheckbox || col.type === JVXETypes.rowRadio || col.type === JVXETypes.rowExpand || col.type === JVXETypes.rowNumber) {\n        continue;\n      }\n\n      var field = {\n        type: 'string',\n        value: col.key,\n        text: col.title,\n        dictCode: col.dictCode || col.dict\n      };\n\n      if (col.type === JVXETypes.date || col.type === JVXETypes.datetime) {\n        field.type = col.type;\n        field.format = col.format;\n      }\n\n      if (col.type === JVXETypes.inputNumber) {\n        field.type = 'int';\n      }\n\n      if (Array.isArray(col.options)) {\n        field.options = col.options;\n      }\n\n      if (typeof handler === 'function') {\n        Object.assign(field, handler(col, idx));\n      }\n\n      fieldList.push(field);\n    }\n\n    return fieldList;\n  } else {\n    console.error('columns必须是一个数组');\n  }\n\n  return null;\n}\n/**\n * 一次性验证主表单和所有的次表单\n * @param form 主表单 form 对象\n * @param cases 接收一个数组，每项都是一个JVxeTable实例\n * @param autoJumpTab\n * @returns {Promise<any>}\n * @author sunjianlei\n */\n\nexport function validateFormAndTables(_x, _x2, _x3) {\n  return _validateFormAndTables.apply(this, arguments);\n}\n/**\n * 验证并获取一个或多个表格的所有值\n *\n * @param cases 接收一个数组，每项都是一个JVxeTable实例\n * @param autoJumpTab 校验失败后，是否自动跳转tab选项\n */\n\nfunction _validateFormAndTables() {\n  _validateFormAndTables = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(form, cases, autoJumpTab) {\n    var dataMap, values, subData;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            if (form && typeof form.validateFields === 'function') {\n              _context.next = 2;\n              break;\n            }\n\n            throw \"form \\u53C2\\u6570\\u9700\\u8981\\u7684\\u662F\\u4E00\\u4E2Aform\\u5BF9\\u8C61\\uFF0C\\u800C\\u4F20\\u5165\\u7684\\u5374\\u662F\".concat(_typeof(form));\n\n          case 2:\n            dataMap = {};\n            _context.next = 5;\n            return new Promise(function (resolve, reject) {\n              // 验证主表表单\n              form.validateFields(function (err, values) {\n                err ? reject({\n                  error: VALIDATE_FAILED,\n                  originError: err\n                }) : resolve(values);\n              });\n            });\n\n          case 5:\n            values = _context.sent;\n            Object.assign(dataMap, {\n              formValue: values\n            }); // 验证所有子表的表单\n\n            _context.next = 9;\n            return validateTables(cases, autoJumpTab);\n\n          case 9:\n            subData = _context.sent;\n            // 合并最终数据\n            dataMap = Object.assign(dataMap, {\n              tablesValue: subData\n            });\n            return _context.abrupt(\"return\", dataMap);\n\n          case 12:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _validateFormAndTables.apply(this, arguments);\n}\n\nexport function validateTables(cases) {\n  var autoJumpTab = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n\n  if (!Array.isArray(cases)) {\n    throw \"'validateTables'\\u51FD\\u6570\\u7684'cases'\\u53C2\\u6570\\u9700\\u8981\\u7684\\u662F\\u4E00\\u4E2A\\u6570\\u7EC4\\uFF0C\\u800C\\u4F20\\u5165\\u7684\\u5374\\u662F\".concat(_typeof(cases));\n  }\n\n  return new Promise(function (resolve, reject) {\n    var tablesData = [];\n    var index = 0;\n\n    if (!cases || cases.length === 0) {\n      resolve();\n    }\n\n    (function next() {\n      var vm = cases[index];\n      vm.validateTable().then(function (errMap) {\n        // 校验通过\n        if (!errMap) {\n          tablesData[index] = vm.getAll(); // 判断校验是否全部完成，完成返回成功，否则继续进行下一步校验\n\n          if (++index === cases.length) {\n            resolve(tablesData);\n          } else next();\n        } else {\n          // 尝试获取tabKey，如果在ATab组件内即可获取\n          var paneKey;\n          var tabPane = getVmParentByName(vm, 'ATabPane');\n\n          if (tabPane) {\n            paneKey = tabPane.$vnode.key; // 自动跳转到该表格\n\n            if (autoJumpTab) {\n              var tabs = getVmParentByName(tabPane, 'Tabs');\n              tabs && tabs.setActiveKey && tabs.setActiveKey(paneKey);\n            }\n          } // 出现未验证通过的表单，不再进行下一步校验，直接返回失败\n\n\n          reject({\n            error: VALIDATE_FAILED,\n            index: index,\n            paneKey: paneKey,\n            errMap: errMap\n          });\n        }\n      });\n    })();\n  });\n}",{"version":3,"sources":["D:/activiti/project01/jeecg-boot-activiti-master/ant-design-vue-jeecg/src/components/jeecg/JVxeTable/utils/vxeUtils.js"],"names":["getVmParentByName","JVXETypes","VALIDATE_FAILED","Symbol","getRefPromise","vm","name","Promise","resolve","next","ref","$refs","setTimeout","getInputNumberMaxValue","col","rowsValues","maxNum","Object","values","forEach","rowValue","index","val","key","num","Number","parseFloat","getParentNodeByTagName","dom","tagName","document","body","parentNode","toLowerCase","trim","vxePackageToSuperQuery","columns","handler","Array","isArray","fieldList","i","length","type","rowCheckbox","rowRadio","rowExpand","rowNumber","field","value","text","title","dictCode","dict","date","datetime","format","inputNumber","options","assign","idx","push","console","error","validateFormAndTables","form","cases","autoJumpTab","validateFields","dataMap","reject","err","originError","formValue","validateTables","subData","tablesValue","tablesData","validateTable","then","errMap","getAll","paneKey","tabPane","$vnode","tabs","setActiveKey"],"mappings":"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","sourcesContent":["import { getVmParentByName } from '@/utils/util'\nimport { JVXETypes } from '@comp/jeecg/JVxeTable/index'\n\nexport const VALIDATE_FAILED = Symbol()\n\n/**\n * 获取指定的 $refs 对象\n * 有时候可能会遇到组件未挂载到页面中的情况，导致无法获取 $refs 中的某个对象\n * 这个方法可以等待挂载完成之后再返回 $refs 的对象，避免报错\n * @author sunjianlei\n **/\nexport function getRefPromise(vm, name) {\n  return new Promise((resolve) => {\n    (function next() {\n      let ref = vm.$refs[name]\n      if (ref) {\n        resolve(ref)\n      } else {\n        setTimeout(() => {\n          next()\n        }, 10)\n      }\n    })()\n  })\n}\n\n/** 获取某一数字输入框列中的最大的值 */\nexport function getInputNumberMaxValue(col, rowsValues) {\n  let maxNum = 0\n  Object.values(rowsValues).forEach((rowValue, index) => {\n    let val = rowValue[col.key], num\n    try {\n      num = Number.parseFloat(val)\n    } catch {\n      num = 0\n    }\n    // 把首次循环的结果当成最大值\n    if (index === 0) {\n      maxNum = num\n    } else {\n      maxNum = (num > maxNum) ? num : maxNum\n    }\n  })\n  return maxNum\n}\n\n/**\n *\n * 根据 tagName 获取父级节点\n *\n * @param dom 一级dom节点\n * @param tagName 标签名，不区分大小写\n * @return {HTMLElement | NULL}\n */\nexport function getParentNodeByTagName(dom, tagName = 'body') {\n  if (tagName === 'body') {\n    return document.body\n  }\n  if (dom.parentNode) {\n    if (dom.parentNode.tagName.toLowerCase() === tagName.trim().toLowerCase()) {\n      return dom.parentNode\n    } else {\n      return getParentNodeByTagName(dom.parentNode, tagName)\n    }\n  } else {\n    return null\n  }\n}\n\n/**\n * vxe columns 封装成高级查询可识别的选项\n * @param columns\n * @param handler 单独处理方法\n */\nexport function vxePackageToSuperQuery(columns, handler) {\n  if (Array.isArray(columns)) {\n    // 高级查询所需要的参数\n    let fieldList = []\n    // 遍历列\n    for (let i = 0; i < columns.length; i++) {\n      let col = columns[i]\n      if (col.type === JVXETypes.rowCheckbox ||\n        col.type === JVXETypes.rowRadio ||\n        col.type === JVXETypes.rowExpand ||\n        col.type === JVXETypes.rowNumber\n      ) {\n        continue\n      }\n      let field = {\n        type: 'string',\n        value: col.key,\n        text: col.title,\n        dictCode: col.dictCode || col.dict,\n      }\n      if (col.type === JVXETypes.date || col.type === JVXETypes.datetime) {\n        field.type = col.type\n        field.format = col.format\n      }\n      if (col.type === JVXETypes.inputNumber) {\n        field.type = 'int'\n      }\n      if (Array.isArray(col.options)) {\n        field.options = col.options\n      }\n      if (typeof handler === 'function') {\n        Object.assign(field, handler(col, idx))\n      }\n      fieldList.push(field)\n    }\n    return fieldList\n  } else {\n    console.error('columns必须是一个数组')\n  }\n  return null\n}\n\n/**\n * 一次性验证主表单和所有的次表单\n * @param form 主表单 form 对象\n * @param cases 接收一个数组，每项都是一个JVxeTable实例\n * @param autoJumpTab\n * @returns {Promise<any>}\n * @author sunjianlei\n */\nexport async function validateFormAndTables(form, cases, autoJumpTab) {\n  if (!(form && typeof form.validateFields === 'function')) {\n    throw `form 参数需要的是一个form对象，而传入的却是${typeof form}`\n  }\n  let dataMap = {}\n  let values = await new Promise((resolve, reject) => {\n    // 验证主表表单\n    form.validateFields((err, values) => {\n      err ? reject({error: VALIDATE_FAILED, originError: err}) : resolve(values)\n    })\n  })\n  Object.assign(dataMap, {formValue: values})\n  // 验证所有子表的表单\n  let subData = await validateTables(cases, autoJumpTab)\n  // 合并最终数据\n  dataMap = Object.assign(dataMap, {tablesValue: subData})\n  return dataMap\n}\n\n/**\n * 验证并获取一个或多个表格的所有值\n *\n * @param cases 接收一个数组，每项都是一个JVxeTable实例\n * @param autoJumpTab 校验失败后，是否自动跳转tab选项\n */\nexport function validateTables(cases, autoJumpTab = true) {\n  if (!Array.isArray(cases)) {\n    throw `'validateTables'函数的'cases'参数需要的是一个数组，而传入的却是${typeof cases}`\n  }\n  return new Promise((resolve, reject) => {\n    let tablesData = []\n    let index = 0\n    if (!cases || cases.length === 0) {\n      resolve()\n    }\n    (function next() {\n      let vm = cases[index]\n      vm.validateTable().then(errMap => {\n        // 校验通过\n        if (!errMap) {\n          tablesData[index] = vm.getAll()\n          // 判断校验是否全部完成，完成返回成功，否则继续进行下一步校验\n          if (++index === cases.length) {\n            resolve(tablesData)\n          } else (\n            next()\n          )\n        } else {\n          // 尝试获取tabKey，如果在ATab组件内即可获取\n          let paneKey\n          let tabPane = getVmParentByName(vm, 'ATabPane')\n          if (tabPane) {\n            paneKey = tabPane.$vnode.key\n            // 自动跳转到该表格\n            if (autoJumpTab) {\n              let tabs = getVmParentByName(tabPane, 'Tabs')\n              tabs && tabs.setActiveKey && tabs.setActiveKey(paneKey)\n            }\n          }\n          // 出现未验证通过的表单，不再进行下一步校验，直接返回失败\n          reject({error: VALIDATE_FAILED, index, paneKey, errMap})\n        }\n      })\n    })()\n  })\n}"]}]}