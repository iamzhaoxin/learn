{"remainingRequest":"D:\\activiti\\project01\\jeecg-boot-activiti-master\\ant-design-vue-jeecg\\node_modules\\babel-loader\\lib\\index.js!D:\\activiti\\project01\\jeecg-boot-activiti-master\\ant-design-vue-jeecg\\node_modules\\@vue\\cli-plugin-eslint\\node_modules\\eslint-loader\\index.js??ref--13-0!D:\\activiti\\project01\\jeecg-boot-activiti-master\\ant-design-vue-jeecg\\src\\components\\jeecg\\JVxeTable\\install.js","dependencies":[{"path":"D:\\activiti\\project01\\jeecg-boot-activiti-master\\ant-design-vue-jeecg\\src\\components\\jeecg\\JVxeTable\\install.js","mtime":1611914356000},{"path":"D:\\activiti\\project01\\jeecg-boot-activiti-master\\ant-design-vue-jeecg\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1621061384845},{"path":"D:\\activiti\\project01\\jeecg-boot-activiti-master\\ant-design-vue-jeecg\\node_modules\\babel-loader\\lib\\index.js","mtime":1621061377995},{"path":"D:\\activiti\\project01\\jeecg-boot-activiti-master\\ant-design-vue-jeecg\\node_modules\\@vue\\cli-plugin-eslint\\node_modules\\eslint-loader\\index.js","mtime":1617935819779}],"contextDependencies":[],"result":["function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport Vue from 'vue';\nimport { getEventPath } from '@/utils/util';\nimport JVxeTable, { AllCells, JVXETypes } from './index';\nimport './less/j-vxe-table.less'; // 引入 vxe-table\n\nimport 'xe-utils';\nimport VXETable, { Grid } from 'vxe-table';\nimport VXETablePluginAntd from 'vxe-table-plugin-antd';\nimport 'vxe-table/lib/index.css';\nimport 'vxe-table-plugin-antd/dist/style.css';\nimport { getEnhancedMixins, installAllCell, installOneCell } from '@/components/jeecg/JVxeTable/utils/cellUtils'; // VxeGrid所有的方法映射\n\nvar VxeGridMethodsMap = {};\nObject.keys(Grid.methods).forEach(function (key) {\n  // 使用eval可以避免闭包（但是要注意不要写es6的代码）\n  VxeGridMethodsMap[key] = eval(\"(function(){return this.$refs.vxe.\".concat(key, \".apply(this.$refs.vxe,arguments)})\"));\n}); // 将Grid所有的方法都映射（继承）到JVxeTable上\n\nJVxeTable.methods = Object.assign({}, VxeGridMethodsMap, JVxeTable.methods); // VXETable 全局配置\n\nvar VXETableSettings = {\n  // z-index 起始值\n  zIndex: 1000,\n  table: {\n    validConfig: {\n      // 校验提示方式：强制使用tooltip\n      message: 'tooltip'\n    }\n  }\n}; // 执行注册方法\n\nVue.use(VXETable, VXETableSettings);\nVXETable.use(VXETablePluginAntd);\nVue.component(JVxeTable.name, JVxeTable); // 注册自定义组件\n\ninstallAllCell(VXETable); // 添加事件拦截器 event.clearActived\n// 比如点击了某个组件的弹出层面板之后，此时被激活单元格不应该被自动关闭，通过返回 false 可以阻止默认的行为。\n\nVXETable.interceptor.add('event.clearActived', function (params, event, target) {\n  // 获取组件增强\n  var col = params.column.own;\n  var interceptor = getEnhancedMixins(col.$type, 'interceptor'); // 执行增强\n\n  var flag = interceptor['event.clearActived'].apply(this, arguments);\n\n  if (flag === false) {\n    return false;\n  }\n\n  var path = getEventPath(event);\n  var _iteratorNormalCompletion = true;\n  var _didIteratorError = false;\n  var _iteratorError = undefined;\n\n  try {\n    for (var _iterator = path[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n      var p = _step.value;\n      var className = p.className || '';\n      className = typeof className === 'string' ? className : className.toString();\n      /* --- 特殊处理以下组件，点击以下标签时不清空编辑状态 --- */\n      // 点击的标签是JInputPop\n\n      if (className.includes('j-input-pop')) {\n        return false;\n      } // 点击的标签是JPopup的弹出层\n\n\n      if (className.includes('j-popup-modal')) {\n        return false;\n      } // 执行增强\n\n\n      var _flag = interceptor['event.clearActived.className'].apply(this, [className].concat(Array.prototype.slice.call(arguments)));\n\n      if (_flag === false) {\n        return false;\n      }\n    }\n  } catch (err) {\n    _didIteratorError = true;\n    _iteratorError = err;\n  } finally {\n    try {\n      if (!_iteratorNormalCompletion && _iterator.return != null) {\n        _iterator.return();\n      }\n    } finally {\n      if (_didIteratorError) {\n        throw _iteratorError;\n      }\n    }\n  }\n});\n/**\n * 注册map\n * @param type 类型\n * @param cell 输入组件\n * @param span 显示组件，可空，默认为 JVxeNormalCell 组件\n */\n\nexport function mapCell(type, cell, span) {\n  var cells = _defineProperty({}, type, cell);\n\n  if (span) {\n    cells[type + ':span'] = span;\n  }\n\n  return cells;\n}\n/**\n * 注册自定义组件\n *\n * @param type 类型\n * @param cell 输入组件\n * @param span 显示组件，可空，默认为 JVxeNormalCell 组件\n */\n\nexport function installCell(type, cell, span) {\n  var exclude = [JVXETypes.rowNumber, JVXETypes.rowCheckbox, JVXETypes.rowRadio, JVXETypes.rowExpand, JVXETypes.rowDragSort];\n\n  if (exclude.includes(type)) {\n    throw new Error(\"\\u3010installCell\\u3011\\u4E0D\\u80FD\\u4F7F\\u7528\\\"\".concat(type, \"\\\"\\u4F5C\\u4E3A\\u7EC4\\u4EF6\\u7684type\\uFF0C\\u56E0\\u4E3A\\u8FD9\\u662F\\u5173\\u952E\\u5B57\\u3002\"));\n  }\n\n  Object.assign(AllCells, mapCell(type, cell, span));\n  installOneCell(VXETable, type);\n}",{"version":3,"sources":["D:/activiti/project01/jeecg-boot-activiti-master/ant-design-vue-jeecg/src/components/jeecg/JVxeTable/install.js"],"names":["Vue","getEventPath","JVxeTable","AllCells","JVXETypes","VXETable","Grid","VXETablePluginAntd","getEnhancedMixins","installAllCell","installOneCell","VxeGridMethodsMap","Object","keys","methods","forEach","key","eval","assign","VXETableSettings","zIndex","table","validConfig","message","use","component","name","interceptor","add","params","event","target","col","column","own","$type","flag","apply","arguments","path","p","className","toString","includes","mapCell","type","cell","span","cells","installCell","exclude","rowNumber","rowCheckbox","rowRadio","rowExpand","rowDragSort","Error"],"mappings":"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","sourcesContent":["import Vue from 'vue'\nimport { getEventPath } from '@/utils/util'\nimport JVxeTable, { AllCells, JVXETypes } from './index'\nimport './less/j-vxe-table.less'\n// 引入 vxe-table\nimport 'xe-utils'\nimport VXETable, { Grid } from 'vxe-table'\nimport VXETablePluginAntd from 'vxe-table-plugin-antd'\nimport 'vxe-table/lib/index.css'\nimport 'vxe-table-plugin-antd/dist/style.css'\nimport { getEnhancedMixins, installAllCell, installOneCell } from '@/components/jeecg/JVxeTable/utils/cellUtils'\n\n// VxeGrid所有的方法映射\nconst VxeGridMethodsMap = {}\nObject.keys(Grid.methods).forEach(key => {\n  // 使用eval可以避免闭包（但是要注意不要写es6的代码）\n  VxeGridMethodsMap[key] = eval(`(function(){return this.$refs.vxe.${key}.apply(this.$refs.vxe,arguments)})`)\n})\n// 将Grid所有的方法都映射（继承）到JVxeTable上\nJVxeTable.methods = Object.assign({}, VxeGridMethodsMap, JVxeTable.methods)\n\n// VXETable 全局配置\nconst VXETableSettings = {\n  // z-index 起始值\n  zIndex: 1000,\n  table: {\n    validConfig: {\n      // 校验提示方式：强制使用tooltip\n      message: 'tooltip'\n    }\n  }\n}\n\n// 执行注册方法\nVue.use(VXETable, VXETableSettings)\nVXETable.use(VXETablePluginAntd)\nVue.component(JVxeTable.name, JVxeTable)\n\n// 注册自定义组件\ninstallAllCell(VXETable)\n\n// 添加事件拦截器 event.clearActived\n// 比如点击了某个组件的弹出层面板之后，此时被激活单元格不应该被自动关闭，通过返回 false 可以阻止默认的行为。\nVXETable.interceptor.add('event.clearActived', function (params, event, target) {\n  // 获取组件增强\n  let col = params.column.own\n  const interceptor = getEnhancedMixins(col.$type, 'interceptor')\n  // 执行增强\n  let flag = interceptor['event.clearActived'].apply(this, arguments)\n  if (flag === false) {\n    return false\n  }\n\n  let path = getEventPath(event)\n  for (let p of path) {\n    let className = p.className || ''\n    className = typeof className === 'string' ? className : className.toString()\n\n    /* --- 特殊处理以下组件，点击以下标签时不清空编辑状态 --- */\n\n    // 点击的标签是JInputPop\n    if (className.includes('j-input-pop')) {\n      return false\n    }\n    // 点击的标签是JPopup的弹出层\n    if (className.includes('j-popup-modal')) {\n      return false\n    }\n    // 执行增强\n    let flag = interceptor['event.clearActived.className'].apply(this, [className, ...arguments])\n    if (flag === false) {\n      return false\n    }\n  }\n})\n\n/**\n * 注册map\n * @param type 类型\n * @param cell 输入组件\n * @param span 显示组件，可空，默认为 JVxeNormalCell 组件\n */\nexport function mapCell(type, cell, span) {\n  let cells = {[type]: cell}\n  if (span) {\n    cells[type + ':span'] = span\n  }\n  return cells\n}\n\n/**\n * 注册自定义组件\n *\n * @param type 类型\n * @param cell 输入组件\n * @param span 显示组件，可空，默认为 JVxeNormalCell 组件\n */\nexport function installCell(type, cell, span) {\n  let exclude = [JVXETypes.rowNumber, JVXETypes.rowCheckbox, JVXETypes.rowRadio, JVXETypes.rowExpand, JVXETypes.rowDragSort]\n  if (exclude.includes(type)) {\n    throw new Error(`【installCell】不能使用\"${type}\"作为组件的type，因为这是关键字。`)\n  }\n  Object.assign(AllCells, mapCell(type, cell, span))\n  installOneCell(VXETable, type)\n}\n"]}]}