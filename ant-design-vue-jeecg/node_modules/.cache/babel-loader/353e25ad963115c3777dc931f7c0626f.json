{"remainingRequest":"D:\\activiti\\project01\\jeecg-boot-activiti-master\\ant-design-vue-jeecg\\node_modules\\babel-loader\\lib\\index.js!D:\\activiti\\project01\\jeecg-boot-activiti-master\\ant-design-vue-jeecg\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!D:\\activiti\\project01\\jeecg-boot-activiti-master\\ant-design-vue-jeecg\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\activiti\\project01\\jeecg-boot-activiti-master\\ant-design-vue-jeecg\\src\\views\\jeecg\\JVxeDemo\\layout-demo\\Template5.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\activiti\\project01\\jeecg-boot-activiti-master\\ant-design-vue-jeecg\\src\\views\\jeecg\\JVxeDemo\\layout-demo\\Template5.vue","mtime":1611914356000},{"path":"D:\\activiti\\project01\\jeecg-boot-activiti-master\\ant-design-vue-jeecg\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1621061384845},{"path":"D:\\activiti\\project01\\jeecg-boot-activiti-master\\ant-design-vue-jeecg\\node_modules\\babel-loader\\lib\\index.js","mtime":1621061377995},{"path":"D:\\activiti\\project01\\jeecg-boot-activiti-master\\ant-design-vue-jeecg\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1621061384845},{"path":"D:\\activiti\\project01\\jeecg-boot-activiti-master\\ant-design-vue-jeecg\\node_modules\\vue-loader\\lib\\index.js","mtime":1621061372054}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport { getAction } from '@api/manage';\nimport { JVXETypes } from '@/components/jeecg/JVxeTable'; // 【多种布局模板】左侧为树，右侧为行编辑\n\nexport default {\n  name: 'Template5',\n  data: function data() {\n    return {\n      // 是否正在加载\n      loading: false,\n      // 分页器参数\n      pagination: {\n        // 当前页码\n        current: 1,\n        // 每页的条数\n        pageSize: 50,\n        // 可切换的条数\n        pageSizeOptions: ['50'],\n        // 数据总数（目前并不知道真实的总数，所以先填写0，在后台查出来后再赋值）\n        total: 0\n      },\n      // 选择的行\n      selectedRows: [],\n      // 数据源，控制表格的数据\n      dataSource: [],\n      // 列配置，控制表格显示的列\n      columns: [{\n        key: 'num',\n        title: '序号',\n        width: '80px'\n      }, {\n        // 字段key，跟后台数据的字段名匹配\n        key: 'ship_name',\n        // 列的标题\n        title: '船名',\n        // 列的宽度\n        width: '180px',\n        // 如果加上了该属性，就代表当前单元格是可编辑的，type就是表单的类型，input就是简单的输入框\n        type: JVXETypes.input\n      }, {\n        key: 'call',\n        title: '呼叫',\n        width: '80px',\n        type: JVXETypes.input\n      }, {\n        key: 'len',\n        title: '长',\n        width: '80px',\n        type: JVXETypes.input\n      }, {\n        key: 'ton',\n        title: '吨',\n        width: '120px',\n        type: JVXETypes.input\n      }, {\n        key: 'payer',\n        title: '付款方',\n        width: '120px',\n        type: JVXETypes.input\n      }, {\n        key: 'count',\n        title: '数',\n        width: '40px'\n      }, {\n        key: 'company',\n        title: '公司',\n        // 最小宽度，与宽度不同的是，这个不是固定的宽度，如果表格有多余的空间，会平均分配给设置了 minWidth 的列\n        // 如果要做占满表格的列可以这么写\n        minWidth: '180px',\n        type: JVXETypes.input\n      }, {\n        key: 'trend',\n        title: '动向',\n        width: '120px',\n        type: JVXETypes.input\n      }],\n      // 树的数据，这里模拟分页固定数据，实际情况应该是后台查出来的数据\n      treeData: [// 第1级数据\n      {\n        title: '1-10页',\n        key: '1-10',\n        // 第2级数据\n        children: [{\n          title: '第 1 页',\n          key: 1,\n          slots: {\n            icon: 'myIcon'\n          }\n        }, {\n          title: '第 2 页',\n          key: 2,\n          slots: {\n            icon: 'myIcon'\n          }\n        }, {\n          title: '第 3 页',\n          key: 3,\n          slots: {\n            icon: 'myIcon'\n          },\n          // 第3级数据\n          children: [{\n            title: '第 333 页',\n            key: 333,\n            slots: {\n              icon: 'myIcon'\n            }\n          }, {\n            title: '第 444 页',\n            key: 444,\n            slots: {\n              icon: 'myIcon'\n            }\n          }, {\n            title: '第 555 页',\n            key: 555,\n            slots: {\n              icon: 'myIcon'\n            }\n          } // 第4第5级以此类推，加上 children 属性即可\n          ]\n        }, {\n          title: '第 4 页',\n          key: 4,\n          slots: {\n            icon: 'myIcon'\n          }\n        }, {\n          title: '第 5 页',\n          key: 5,\n          slots: {\n            icon: 'myIcon'\n          }\n        }, {\n          title: '第 6 页',\n          key: 6,\n          slots: {\n            icon: 'myIcon'\n          }\n        }, {\n          title: '第 7 页',\n          key: 7,\n          slots: {\n            icon: 'myIcon'\n          }\n        }, {\n          title: '第 8 页',\n          key: 8,\n          slots: {\n            icon: 'myIcon'\n          }\n        }, {\n          title: '第 9 页',\n          key: 9,\n          slots: {\n            icon: 'myIcon'\n          }\n        }, {\n          title: '第 10 页',\n          key: 10,\n          slots: {\n            icon: 'myIcon'\n          }\n        }],\n        slots: {\n          icon: 'myIcon'\n        }\n      }, {\n        title: '11-20页',\n        key: '11-20',\n        children: [{\n          title: '第 11 页',\n          key: 11,\n          slots: {\n            icon: 'myIcon'\n          }\n        }, {\n          title: '第 12 页',\n          key: 12,\n          slots: {\n            icon: 'myIcon'\n          }\n        }, {\n          title: '第 13 页',\n          key: 13,\n          slots: {\n            icon: 'myIcon'\n          }\n        }, {\n          title: '第 14 页',\n          key: 14,\n          slots: {\n            icon: 'myIcon'\n          }\n        }, {\n          title: '第 15 页',\n          key: 15,\n          slots: {\n            icon: 'myIcon'\n          }\n        }, {\n          title: '第 16 页',\n          key: 16,\n          slots: {\n            icon: 'myIcon'\n          }\n        }, {\n          title: '第 17 页',\n          key: 17,\n          slots: {\n            icon: 'myIcon'\n          }\n        }, {\n          title: '第 18 页',\n          key: 18,\n          slots: {\n            icon: 'myIcon'\n          }\n        }, {\n          title: '第 19 页',\n          key: 19,\n          slots: {\n            icon: 'myIcon'\n          }\n        }, {\n          title: '第 20 页',\n          key: 20,\n          slots: {\n            icon: 'myIcon'\n          }\n        }],\n        slots: {\n          icon: 'myIcon'\n        }\n      }],\n      // 树展开的列，默认 1-10\n      treeExpandedKeys: ['1-10'],\n      // 查询url地址\n      url: {\n        getData: '/mock/vxe/getData'\n      }\n    };\n  },\n  created: function created() {\n    this.loadData();\n  },\n  methods: {\n    // 加载行编辑的数据\n    loadData: function loadData() {\n      var _this = this;\n\n      // 封装查询条件\n      var formData = {\n        pageNo: this.pagination.current,\n        pageSize: this.pagination.pageSize\n      }; // 调用查询数据接口\n\n      this.loading = true;\n      getAction(this.url.getData, formData).then(function (res) {\n        if (res.success) {\n          // 后台查询回来的 total，数据总数量\n          _this.pagination.total = res.result.total; // 将查询的数据赋值给 dataSource\n\n          _this.dataSource = res.result.records; // 重置选择\n\n          _this.selectedRows = [];\n        } else {\n          _this.$error({\n            title: '主表查询失败',\n            content: res.message\n          });\n        }\n      }).finally(function () {\n        // 这里是无论成功或失败都会执行的方法，在这里关闭loading\n        _this.loading = false;\n      });\n    },\n    handleTablePageChange: function handleTablePageChange(event) {\n      // 重新赋值\n      this.pagination.current = event.current;\n      this.pagination.pageSize = event.pageSize; // 查询数据\n\n      this.loadData(); // 判断树展开的key\n\n      if (event.current <= 10) {\n        this.treeExpandedKeys = ['1-10'];\n      } else {\n        this.treeExpandedKeys = ['11-20'];\n      }\n    },\n    // 树被选择触发的事件\n    handleTreeSelect: function handleTreeSelect(selectedKeys) {\n      var key = selectedKeys[0];\n\n      if (typeof key === 'string') {\n        // 控制树展开为当前选择的列\n        this.treeExpandedKeys = selectedKeys;\n      } else {\n        this.pagination.current = key;\n        this.loadData();\n      }\n    },\n    // 树被选择触发的事件\n    handleTreeExpand: function handleTreeExpand(expandedKeys) {\n      this.treeExpandedKeys = expandedKeys;\n    }\n  }\n};",{"version":3,"sources":["Template5.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n  <a-card :bordered=\"false\">\n\n    <a-row :gutter=\"8\">\n      <a-col :span=\"6\">\n        <!-- 加上 show-line 属性后，展开收起图标自动变成 +- 样式 -->\n        <a-tree\n          class=\"template-5-tree\"\n          :tree-data=\"treeData\"\n          show-icon\n          show-line\n          :expandedKeys=\"treeExpandedKeys\"\n          :selectedKeys=\"[pagination.current]\"\n          @expand=\"handleTreeExpand\"\n          @select=\"handleTreeSelect\"\n        >\n          <!-- 自定义子节点图标 -->\n          <a-icon slot=\"myIcon\" type=\"unordered-list\" style=\"color:#0c8fcf;\"/>\n        </a-tree>\n      </a-col>\n      <a-col :span=\"18\">\n        <j-vxe-table\n          row-number\n          row-selection\n          :height=\"750\"\n          :loading=\"loading\"\n          :columns=\"columns\"\n          :dataSource=\"dataSource\"\n          :pagination=\"pagination\"\n          @pageChange=\"handleTablePageChange\"\n        />\n      </a-col>\n    </a-row>\n\n\n  </a-card>\n</template>\n\n<script>\n  import { getAction } from '@api/manage'\n  import { JVXETypes } from '@/components/jeecg/JVxeTable'\n\n  // 【多种布局模板】左侧为树，右侧为行编辑\n  export default {\n    name: 'Template5',\n    data() {\n      return {\n        // 是否正在加载\n        loading: false,\n        // 分页器参数\n        pagination: {\n          // 当前页码\n          current: 1,\n          // 每页的条数\n          pageSize: 50,\n          // 可切换的条数\n          pageSizeOptions: ['50'],\n          // 数据总数（目前并不知道真实的总数，所以先填写0，在后台查出来后再赋值）\n          total: 0,\n        },\n        // 选择的行\n        selectedRows: [],\n        // 数据源，控制表格的数据\n        dataSource: [],\n        // 列配置，控制表格显示的列\n        columns: [\n          {key: 'num', title: '序号', width: '80px'},\n          {\n            // 字段key，跟后台数据的字段名匹配\n            key: 'ship_name',\n            // 列的标题\n            title: '船名',\n            // 列的宽度\n            width: '180px',\n            // 如果加上了该属性，就代表当前单元格是可编辑的，type就是表单的类型，input就是简单的输入框\n            type: JVXETypes.input\n          },\n          {key: 'call', title: '呼叫', width: '80px', type: JVXETypes.input},\n          {key: 'len', title: '长', width: '80px', type: JVXETypes.input},\n          {key: 'ton', title: '吨', width: '120px', type: JVXETypes.input},\n          {key: 'payer', title: '付款方', width: '120px', type: JVXETypes.input},\n          {key: 'count', title: '数', width: '40px'},\n          {\n            key: 'company',\n            title: '公司',\n            // 最小宽度，与宽度不同的是，这个不是固定的宽度，如果表格有多余的空间，会平均分配给设置了 minWidth 的列\n            // 如果要做占满表格的列可以这么写\n            minWidth: '180px',\n            type: JVXETypes.input\n          },\n          {key: 'trend', title: '动向', width: '120px', type: JVXETypes.input},\n        ],\n        // 树的数据，这里模拟分页固定数据，实际情况应该是后台查出来的数据\n        treeData: [\n          // 第1级数据\n          {\n            title: '1-10页',\n            key: '1-10',\n            // 第2级数据\n            children: [\n              {title: '第 1 页', key: 1, slots: {icon: 'myIcon'}},\n              {title: '第 2 页', key: 2, slots: {icon: 'myIcon'}},\n              {\n                title: '第 3 页',\n                key: 3,\n                slots: {icon: 'myIcon'},\n                // 第3级数据\n                children: [\n                  {title: '第 333 页', key: 333, slots: {icon: 'myIcon'}},\n                  {title: '第 444 页', key: 444, slots: {icon: 'myIcon'}},\n                  {title: '第 555 页', key: 555, slots: {icon: 'myIcon'}},\n                  // 第4第5级以此类推，加上 children 属性即可\n                ],\n              },\n              {title: '第 4 页', key: 4, slots: {icon: 'myIcon'}},\n              {title: '第 5 页', key: 5, slots: {icon: 'myIcon'}},\n              {title: '第 6 页', key: 6, slots: {icon: 'myIcon'}},\n              {title: '第 7 页', key: 7, slots: {icon: 'myIcon'}},\n              {title: '第 8 页', key: 8, slots: {icon: 'myIcon'}},\n              {title: '第 9 页', key: 9, slots: {icon: 'myIcon'}},\n              {title: '第 10 页', key: 10, slots: {icon: 'myIcon'}},\n            ],\n            slots: {icon: 'myIcon'},\n          },\n          {\n            title: '11-20页',\n            key: '11-20',\n            children: [\n              {title: '第 11 页', key: 11, slots: {icon: 'myIcon'}},\n              {title: '第 12 页', key: 12, slots: {icon: 'myIcon'}},\n              {title: '第 13 页', key: 13, slots: {icon: 'myIcon'}},\n              {title: '第 14 页', key: 14, slots: {icon: 'myIcon'}},\n              {title: '第 15 页', key: 15, slots: {icon: 'myIcon'}},\n              {title: '第 16 页', key: 16, slots: {icon: 'myIcon'}},\n              {title: '第 17 页', key: 17, slots: {icon: 'myIcon'}},\n              {title: '第 18 页', key: 18, slots: {icon: 'myIcon'}},\n              {title: '第 19 页', key: 19, slots: {icon: 'myIcon'}},\n              {title: '第 20 页', key: 20, slots: {icon: 'myIcon'}},\n            ],\n            slots: {icon: 'myIcon'},\n          },\n        ],\n        // 树展开的列，默认 1-10\n        treeExpandedKeys: ['1-10'],\n        // 查询url地址\n        url: {\n          getData: '/mock/vxe/getData',\n        },\n      }\n    },\n    created() {\n      this.loadData()\n    },\n    methods: {\n\n      // 加载行编辑的数据\n      loadData() {\n        // 封装查询条件\n        let formData = {\n          pageNo: this.pagination.current,\n          pageSize: this.pagination.pageSize\n        }\n        // 调用查询数据接口\n        this.loading = true\n        getAction(this.url.getData, formData).then(res => {\n          if (res.success) {\n            // 后台查询回来的 total，数据总数量\n            this.pagination.total = res.result.total\n            // 将查询的数据赋值给 dataSource\n            this.dataSource = res.result.records\n            // 重置选择\n            this.selectedRows = []\n          } else {\n            this.$error({title: '主表查询失败', content: res.message})\n          }\n        }).finally(() => {\n          // 这里是无论成功或失败都会执行的方法，在这里关闭loading\n          this.loading = false\n        })\n      },\n\n      handleTablePageChange(event) {\n        // 重新赋值\n        this.pagination.current = event.current\n        this.pagination.pageSize = event.pageSize\n        // 查询数据\n        this.loadData()\n        // 判断树展开的key\n        if (event.current <= 10) {\n          this.treeExpandedKeys = ['1-10']\n        } else {\n          this.treeExpandedKeys = ['11-20']\n        }\n      },\n\n      // 树被选择触发的事件\n      handleTreeSelect(selectedKeys) {\n        let key = selectedKeys[0]\n        if (typeof key === 'string') {\n          // 控制树展开为当前选择的列\n          this.treeExpandedKeys = selectedKeys\n        } else {\n          this.pagination.current = key\n          this.loadData()\n        }\n      },\n\n      // 树被选择触发的事件\n      handleTreeExpand(expandedKeys) {\n        this.treeExpandedKeys = expandedKeys\n      },\n\n    },\n  }\n</script>\n\n<style lang=\"less\">\n  /** 隐藏文件小图标 */\n  .template-5-tree.ant-tree {\n    li span.ant-tree-switcher.ant-tree-switcher-noop {\n      display: none;\n    }\n  }\n</style>"],"sourceRoot":"src/views/jeecg/JVxeDemo/layout-demo"}]}