{"remainingRequest":"D:\\activiti\\project01\\jeecg-boot-activiti-master\\ant-design-vue-jeecg\\node_modules\\babel-loader\\lib\\index.js!D:\\activiti\\project01\\jeecg-boot-activiti-master\\ant-design-vue-jeecg\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!D:\\activiti\\project01\\jeecg-boot-activiti-master\\ant-design-vue-jeecg\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\activiti\\project01\\jeecg-boot-activiti-master\\ant-design-vue-jeecg\\src\\views\\jeecg\\JVxeDemo\\demo\\JSBCDemo.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\activiti\\project01\\jeecg-boot-activiti-master\\ant-design-vue-jeecg\\src\\views\\jeecg\\JVxeDemo\\demo\\JSBCDemo.vue","mtime":1611914356000},{"path":"D:\\activiti\\project01\\jeecg-boot-activiti-master\\ant-design-vue-jeecg\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1621061384845},{"path":"D:\\activiti\\project01\\jeecg-boot-activiti-master\\ant-design-vue-jeecg\\node_modules\\babel-loader\\lib\\index.js","mtime":1621061377995},{"path":"D:\\activiti\\project01\\jeecg-boot-activiti-master\\ant-design-vue-jeecg\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1621061384845},{"path":"D:\\activiti\\project01\\jeecg-boot-activiti-master\\ant-design-vue-jeecg\\node_modules\\vue-loader\\lib\\index.js","mtime":1621061372054}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport { getAction, postAction, putAction } from '@api/manage';\nimport { JVXETypes } from '@/components/jeecg/JVxeTable'; // 即时保存示例\n\nexport default {\n  name: 'JSBCDemo',\n  data: function data() {\n    return {\n      // 工具栏的按钮配置\n      toolbarConfig: {\n        // add 新增按钮；remove 删除按钮；clearSelection 清空选择按钮\n        btn: ['add', 'save', 'remove', 'clearSelection']\n      },\n      // 是否正在加载\n      loading: false,\n      // 分页器参数\n      pagination: {\n        // 当前页码\n        current: 1,\n        // 每页的条数\n        pageSize: 200,\n        // 可切换的条数\n        pageSizeOptions: ['10', '20', '30', '100', '200'],\n        // 数据总数（目前并不知道真实的总数，所以先填写0，在后台查出来后再赋值）\n        total: 0\n      },\n      // 选择的行\n      selectedRows: [],\n      // 数据源，控制表格的数据\n      dataSource: [],\n      // 列配置，控制表格显示的列\n      columns: [{\n        key: 'num',\n        title: '序号',\n        width: '80px'\n      }, {\n        // 字段key，跟后台数据的字段名匹配\n        key: 'ship_name',\n        // 列的标题\n        title: '船名',\n        // 列的宽度\n        width: '180px',\n        // 如果加上了该属性，就代表当前单元格是可编辑的，type就是表单的类型，input就是简单的输入框\n        type: JVXETypes.input\n      }, {\n        key: 'call',\n        title: '呼叫',\n        width: '80px',\n        type: JVXETypes.input\n      }, {\n        key: 'len',\n        title: '长',\n        width: '80px',\n        type: JVXETypes.input\n      }, {\n        key: 'ton',\n        title: '吨',\n        width: '120px',\n        defaultValue: 233,\n        type: JVXETypes.input\n      }, {\n        key: 'payer',\n        title: '付款方',\n        width: '120px',\n        defaultValue: '张三',\n        type: JVXETypes.input\n      }, {\n        key: 'count',\n        title: '数',\n        width: '40px'\n      }, {\n        key: 'company',\n        title: '公司',\n        // 最小宽度，与宽度不同的是，这个不是固定的宽度，如果表格有多余的空间，会平均分配给设置了 minWidth 的列\n        // 如果要做占满表格的列可以这么写\n        minWidth: '180px',\n        type: JVXETypes.input\n      }, {\n        key: 'trend',\n        title: '动向',\n        width: '120px',\n        type: JVXETypes.input\n      }],\n      // 查询url地址\n      url: {\n        getData: '/mock/vxe/getData',\n        // 模拟保存单行数据（即时保存）\n        saveRow: '/mock/vxe/immediateSaveRow',\n        // 模拟保存整个表格的数据\n        saveAll: '/mock/vxe/immediateSaveAll'\n      }\n    };\n  },\n  created: function created() {\n    this.loadData();\n  },\n  methods: {\n    // 加载数据\n    loadData: function loadData() {\n      var _this = this;\n\n      // 封装查询条件\n      var formData = {\n        pageNo: this.pagination.current,\n        pageSize: this.pagination.pageSize\n      }; // 调用查询数据接口\n\n      this.loading = true;\n      getAction(this.url.getData, formData).then(function (res) {\n        if (res.success) {\n          // 后台查询回来的 total，数据总数量\n          _this.pagination.total = res.result.total; // 将查询的数据赋值给 dataSource\n\n          _this.dataSource = res.result.records; // 重置选择\n\n          _this.selectedRows = [];\n        } else {\n          _this.$error({\n            title: '主表查询失败',\n            content: res.message\n          });\n        }\n      }).finally(function () {\n        // 这里是无论成功或失败都会执行的方法，在这里关闭loading\n        _this.loading = false;\n      });\n    },\n    // 【整体保存】点击保存按钮时触发的事件\n    handleTableSave: function handleTableSave(_ref) {\n      var _this2 = this;\n\n      var $table = _ref.$table,\n          target = _ref.target;\n      // 校验整个表格\n      $table.validate().then(function (errMap) {\n        // 校验通过\n        if (!errMap) {\n          // 获取所有数据\n          var tableData = target.getTableData();\n          console.log('当前保存的数据是：', tableData); // 获取新增的数据\n\n          var newData = target.getNewData();\n          console.log('-- 新增的数据：', newData); // 获取删除的数据\n\n          var deleteData = target.getDeleteData();\n          console.log('-- 删除的数据：', deleteData); // 【模拟保存】\n\n          _this2.loading = true;\n          postAction(_this2.url.saveAll, tableData).then(function (res) {\n            if (res.success) {\n              _this2.$message.success(\"\\u4FDD\\u5B58\\u6210\\u529F\\uFF01\");\n            } else {\n              _this2.$message.warn(\"\\u4FDD\\u5B58\\u5931\\u8D25\\uFF1A\" + res.message);\n            }\n          }).finally(function () {\n            _this2.loading = false;\n          });\n        }\n      });\n    },\n    // 触发单元格删除事件\n    handleTableRemove: function handleTableRemove(event) {\n      var _this3 = this;\n\n      // 把 event.deleteRows 传给后台进行删除（注意：这里不会传递前端逻辑新增的数据，因为不需要请求后台删除）\n      console.log('待删除的数据: ', event.deleteRows); // 也可以只传ID，因为可以根据ID删除\n\n      var deleteIds = event.deleteRows.map(function (row) {\n        return row.id;\n      });\n      console.log('待删除的数据ids: ', deleteIds); // 模拟请求后台删除\n\n      this.loading = true;\n      window.setTimeout(function () {\n        _this3.loading = false;\n\n        _this3.$message.success('删除成功'); // 假设后台返回删除成功，必须要调用 confirmRemove() 方法，才会真正在表格里移除（会同时删除选中的逻辑新增的数据）\n\n\n        event.confirmRemove();\n      }, 1000);\n    },\n    // 单元格编辑完成之后触发的事件\n    handleEditClosed: function handleEditClosed(event) {\n      var _this4 = this;\n\n      var $table = event.$table,\n          row = event.row,\n          column = event.column;\n      var field = column.property;\n      var cellValue = row[field]; // 判断单元格值是否被修改\n\n      if ($table.isUpdateByRow(row, field)) {\n        // 校验当前行\n        $table.validate(row).then(function (errMap) {\n          // 校验通过\n          if (!errMap) {\n            // 【模拟保存】\n            var hideLoading = _this4.$message.loading(\"\\u6B63\\u5728\\u4FDD\\u5B58\\\"\".concat(column.title, \"\\\"\"), 0);\n\n            console.log('即时保存数据：', row);\n            putAction(_this4.url.saveRow, row).then(function (res) {\n              if (res.success) {\n                _this4.$message.success(\"\\\"\".concat(column.title, \"\\\"\\u4FDD\\u5B58\\u6210\\u529F\\uFF01\")); // 局部更新单元格为已保存状态\n\n\n                $table.reloadRow(row, null, field);\n              } else {\n                _this4.$message.warn(\"\\\"\".concat(column.title, \"\\\"\\u4FDD\\u5B58\\u5931\\u8D25\\uFF1A\") + res.message);\n              }\n            }).finally(function () {\n              hideLoading();\n            });\n          }\n        });\n      }\n    },\n    // 当分页参数变化时触发的事件\n    handlePageChange: function handlePageChange(event) {\n      // 重新赋值\n      this.pagination.current = event.current;\n      this.pagination.pageSize = event.pageSize; // 查询数据\n\n      this.loadData();\n    },\n    // 当选择的行变化时触发的事件\n    handleSelectRowChange: function handleSelectRowChange(event) {\n      this.selectedRows = event.selectedRows;\n    }\n  }\n};",{"version":3,"sources":["JSBCDemo.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n  <a-card title=\"即时保存示例\" :bordered=\"false\">\n    <!--\n      【即时保存大体思路】：\n      1. JVxeTable 上必须加 keep-source 属性\n      2. 监听 edit-closed事件，这个事件是在编辑完成后触发\n      3. 在这个事件里面判断数据是否更改，如果更改了就调用接口进行保存操作\n    -->\n    <j-vxe-table\n      toolbar\n      :toolbarConfig=\"toolbarConfig\"\n\n      row-number\n      row-selection\n      keep-source\n      async-remove\n\n      :height=\"340\"\n      :loading=\"loading\"\n      :columns=\"columns\"\n      :dataSource=\"dataSource\"\n      :pagination=\"pagination\"\n\n      @save=\"handleTableSave\"\n      @remove=\"handleTableRemove\"\n      @edit-closed=\"handleEditClosed\"\n      @pageChange=\"handlePageChange\"\n      @selectRowChange=\"handleSelectRowChange\"\n    />\n  </a-card>\n</template>\n\n<script>\n  import { getAction, postAction, putAction } from '@api/manage'\n  import { JVXETypes } from '@/components/jeecg/JVxeTable'\n\n  // 即时保存示例\n  export default {\n    name: 'JSBCDemo',\n    data() {\n      return {\n        // 工具栏的按钮配置\n        toolbarConfig: {\n          // add 新增按钮；remove 删除按钮；clearSelection 清空选择按钮\n          btn: ['add', 'save', 'remove', 'clearSelection']\n        },\n        // 是否正在加载\n        loading: false,\n        // 分页器参数\n        pagination: {\n          // 当前页码\n          current: 1,\n          // 每页的条数\n          pageSize: 200,\n          // 可切换的条数\n          pageSizeOptions: ['10', '20', '30', '100', '200'],\n          // 数据总数（目前并不知道真实的总数，所以先填写0，在后台查出来后再赋值）\n          total: 0,\n        },\n        // 选择的行\n        selectedRows: [],\n        // 数据源，控制表格的数据\n        dataSource: [],\n        // 列配置，控制表格显示的列\n        columns: [\n          {key: 'num', title: '序号', width: '80px'},\n          {\n            // 字段key，跟后台数据的字段名匹配\n            key: 'ship_name',\n            // 列的标题\n            title: '船名',\n            // 列的宽度\n            width: '180px',\n            // 如果加上了该属性，就代表当前单元格是可编辑的，type就是表单的类型，input就是简单的输入框\n            type: JVXETypes.input\n          },\n          {key: 'call', title: '呼叫', width: '80px', type: JVXETypes.input},\n          {key: 'len', title: '长', width: '80px', type: JVXETypes.input},\n          {key: 'ton', title: '吨', width: '120px', defaultValue: 233, type: JVXETypes.input},\n          {key: 'payer', title: '付款方', width: '120px', defaultValue: '张三', type: JVXETypes.input},\n          {key: 'count', title: '数', width: '40px'},\n          {\n            key: 'company',\n            title: '公司',\n            // 最小宽度，与宽度不同的是，这个不是固定的宽度，如果表格有多余的空间，会平均分配给设置了 minWidth 的列\n            // 如果要做占满表格的列可以这么写\n            minWidth: '180px',\n            type: JVXETypes.input\n          },\n          {key: 'trend', title: '动向', width: '120px', type: JVXETypes.input},\n        ],\n        // 查询url地址\n        url: {\n          getData: '/mock/vxe/getData',\n          // 模拟保存单行数据（即时保存）\n          saveRow: '/mock/vxe/immediateSaveRow',\n          // 模拟保存整个表格的数据\n          saveAll: '/mock/vxe/immediateSaveAll',\n        },\n      }\n    },\n    created() {\n      this.loadData()\n    },\n    methods: {\n\n      // 加载数据\n      loadData() {\n        // 封装查询条件\n        let formData = {\n          pageNo: this.pagination.current,\n          pageSize: this.pagination.pageSize\n        }\n        // 调用查询数据接口\n        this.loading = true\n        getAction(this.url.getData, formData).then(res => {\n          if (res.success) {\n            // 后台查询回来的 total，数据总数量\n            this.pagination.total = res.result.total\n            // 将查询的数据赋值给 dataSource\n            this.dataSource = res.result.records\n            // 重置选择\n            this.selectedRows = []\n          } else {\n            this.$error({title: '主表查询失败', content: res.message})\n          }\n        }).finally(() => {\n          // 这里是无论成功或失败都会执行的方法，在这里关闭loading\n          this.loading = false\n        })\n      },\n\n      // 【整体保存】点击保存按钮时触发的事件\n      handleTableSave({$table, target}) {\n        // 校验整个表格\n        $table.validate().then((errMap) => {\n          // 校验通过\n          if (!errMap) {\n            // 获取所有数据\n            let tableData = target.getTableData()\n            console.log('当前保存的数据是：', tableData)\n            // 获取新增的数据\n            let newData = target.getNewData()\n            console.log('-- 新增的数据：', newData)\n            // 获取删除的数据\n            let deleteData = target.getDeleteData()\n            console.log('-- 删除的数据：', deleteData)\n\n            // 【模拟保存】\n            this.loading = true\n            postAction(this.url.saveAll, tableData).then(res => {\n              if (res.success) {\n                this.$message.success(`保存成功！`)\n              } else {\n                this.$message.warn(`保存失败：` + res.message)\n              }\n            }).finally(() => {\n              this.loading = false\n            })\n          }\n        })\n      },\n\n      // 触发单元格删除事件\n      handleTableRemove(event) {\n\n        // 把 event.deleteRows 传给后台进行删除（注意：这里不会传递前端逻辑新增的数据，因为不需要请求后台删除）\n        console.log('待删除的数据: ', event.deleteRows)\n        // 也可以只传ID，因为可以根据ID删除\n        let deleteIds = event.deleteRows.map(row => row.id)\n        console.log('待删除的数据ids: ', deleteIds)\n\n        // 模拟请求后台删除\n        this.loading = true\n        window.setTimeout(() => {\n          this.loading = false\n          this.$message.success('删除成功')\n          // 假设后台返回删除成功，必须要调用 confirmRemove() 方法，才会真正在表格里移除（会同时删除选中的逻辑新增的数据）\n          event.confirmRemove()\n        }, 1000)\n      },\n\n      // 单元格编辑完成之后触发的事件\n      handleEditClosed(event) {\n        let {$table, row, column} = event\n\n        let field = column.property\n        let cellValue = row[field]\n        // 判断单元格值是否被修改\n        if ($table.isUpdateByRow(row, field)) {\n          // 校验当前行\n          $table.validate(row).then((errMap) => {\n            // 校验通过\n            if (!errMap) {\n              // 【模拟保存】\n              let hideLoading = this.$message.loading(`正在保存\"${column.title}\"`, 0)\n              console.log('即时保存数据：', row)\n              putAction(this.url.saveRow, row).then(res => {\n                if (res.success) {\n                  this.$message.success(`\"${column.title}\"保存成功！`)\n                  // 局部更新单元格为已保存状态\n                  $table.reloadRow(row, null, field)\n                } else {\n                  this.$message.warn(`\"${column.title}\"保存失败：` + res.message)\n                }\n              }).finally(() => {\n                hideLoading()\n              })\n            }\n          })\n        }\n      },\n\n      // 当分页参数变化时触发的事件\n      handlePageChange(event) {\n        // 重新赋值\n        this.pagination.current = event.current\n        this.pagination.pageSize = event.pageSize\n        // 查询数据\n        this.loadData()\n      },\n\n      // 当选择的行变化时触发的事件\n      handleSelectRowChange(event) {\n        this.selectedRows = event.selectedRows\n      },\n\n    },\n  }\n</script>\n\n<style scoped>\n\n</style>"],"sourceRoot":"src/views/jeecg/JVxeDemo/demo"}]}