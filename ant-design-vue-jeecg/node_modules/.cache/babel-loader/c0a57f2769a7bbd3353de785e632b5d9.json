{"remainingRequest":"D:\\activiti\\project01\\jeecg-boot-activiti-master\\ant-design-vue-jeecg\\node_modules\\babel-loader\\lib\\index.js!D:\\activiti\\project01\\jeecg-boot-activiti-master\\ant-design-vue-jeecg\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!D:\\activiti\\project01\\jeecg-boot-activiti-master\\ant-design-vue-jeecg\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\activiti\\project01\\jeecg-boot-activiti-master\\ant-design-vue-jeecg\\src\\components\\tools\\HeaderNotice.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\activiti\\project01\\jeecg-boot-activiti-master\\ant-design-vue-jeecg\\src\\components\\tools\\HeaderNotice.vue","mtime":1611914356000},{"path":"D:\\activiti\\project01\\jeecg-boot-activiti-master\\ant-design-vue-jeecg\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1621061384845},{"path":"D:\\activiti\\project01\\jeecg-boot-activiti-master\\ant-design-vue-jeecg\\node_modules\\babel-loader\\lib\\index.js","mtime":1621061377995},{"path":"D:\\activiti\\project01\\jeecg-boot-activiti-master\\ant-design-vue-jeecg\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1621061384845},{"path":"D:\\activiti\\project01\\jeecg-boot-activiti-master\\ant-design-vue-jeecg\\node_modules\\vue-loader\\lib\\index.js","mtime":1621061372054}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport { getAction, putAction } from '@/api/manage';\nimport ShowAnnouncement from './ShowAnnouncement';\nimport store from '@/store/';\nimport DynamicNotice from './DynamicNotice';\nexport default {\n  name: \"HeaderNotice\",\n  components: {\n    DynamicNotice: DynamicNotice,\n    ShowAnnouncement: ShowAnnouncement\n  },\n  data: function data() {\n    return {\n      loadding: false,\n      url: {\n        listCementByUser: \"/sys/annountCement/listByUser\",\n        editCementSend: \"/sys/sysAnnouncementSend/editByAnntIdAndUserId\",\n        queryById: \"/sys/annountCement/queryById\"\n      },\n      hovered: false,\n      announcement1: [],\n      announcement2: [],\n      msg1Count: \"0\",\n      msg2Count: \"0\",\n      msg1Title: \"通知(0)\",\n      msg2Title: \"\",\n      stopTimer: false,\n      websock: null,\n      lockReconnect: false,\n      heartCheck: null,\n      formData: {},\n      openPath: ''\n    };\n  },\n  computed: {\n    msgTotal: function msgTotal() {\n      return parseInt(this.msg1Count) + parseInt(this.msg2Count);\n    }\n  },\n  mounted: function mounted() {\n    this.loadData(); //this.timerFun();\n\n    this.initWebSocket(); // this.heartCheckFun();\n  },\n  destroyed: function destroyed() {\n    // 离开页面生命周期函数\n    this.websocketOnclose();\n  },\n  methods: {\n    timerFun: function timerFun() {\n      var _this = this;\n\n      this.stopTimer = false;\n      var myTimer = setInterval(function () {\n        // 停止定时器\n        if (_this.stopTimer == true) {\n          clearInterval(myTimer);\n          return;\n        }\n\n        _this.loadData();\n      }, 6000);\n    },\n    loadData: function loadData() {\n      var _this2 = this;\n\n      try {\n        // 获取系统消息\n        getAction(this.url.listCementByUser).then(function (res) {\n          if (res.success) {\n            _this2.announcement1 = res.result.anntMsgList;\n            _this2.msg1Count = res.result.anntMsgTotal;\n            _this2.msg1Title = \"通知(\" + res.result.anntMsgTotal + \")\";\n            _this2.announcement2 = res.result.sysMsgList;\n            _this2.msg2Count = res.result.sysMsgTotal;\n            _this2.msg2Title = \"系统消息(\" + res.result.sysMsgTotal + \")\";\n          }\n        }).catch(function (error) {\n          console.log(\"系统消息通知异常\", error); //这行打印permissionName is undefined\n\n          _this2.stopTimer = true;\n          console.log(\"清理timer\");\n        });\n      } catch (err) {\n        this.stopTimer = true;\n        console.log(\"通知异常\", err);\n      }\n    },\n    fetchNotice: function fetchNotice() {\n      var _this3 = this;\n\n      if (this.loadding) {\n        this.loadding = false;\n        return;\n      }\n\n      this.loadding = true;\n      setTimeout(function () {\n        _this3.loadding = false;\n      }, 200);\n    },\n    showAnnouncement: function showAnnouncement(record) {\n      var _this4 = this;\n\n      putAction(this.url.editCementSend, {\n        anntId: record.id\n      }).then(function (res) {\n        if (res.success) {\n          _this4.loadData();\n        }\n      });\n      this.hovered = false;\n\n      if (record.openType === 'component') {\n        this.openPath = record.openPage;\n        this.formData = {\n          id: record.busId\n        };\n        this.$refs.showDynamNotice.detail(record.openPage);\n      } else {\n        this.$refs.ShowAnnouncement.detail(record);\n      }\n    },\n    toMyAnnouncement: function toMyAnnouncement() {\n      this.$router.push({\n        path: '/isps/userAnnouncement'\n      });\n    },\n    modalFormOk: function modalFormOk() {},\n    handleHoverChange: function handleHoverChange(visible) {\n      this.hovered = visible;\n    },\n    initWebSocket: function initWebSocket() {\n      // WebSocket与普通的请求所用协议有所不同，ws等同于http，wss等同于https\n      var userId = store.getters.userInfo.id;\n      var url = window._CONFIG['domianURL'].replace(\"https://\", \"wss://\").replace(\"http://\", \"ws://\") + \"/websocket/\" + userId; //console.log(url);\n\n      this.websock = new WebSocket(url);\n      this.websock.onopen = this.websocketOnopen;\n      this.websock.onerror = this.websocketOnerror;\n      this.websock.onmessage = this.websocketOnmessage;\n      this.websock.onclose = this.websocketOnclose;\n    },\n    websocketOnopen: function websocketOnopen() {\n      console.log(\"WebSocket连接成功\"); //心跳检测重置\n      //this.heartCheck.reset().start();\n    },\n    websocketOnerror: function websocketOnerror(e) {\n      console.log(\"WebSocket连接发生错误\");\n      this.reconnect();\n    },\n    websocketOnmessage: function websocketOnmessage(e) {\n      console.log(\"-----接收消息-------\", e.data);\n      var data = eval(\"(\" + e.data + \")\"); //解析对象\n\n      if (data.cmd == \"topic\") {\n        //系统通知\n        this.loadData();\n      } else if (data.cmd == \"user\") {\n        //用户消息\n        this.loadData();\n      } //心跳检测重置\n      //this.heartCheck.reset().start();\n\n    },\n    websocketOnclose: function websocketOnclose(e) {\n      console.log(\"connection closed (\" + e + \")\");\n\n      if (e) {\n        console.log(\"connection closed (\" + e.code + \")\");\n      }\n\n      this.reconnect();\n    },\n    websocketSend: function websocketSend(text) {\n      // 数据发送\n      try {\n        this.websock.send(text);\n      } catch (err) {\n        console.log(\"send failed (\" + err.code + \")\");\n      }\n    },\n    openNotification: function openNotification(data) {\n      var _this5 = this;\n\n      var text = data.msgTxt;\n      var key = \"open\".concat(Date.now());\n      this.$notification.open({\n        message: '消息提醒',\n        placement: 'bottomRight',\n        description: text,\n        key: key,\n        btn: function btn(h) {\n          return h('a-button', {\n            props: {\n              type: 'primary',\n              size: 'small'\n            },\n            on: {\n              click: function click() {\n                return _this5.showDetail(key, data);\n              }\n            }\n          }, '查看详情');\n        }\n      });\n    },\n    reconnect: function reconnect() {\n      var that = this;\n      if (that.lockReconnect) return;\n      that.lockReconnect = true; //没连接上会一直重连，设置延迟避免请求过多\n\n      setTimeout(function () {\n        console.info(\"尝试重连...\");\n        that.initWebSocket();\n        that.lockReconnect = false;\n      }, 5000);\n    },\n    heartCheckFun: function heartCheckFun() {\n      var that = this; //心跳检测,每20s心跳一次\n\n      that.heartCheck = {\n        timeout: 20000,\n        timeoutObj: null,\n        serverTimeoutObj: null,\n        reset: function reset() {\n          clearTimeout(this.timeoutObj); //clearTimeout(this.serverTimeoutObj);\n\n          return this;\n        },\n        start: function start() {\n          var self = this;\n          this.timeoutObj = setTimeout(function () {\n            //这里发送一个心跳，后端收到后，返回一个心跳消息，\n            //onmessage拿到返回的心跳就说明连接正常\n            that.websocketSend(\"HeartBeat\");\n            console.info(\"客户端发送心跳\"); //self.serverTimeoutObj = setTimeout(function(){//如果超过一定时间还没重置，说明后端主动断开了\n            //  that.websock.close();//如果onclose会执行reconnect，我们执行ws.close()就行了.如果直接执行reconnect 会触发onclose导致重连两次\n            //}, self.timeout)\n          }, this.timeout);\n        }\n      };\n    },\n    showDetail: function showDetail(key, data) {\n      var _this6 = this;\n\n      this.$notification.close(key);\n      var id = data.msgId;\n      getAction(this.url.queryById, {\n        id: id\n      }).then(function (res) {\n        if (res.success) {\n          var record = res.result;\n\n          _this6.showAnnouncement(record);\n        }\n      });\n    }\n  }\n};",{"version":3,"sources":["HeaderNotice.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n  <a-popover\n    trigger=\"click\"\n    placement=\"bottomRight\"\n    :autoAdjustOverflow=\"true\"\n    :arrowPointAtCenter=\"true\"\n    overlayClassName=\"header-notice-wrapper\"\n    @visibleChange=\"handleHoverChange\"\n    :overlayStyle=\"{ width: '300px', top: '50px' }\">\n    <template slot=\"content\">\n      <a-spin :spinning=\"loadding\">\n        <a-tabs>\n          <a-tab-pane :tab=\"msg1Title\" key=\"1\">\n            <!--<a-list>\n              <a-list-item>\n                <a-list-item-meta title=\"你收到了 14 份新周报\" description=\"一年前\">\n                  <a-avatar style=\"background-color: white\" slot=\"avatar\" src=\"https://gw.alipayobjects.com/zos/rmsportal/ThXAXghbEsBCCSDihZxY.png\"/>\n                </a-list-item-meta>\n              </a-list-item>\n              <a-list-item>\n                <a-list-item-meta title=\"你推荐的 IT大牛 已通过第三轮面试\" description=\"一年前\">\n                  <a-avatar style=\"background-color: white\" slot=\"avatar\" src=\"https://gw.alipayobjects.com/zos/rmsportal/OKJXDXrmkNshAMvwtvhu.png\"/>\n                </a-list-item-meta>\n              </a-list-item>\n              <a-list-item>\n                <a-list-item-meta title=\"这种模板可以区分多种通知类型\" description=\"一年前\">\n                  <a-avatar style=\"background-color: white\" slot=\"avatar\" src=\"https://gw.alipayobjects.com/zos/rmsportal/kISTdvpyTAhtGxpovNWd.png\"/>\n                </a-list-item-meta>\n              </a-list-item>\n            </a-list>-->\n            <a-list>\n              <a-list-item :key=\"index\" v-for=\"(record, index) in announcement1\">\n                <div style=\"margin-left: 5%;width: 80%\">\n                  <p><a @click=\"showAnnouncement(record)\">{{ record.titile }}</a></p>\n                  <p style=\"color: rgba(0,0,0,.45);margin-bottom: 0px\">{{ record.createTime }} 发布</p>\n                </div>\n                <div style=\"text-align: right\">\n                  <a-tag @click=\"showAnnouncement(record)\" v-if=\"record.priority === 'L'\" color=\"blue\">一般消息</a-tag>\n                  <a-tag @click=\"showAnnouncement(record)\" v-if=\"record.priority === 'M'\" color=\"orange\">重要消息</a-tag>\n                  <a-tag @click=\"showAnnouncement(record)\" v-if=\"record.priority === 'H'\" color=\"red\">紧急消息</a-tag>\n                </div>\n              </a-list-item>\n              <div style=\"margin-top: 5px;text-align: center\">\n                <a-button @click=\"toMyAnnouncement()\" type=\"dashed\" block>查看更多</a-button>\n              </div>\n            </a-list>\n          </a-tab-pane>\n          <a-tab-pane :tab=\"msg2Title\" key=\"2\">\n            <a-list>\n              <a-list-item :key=\"index\" v-for=\"(record, index) in announcement2\">\n                <div style=\"margin-left: 5%;width: 80%\">\n                  <p><a @click=\"showAnnouncement(record)\">{{ record.titile }}</a></p>\n                  <p style=\"color: rgba(0,0,0,.45);margin-bottom: 0px\">{{ record.createTime }} 发布</p>\n                </div>\n                <div style=\"text-align: right\">\n                  <a-tag @click=\"showAnnouncement(record)\" v-if=\"record.priority === 'L'\" color=\"blue\">一般消息</a-tag>\n                  <a-tag @click=\"showAnnouncement(record)\" v-if=\"record.priority === 'M'\" color=\"orange\">重要消息</a-tag>\n                  <a-tag @click=\"showAnnouncement(record)\" v-if=\"record.priority === 'H'\" color=\"red\">紧急消息</a-tag>\n                </div>\n              </a-list-item>\n              <div style=\"margin-top: 5px;text-align: center\">\n                <a-button @click=\"toMyAnnouncement()\" type=\"dashed\" block>查看更多</a-button>\n              </div>\n            </a-list>\n          </a-tab-pane>\n        </a-tabs>\n      </a-spin>\n    </template>\n    <span @click=\"fetchNotice\" class=\"header-notice\">\n      <a-badge :count=\"msgTotal\">\n        <a-icon style=\"font-size: 16px; padding: 4px\" type=\"bell\" />\n      </a-badge>\n    </span>\n    <show-announcement ref=\"ShowAnnouncement\" @ok=\"modalFormOk\"></show-announcement>\n    <dynamic-notice ref=\"showDynamNotice\" :path=\"openPath\" :formData=\"formData\"/>\n  </a-popover>\n</template>\n\n<script>\n  import { getAction,putAction } from '@/api/manage'\n  import ShowAnnouncement from './ShowAnnouncement'\n  import store from '@/store/'\n  import DynamicNotice from './DynamicNotice'\n\n\n  export default {\n    name: \"HeaderNotice\",\n    components: {\n      DynamicNotice,\n      ShowAnnouncement,\n    },\n    data () {\n      return {\n        loadding: false,\n        url:{\n          listCementByUser:\"/sys/annountCement/listByUser\",\n          editCementSend:\"/sys/sysAnnouncementSend/editByAnntIdAndUserId\",\n          queryById:\"/sys/annountCement/queryById\",\n        },\n        hovered: false,\n        announcement1:[],\n        announcement2:[],\n        msg1Count:\"0\",\n        msg2Count:\"0\",\n        msg1Title:\"通知(0)\",\n        msg2Title:\"\",\n        stopTimer:false,\n        websock: null,\n        lockReconnect:false,\n        heartCheck:null,\n        formData:{},\n        openPath:''\n      }\n    },\n    computed:{\n      msgTotal () {\n        return parseInt(this.msg1Count)+parseInt(this.msg2Count);\n      }\n    },\n    mounted() {\n      this.loadData();\n      //this.timerFun();\n      this.initWebSocket();\n     // this.heartCheckFun();\n    },\n    destroyed: function () { // 离开页面生命周期函数\n      this.websocketOnclose();\n    },\n    methods: {\n      timerFun() {\n        this.stopTimer = false;\n        let myTimer = setInterval(()=>{\n          // 停止定时器\n          if (this.stopTimer == true) {\n            clearInterval(myTimer);\n            return;\n          }\n          this.loadData()\n        },6000)\n      },\n      loadData (){\n        try {\n          // 获取系统消息\n          getAction(this.url.listCementByUser).then((res) => {\n            if (res.success) {\n              this.announcement1 = res.result.anntMsgList;\n              this.msg1Count = res.result.anntMsgTotal;\n              this.msg1Title = \"通知(\" + res.result.anntMsgTotal + \")\";\n              this.announcement2 = res.result.sysMsgList;\n              this.msg2Count = res.result.sysMsgTotal;\n              this.msg2Title = \"系统消息(\" + res.result.sysMsgTotal + \")\";\n            }\n          }).catch(error => {\n            console.log(\"系统消息通知异常\",error);//这行打印permissionName is undefined\n            this.stopTimer = true;\n            console.log(\"清理timer\");\n          });\n        } catch (err) {\n          this.stopTimer = true;\n          console.log(\"通知异常\",err);\n        }\n      },\n      fetchNotice () {\n        if (this.loadding) {\n          this.loadding = false\n          return\n        }\n        this.loadding = true\n        setTimeout(() => {\n          this.loadding = false\n        }, 200)\n      },\n      showAnnouncement(record){\n        putAction(this.url.editCementSend,{anntId:record.id}).then((res)=>{\n          if(res.success){\n            this.loadData();\n          }\n        });\n        this.hovered = false;\n        if(record.openType==='component'){\n          this.openPath = record.openPage;\n          this.formData = {id:record.busId};\n          this.$refs.showDynamNotice.detail(record.openPage);\n        }else{\n          this.$refs.ShowAnnouncement.detail(record);\n        }\n      },\n      toMyAnnouncement(){\n        this.$router.push({\n          path: '/isps/userAnnouncement'\n        });\n      },\n      modalFormOk(){\n      },\n      handleHoverChange (visible) {\n        this.hovered = visible;\n      },\n\n      initWebSocket: function () {\n        // WebSocket与普通的请求所用协议有所不同，ws等同于http，wss等同于https\n        var userId = store.getters.userInfo.id;\n        var url = window._CONFIG['domianURL'].replace(\"https://\",\"wss://\").replace(\"http://\",\"ws://\")+\"/websocket/\"+userId;\n        //console.log(url);\n        this.websock = new WebSocket(url);\n        this.websock.onopen = this.websocketOnopen;\n        this.websock.onerror = this.websocketOnerror;\n        this.websock.onmessage = this.websocketOnmessage;\n        this.websock.onclose = this.websocketOnclose;\n      },\n      websocketOnopen: function () {\n        console.log(\"WebSocket连接成功\");\n        //心跳检测重置\n        //this.heartCheck.reset().start();\n      },\n      websocketOnerror: function (e) {\n        console.log(\"WebSocket连接发生错误\");\n        this.reconnect();\n      },\n      websocketOnmessage: function (e) {\n        console.log(\"-----接收消息-------\",e.data);\n        var data = eval(\"(\" + e.data + \")\"); //解析对象\n        if(data.cmd == \"topic\"){\n            //系统通知\n          this.loadData();\n        }else if(data.cmd == \"user\"){\n            //用户消息\n          this.loadData();\n        }\n        //心跳检测重置\n        //this.heartCheck.reset().start();\n      },\n      websocketOnclose: function (e) {\n        console.log(\"connection closed (\" + e + \")\");\n        if(e){\n          console.log(\"connection closed (\" + e.code + \")\");\n        }\n        this.reconnect();\n      },\n      websocketSend(text) { // 数据发送\n        try {\n          this.websock.send(text);\n        } catch (err) {\n          console.log(\"send failed (\" + err.code + \")\");\n        }\n      },\n\n      openNotification (data) {\n        var text = data.msgTxt;\n        const key = `open${Date.now()}`;\n        this.$notification.open({\n          message: '消息提醒',\n          placement:'bottomRight',\n          description: text,\n          key,\n          btn: (h)=>{\n            return h('a-button', {\n              props: {\n                type: 'primary',\n                size: 'small',\n              },\n              on: {\n                click: () => this.showDetail(key,data)\n              }\n            }, '查看详情')\n          },\n        });\n      },\n\n      reconnect() {\n        var that = this;\n        if(that.lockReconnect) return;\n        that.lockReconnect = true;\n        //没连接上会一直重连，设置延迟避免请求过多\n        setTimeout(function () {\n          console.info(\"尝试重连...\");\n          that.initWebSocket();\n          that.lockReconnect = false;\n        }, 5000);\n      },\n      heartCheckFun(){\n        var that = this;\n        //心跳检测,每20s心跳一次\n        that.heartCheck = {\n          timeout: 20000,\n          timeoutObj: null,\n          serverTimeoutObj: null,\n          reset: function(){\n            clearTimeout(this.timeoutObj);\n            //clearTimeout(this.serverTimeoutObj);\n            return this;\n          },\n          start: function(){\n            var self = this;\n            this.timeoutObj = setTimeout(function(){\n              //这里发送一个心跳，后端收到后，返回一个心跳消息，\n              //onmessage拿到返回的心跳就说明连接正常\n              that.websocketSend(\"HeartBeat\");\n              console.info(\"客户端发送心跳\");\n              //self.serverTimeoutObj = setTimeout(function(){//如果超过一定时间还没重置，说明后端主动断开了\n              //  that.websock.close();//如果onclose会执行reconnect，我们执行ws.close()就行了.如果直接执行reconnect 会触发onclose导致重连两次\n              //}, self.timeout)\n            }, this.timeout)\n          }\n        }\n      },\n\n\n      showDetail(key,data){\n        this.$notification.close(key);\n        var id = data.msgId;\n        getAction(this.url.queryById,{id:id}).then((res) => {\n          if (res.success) {\n            var record = res.result;\n            this.showAnnouncement(record);\n          }\n        })\n\n      },\n    }\n  }\n</script>\n\n<style lang=\"css\">\n  .header-notice-wrapper {\n    top: 50px !important;\n  }\n</style>\n<style lang=\"less\" scoped>\n  .header-notice{\n    display: inline-block;\n    transition: all 0.3s;\n\n    span {\n      vertical-align: initial;\n    }\n  }\n</style>"],"sourceRoot":"src/components/tools"}]}