{"remainingRequest":"D:\\activiti\\project01\\jeecg-boot-activiti-master\\ant-design-vue-jeecg\\node_modules\\babel-loader\\lib\\index.js!D:\\activiti\\project01\\jeecg-boot-activiti-master\\ant-design-vue-jeecg\\node_modules\\@vue\\cli-plugin-eslint\\node_modules\\eslint-loader\\index.js??ref--13-0!D:\\activiti\\project01\\jeecg-boot-activiti-master\\ant-design-vue-jeecg\\src\\components\\jeecg\\JVxeTable\\utils\\cellUtils.js","dependencies":[{"path":"D:\\activiti\\project01\\jeecg-boot-activiti-master\\ant-design-vue-jeecg\\src\\components\\jeecg\\JVxeTable\\utils\\cellUtils.js","mtime":1611914356000},{"path":"D:\\activiti\\project01\\jeecg-boot-activiti-master\\ant-design-vue-jeecg\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1621061384845},{"path":"D:\\activiti\\project01\\jeecg-boot-activiti-master\\ant-design-vue-jeecg\\node_modules\\babel-loader\\lib\\index.js","mtime":1621061377995},{"path":"D:\\activiti\\project01\\jeecg-boot-activiti-master\\ant-design-vue-jeecg\\node_modules\\@vue\\cli-plugin-eslint\\node_modules\\eslint-loader\\index.js","mtime":1617935819779}],"contextDependencies":[],"result":["function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { AllCells, JVXETypes } from '@/components/jeecg/JVxeTable';\nimport JVxeCellMixins from '../mixins/JVxeCellMixins';\nexport var JVXERenderType = {\n  editer: 'editer',\n  spaner: 'spaner',\n  default: 'default'\n};\n/** 安装所有vxe组件 */\n\nexport function installAllCell(VXETable) {\n  // 遍历所有组件批量注册\n  Object.keys(AllCells).forEach(function (type) {\n    return installOneCell(VXETable, type);\n  });\n}\n/** 安装单个vxe组件 */\n\nexport function installOneCell(VXETable, type) {\n  var switches = getEnhancedMixins(type, 'switches');\n\n  if (switches.editRender === false) {\n    installCellRender(VXETable, type, AllCells[type]);\n  } else {\n    installEditRender(VXETable, type, AllCells[type]);\n  }\n}\n/** 注册可编辑组件 */\n\nexport function installEditRender(VXETable, type, comp, spanComp) {\n  // 获取当前组件的增强\n  var enhanced = getEnhancedMixins(type); // span 组件\n\n  if (!spanComp && AllCells[type + ':span']) {\n    spanComp = AllCells[type + ':span'];\n  } else {\n    spanComp = AllCells[JVXETypes.normal];\n  } // 添加渲染\n\n\n  VXETable.renderer.add(JVXETypes._prefix + type, _objectSpread({\n    // 可编辑模板\n    renderEdit: createRender(comp, enhanced, JVXERenderType.editer),\n    // 显示模板\n    renderCell: createRender(spanComp, enhanced, JVXERenderType.spaner)\n  }, enhanced.installOptions));\n}\n/** 注册普通组件 */\n\nexport function installCellRender(VXETable, type) {\n  var comp = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : AllCells[JVXETypes.normal];\n  // 获取当前组件的增强\n  var enhanced = getEnhancedMixins(type);\n  VXETable.renderer.add(JVXETypes._prefix + type, _objectSpread({\n    // 默认显示模板\n    renderDefault: createRender(comp, enhanced, JVXERenderType.default)\n  }, enhanced.installOptions));\n}\n\nfunction createRender(comp, enhanced, renderType) {\n  return function (h, renderOptions, params) {\n    return [h(comp, {\n      props: {\n        value: params.row[params.column.property],\n        row: params.row,\n        column: params.column,\n        params: params,\n        renderOptions: renderOptions,\n        renderType: renderType\n      }\n    })];\n  };\n} // 已混入的组件增强\n\n\nvar AllCellsMixins = new Map();\n/** 获取某个组件的增强 */\n\nexport function getEnhanced(type) {\n  var cell = AllCells[type];\n\n  if (cell && cell.enhanced) {\n    return cell.enhanced;\n  }\n\n  return null;\n}\n/**\n * 获取某个组件的增强（混入默认值）\n *\n * @param type JVXETypes\n * @param name 可空，增强名称，留空返回所有增强\n */\n\nexport function getEnhancedMixins(type, name) {\n  var getByName = function getByName(e) {\n    return name ? e[name] : e;\n  };\n\n  if (AllCellsMixins.has(type)) {\n    return getByName(AllCellsMixins.get(type));\n  }\n\n  var defEnhanced = JVxeCellMixins.enhanced;\n  var enhanced = getEnhanced(type);\n\n  if (enhanced) {\n    Object.keys(defEnhanced).forEach(function (key) {\n      var def = defEnhanced[key];\n\n      if (enhanced.hasOwnProperty(key)) {\n        // 方法如果存在就不覆盖\n        if (typeof def !== 'function' && typeof def !== 'string') {\n          enhanced[key] = Object.assign({}, def, enhanced[key]);\n        }\n      } else {\n        enhanced[key] = def;\n      }\n    });\n    AllCellsMixins.set(type, enhanced);\n    return getByName(enhanced);\n  }\n\n  AllCellsMixins.set(type, defEnhanced);\n  return getByName(defEnhanced);\n}\n/** 辅助方法：替换${...}变量 */\n\nexport function replaceProps(col, value) {\n  if (value && typeof value === 'string') {\n    var text = value;\n    text = text.replace(/\\${title}/g, col.title);\n    text = text.replace(/\\${key}/g, col.key);\n    text = text.replace(/\\${defaultValue}/g, col.defaultValue);\n    return text;\n  }\n\n  return value;\n}",{"version":3,"sources":["D:/activiti/project01/jeecg-boot-activiti-master/ant-design-vue-jeecg/src/components/jeecg/JVxeTable/utils/cellUtils.js"],"names":["AllCells","JVXETypes","JVxeCellMixins","JVXERenderType","editer","spaner","default","installAllCell","VXETable","Object","keys","forEach","type","installOneCell","switches","getEnhancedMixins","editRender","installCellRender","installEditRender","comp","spanComp","enhanced","normal","renderer","add","_prefix","renderEdit","createRender","renderCell","installOptions","renderDefault","renderType","h","renderOptions","params","props","value","row","column","property","AllCellsMixins","Map","getEnhanced","cell","name","getByName","e","has","get","defEnhanced","key","def","hasOwnProperty","assign","set","replaceProps","col","text","replace","title","defaultValue"],"mappings":"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","sourcesContent":["import { AllCells, JVXETypes } from '@/components/jeecg/JVxeTable'\nimport JVxeCellMixins from '../mixins/JVxeCellMixins'\n\nexport const JVXERenderType = {\n  editer: 'editer',\n  spaner: 'spaner',\n  default: 'default',\n}\n\n/** 安装所有vxe组件 */\nexport function installAllCell(VXETable) {\n  // 遍历所有组件批量注册\n  Object.keys(AllCells).forEach(type => installOneCell(VXETable, type))\n}\n\n/** 安装单个vxe组件 */\nexport function installOneCell(VXETable, type) {\n  const switches = getEnhancedMixins(type, 'switches')\n  if (switches.editRender === false) {\n    installCellRender(VXETable, type, AllCells[type])\n  } else {\n    installEditRender(VXETable, type, AllCells[type])\n  }\n}\n\n/** 注册可编辑组件 */\nexport function installEditRender(VXETable, type, comp, spanComp) {\n  // 获取当前组件的增强\n  const enhanced = getEnhancedMixins(type)\n  // span 组件\n  if (!spanComp && AllCells[type + ':span']) {\n    spanComp = AllCells[type + ':span']\n  } else {\n    spanComp = AllCells[JVXETypes.normal]\n  }\n  // 添加渲染\n  VXETable.renderer.add(JVXETypes._prefix + type, {\n    // 可编辑模板\n    renderEdit: createRender(comp, enhanced, JVXERenderType.editer),\n    // 显示模板\n    renderCell: createRender(spanComp, enhanced, JVXERenderType.spaner),\n    // 增强注册\n    ...enhanced.installOptions,\n  })\n}\n\n/** 注册普通组件 */\nexport function installCellRender(VXETable, type, comp = AllCells[JVXETypes.normal]) {\n  // 获取当前组件的增强\n  const enhanced = getEnhancedMixins(type)\n  VXETable.renderer.add(JVXETypes._prefix + type, {\n    // 默认显示模板\n    renderDefault: createRender(comp, enhanced, JVXERenderType.default),\n    // 增强注册\n    ...enhanced.installOptions,\n  })\n}\n\nfunction createRender(comp, enhanced, renderType) {\n  return function (h, renderOptions, params) {\n    return [h(comp, {\n      props: {\n        value: params.row[params.column.property],\n        row: params.row,\n        column: params.column,\n        params: params,\n        renderOptions: renderOptions,\n        renderType: renderType,\n      }\n    })]\n  }\n}\n\n// 已混入的组件增强\nconst AllCellsMixins = new Map()\n\n/** 获取某个组件的增强 */\nexport function getEnhanced(type) {\n  let cell = AllCells[type]\n  if (cell && cell.enhanced) {\n    return cell.enhanced\n  }\n  return null\n}\n\n/**\n * 获取某个组件的增强（混入默认值）\n *\n * @param type JVXETypes\n * @param name 可空，增强名称，留空返回所有增强\n */\nexport function getEnhancedMixins(type, name) {\n  const getByName = (e) => name ? e[name] : e\n  if (AllCellsMixins.has(type)) {\n    return getByName(AllCellsMixins.get(type))\n  }\n  let defEnhanced = JVxeCellMixins.enhanced\n  let enhanced = getEnhanced(type)\n  if (enhanced) {\n    Object.keys(defEnhanced).forEach(key => {\n      let def = defEnhanced[key]\n      if (enhanced.hasOwnProperty(key)) {\n        // 方法如果存在就不覆盖\n        if (typeof def !== 'function' && typeof def !== 'string') {\n          enhanced[key] = Object.assign({}, def, enhanced[key])\n        }\n      } else {\n        enhanced[key] = def\n      }\n    })\n    AllCellsMixins.set(type, enhanced)\n    return getByName(enhanced)\n  }\n  AllCellsMixins.set(type, defEnhanced)\n  return getByName(defEnhanced)\n}\n\n\n/** 辅助方法：替换${...}变量 */\nexport function replaceProps(col, value) {\n  if (value && typeof value === 'string') {\n    let text = value\n    text = text.replace(/\\${title}/g, col.title)\n    text = text.replace(/\\${key}/g, col.key)\n    text = text.replace(/\\${defaultValue}/g, col.defaultValue)\n    return text\n  }\n  return value\n}\n"]}]}