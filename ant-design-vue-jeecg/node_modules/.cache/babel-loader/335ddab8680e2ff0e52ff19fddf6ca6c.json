{"remainingRequest":"D:\\activiti\\project01\\jeecg-boot-activiti-master\\ant-design-vue-jeecg\\node_modules\\babel-loader\\lib\\index.js!D:\\activiti\\project01\\jeecg-boot-activiti-master\\ant-design-vue-jeecg\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!D:\\activiti\\project01\\jeecg-boot-activiti-master\\ant-design-vue-jeecg\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\activiti\\project01\\jeecg-boot-activiti-master\\ant-design-vue-jeecg\\src\\views\\system\\modules\\SysDataSourceModal.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\activiti\\project01\\jeecg-boot-activiti-master\\ant-design-vue-jeecg\\src\\views\\system\\modules\\SysDataSourceModal.vue","mtime":1611914356000},{"path":"D:\\activiti\\project01\\jeecg-boot-activiti-master\\ant-design-vue-jeecg\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1621061384845},{"path":"D:\\activiti\\project01\\jeecg-boot-activiti-master\\ant-design-vue-jeecg\\node_modules\\babel-loader\\lib\\index.js","mtime":1621061377995},{"path":"D:\\activiti\\project01\\jeecg-boot-activiti-master\\ant-design-vue-jeecg\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1621061384845},{"path":"D:\\activiti\\project01\\jeecg-boot-activiti-master\\ant-design-vue-jeecg\\node_modules\\vue-loader\\lib\\index.js","mtime":1621061372054}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport pick from 'lodash.pick';\nimport { httpAction, postAction } from '@/api/manage';\nimport { validateDuplicateValue } from '@/utils/util';\nexport default {\n  name: 'SysDataSourceModal',\n  components: {},\n  data: function data() {\n    var _this = this;\n\n    return {\n      title: '操作',\n      visible: false,\n      model: {},\n      labelCol: {\n        xs: {\n          span: 24\n        },\n        sm: {\n          span: 5\n        }\n      },\n      wrapperCol: {\n        xs: {\n          span: 24\n        },\n        sm: {\n          span: 16\n        }\n      },\n      confirmLoading: false,\n      form: this.$form.createForm(this),\n      validatorRules: {\n        code: {\n          validateFirst: true,\n          rules: [{\n            required: true,\n            message: '请输入数据源编码!'\n          }, {\n            validator: function validator(rule, value, callback) {\n              var pattern = /^[a-z|A-Z][a-z|A-Z\\d_-]{0,}$/;\n\n              if (!pattern.test(value)) {\n                callback('编码必须以字母开头，可包含数字、下划线、横杠');\n              } else {\n                validateDuplicateValue('sys_data_source', 'code', value, _this.model.id, callback);\n              }\n            }\n          }]\n        },\n        name: {\n          rules: [{\n            required: true,\n            message: '请输入数据源名称!'\n          }]\n        },\n        dbType: {\n          rules: [{\n            required: true,\n            message: '请选择数据库类型!'\n          }]\n        },\n        dbDriver: {\n          rules: [{\n            required: true,\n            message: '请输入驱动类!'\n          }]\n        },\n        dbUrl: {\n          rules: [{\n            required: true,\n            message: '请输入数据源地址!'\n          }]\n        },\n        dbName: {\n          rules: [{\n            required: true,\n            message: '请输入数据库名称!'\n          }]\n        },\n        dbUsername: {\n          rules: [{\n            required: true,\n            message: '请输入用户名!'\n          }]\n        },\n        dbPassword: {\n          rules: [{\n            required: true,\n            message: '请输入密码!'\n          }]\n        }\n      },\n      url: {\n        add: '/sys/dataSource/add',\n        edit: '/sys/dataSource/edit'\n      },\n      dbDriverMap: {\n        // MySQL 数据库\n        '1': {\n          dbDriver: 'com.mysql.jdbc.Driver'\n        },\n        // Oracle\n        '2': {\n          dbDriver: 'oracle.jdbc.OracleDriver'\n        },\n        // SQLServer 数据库\n        '3': {\n          dbDriver: 'com.microsoft.sqlserver.jdbc.SQLServerDriver'\n        }\n      },\n      dbUrlMap: {\n        // MySQL 数据库\n        '1': {\n          dbUrl: 'jdbc:mysql://127.0.0.1:3306/jeecg-boot?characterEncoding=UTF-8&useUnicode=true&useSSL=false'\n        },\n        // Oracle\n        '2': {\n          dbUrl: 'jdbc:oracle:thin:@127.0.0.1:1521:ORCL'\n        },\n        // SQLServer 数据库\n        '3': {\n          dbUrl: 'jdbc:sqlserver://127.0.0.1:1433;SelectMethod=cursor;DatabaseName=jeecgboot'\n        }\n      }\n    };\n  },\n  created: function created() {},\n  methods: {\n    add: function add() {\n      this.edit({});\n    },\n    edit: function edit(record) {\n      var _this2 = this;\n\n      this.form.resetFields();\n      this.model = Object.assign({}, record);\n      this.visible = true;\n      this.$nextTick(function () {\n        _this2.form.setFieldsValue(pick(_this2.model, 'code', 'name', 'remark', 'dbType', 'dbDriver', 'dbUrl', 'dbName', 'dbUsername', 'dbPassword'));\n      });\n    },\n    close: function close() {\n      this.$emit('close');\n      this.visible = false;\n    },\n    handleOk: function handleOk() {\n      var _this3 = this;\n\n      // 触发表单验证\n      this.form.validateFields(function (err, values) {\n        if (!err) {\n          _this3.confirmLoading = true;\n          var formData = Object.assign(_this3.model, values);\n          var httpUrl = _this3.url.add,\n              method = 'post';\n\n          if (_this3.model.id) {\n            httpUrl = _this3.url.edit;\n            method = 'put'; // 由于编码的特殊性，所以不能更改\n\n            formData['code'] = undefined;\n          }\n\n          httpAction(httpUrl, formData, method).then(function (res) {\n            if (res.success) {\n              _this3.$message.success(res.message);\n\n              _this3.$emit('ok');\n\n              _this3.close();\n            } else {\n              _this3.$message.warning(res.message);\n            }\n          }).finally(function () {\n            _this3.confirmLoading = false;\n          });\n        }\n      });\n    },\n    handleCancel: function handleCancel() {\n      this.close();\n    },\n    // 测试数据源配置是否可以正常连接\n    handleTest: function handleTest() {\n      var _this4 = this;\n\n      var keys = ['dbType', 'dbDriver', 'dbUrl', 'dbName', 'dbUsername', 'dbPassword']; // 获取以上字段的值，并清除校验状态\n\n      var fieldsValues = this.form.getFieldsValue(keys);\n      var setFields = {};\n      keys.forEach(function (key) {\n        return setFields[key] = {\n          value: fieldsValues[key],\n          errors: null\n        };\n      }); // 清除校验状态，目的是可以让错误文字闪烁\n\n      this.form.setFields(setFields); // 重新校验\n\n      this.$nextTick(function () {\n        _this4.form.validateFields(keys, function (errors, values) {\n          if (!errors) {\n            var loading = _this4.$message.loading('连接中……', 0);\n\n            postAction('/online/cgreport/api/testConnection', fieldsValues).then(function (res) {\n              if (res.success) {\n                _this4.$message.success('连接成功');\n              } else throw new Error(res.message);\n            }).catch(function (error) {\n              _this4.$warning({\n                title: '连接失败',\n                content: error.message || error\n              });\n            }).finally(function () {\n              return loading();\n            });\n          }\n        });\n      });\n    },\n    // 数据库类型更改时，联动更改数据库驱动\n    handleDbTypeChange: function handleDbTypeChange(val) {\n      var dbDriver = this.dbDriverMap[val];\n      var dbUrl = this.dbUrlMap[val];\n\n      if (dbDriver) {\n        this.form.setFieldsValue(dbDriver);\n      }\n\n      if (dbUrl) {\n        this.form.setFieldsValue(dbUrl);\n      }\n    }\n  }\n};",{"version":3,"sources":["SysDataSourceModal.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n  <a-modal\n    :title=\"title\"\n    :width=\"800\"\n    :visible=\"visible\"\n    :confirmLoading=\"confirmLoading\"\n    @ok=\"handleOk\"\n    @cancel=\"handleCancel\"\n    cancelText=\"关闭\">\n\n    <a-spin :spinning=\"confirmLoading\">\n      <a-form :form=\"form\">\n\n        <a-form-item\n          :labelCol=\"labelCol\"\n          :wrapperCol=\"wrapperCol\"\n          label=\"数据源编码\">\n          <a-input placeholder=\"请输入数据源编码\" :disabled=\"!!model.id\" v-decorator=\"['code', validatorRules.code]\"/>\n        </a-form-item>\n        <a-form-item\n          :labelCol=\"labelCol\"\n          :wrapperCol=\"wrapperCol\"\n          label=\"数据源名称\">\n          <a-input placeholder=\"请输入数据源名称\" v-decorator=\"['name', validatorRules.name]\"/>\n        </a-form-item>\n        <a-form-item\n          :labelCol=\"labelCol\"\n          :wrapperCol=\"wrapperCol\"\n          label=\"数据库类型\">\n          <j-dict-select-tag placeholder=\"请选择数据库类型\" dict-code=\"database_type\" triggerChange v-decorator=\"['dbType', validatorRules.dbType]\" @change=\"handleDbTypeChange\"/>\n        </a-form-item>\n        <a-form-item\n          :labelCol=\"labelCol\"\n          :wrapperCol=\"wrapperCol\"\n          label=\"驱动类\">\n          <a-input placeholder=\"请输入驱动类\" v-decorator=\"['dbDriver', validatorRules.dbDriver]\"/>\n        </a-form-item>\n        <a-form-item\n          :labelCol=\"labelCol\"\n          :wrapperCol=\"wrapperCol\"\n          label=\"数据源地址\">\n          <a-input placeholder=\"请输入数据源地址\" v-decorator=\"['dbUrl', validatorRules.dbUrl]\"/>\n        </a-form-item>\n        <a-form-item\n          :labelCol=\"labelCol\"\n          :wrapperCol=\"wrapperCol\"\n          label=\"数据库名称\">\n          <a-input placeholder=\"请输入数据库名称\" v-decorator=\"['dbName', validatorRules.dbName]\"/>\n        </a-form-item>\n        <a-form-item\n          :labelCol=\"labelCol\"\n          :wrapperCol=\"wrapperCol\"\n          label=\"用户名\">\n          <a-input placeholder=\"请输入用户名\" v-decorator=\"['dbUsername', validatorRules.dbUsername]\"/>\n        </a-form-item>\n        <a-form-item\n          :labelCol=\"labelCol\"\n          :wrapperCol=\"wrapperCol\"\n          label=\"密码\">\n          <a-row :gutter=\"8\">\n            <a-col :span=\"21\">\n              <a-input-password placeholder=\"请输入密码\" v-decorator=\"['dbPassword', validatorRules.dbPassword]\"/>\n            </a-col>\n            <a-col :span=\"3\">\n              <a-button type=\"primary\" size=\"small\" style=\"width: 100%\" @click=\"handleTest\">测试</a-button>\n            </a-col>\n          </a-row>\n        </a-form-item>\n        <a-form-item\n          :labelCol=\"labelCol\"\n          :wrapperCol=\"wrapperCol\"\n          label=\"备注\">\n          <a-textarea placeholder=\"请输入备注\" v-decorator=\"['remark', {}]\"/>\n        </a-form-item>\n      </a-form>\n    </a-spin>\n  </a-modal>\n</template>\n\n<script>\n  import pick from 'lodash.pick'\n  import { httpAction, postAction } from '@/api/manage'\n  import { validateDuplicateValue } from '@/utils/util'\n\n  export default {\n    name: 'SysDataSourceModal',\n    components: {},\n    data() {\n      return {\n        title: '操作',\n        visible: false,\n        model: {},\n        labelCol: {\n          xs: { span: 24 },\n          sm: { span: 5 },\n        },\n        wrapperCol: {\n          xs: { span: 24 },\n          sm: { span: 16 },\n        },\n\n        confirmLoading: false,\n        form: this.$form.createForm(this),\n        validatorRules: {\n          code: {\n            validateFirst: true,\n            rules: [\n              { required: true, message: '请输入数据源编码!' },\n              {\n                validator: (rule, value, callback) => {\n                  let pattern = /^[a-z|A-Z][a-z|A-Z\\d_-]{0,}$/\n                  if (!pattern.test(value)) {\n                    callback('编码必须以字母开头，可包含数字、下划线、横杠')\n                  } else {\n                    validateDuplicateValue('sys_data_source', 'code', value, this.model.id, callback)\n                  }\n                }\n              }\n            ]\n          },\n          name: { rules: [{ required: true, message: '请输入数据源名称!' }] },\n          dbType: { rules: [{ required: true, message: '请选择数据库类型!' }] },\n          dbDriver: { rules: [{ required: true, message: '请输入驱动类!' }] },\n          dbUrl: { rules: [{ required: true, message: '请输入数据源地址!' }] },\n          dbName: { rules: [{ required: true, message: '请输入数据库名称!' }] },\n          dbUsername: { rules: [{ required: true, message: '请输入用户名!' }] },\n          dbPassword: { rules: [{ required: true, message: '请输入密码!' }] }\n        },\n        url: {\n          add: '/sys/dataSource/add',\n          edit: '/sys/dataSource/edit',\n        },\n        dbDriverMap: {\n          // MySQL 数据库\n          '1': { dbDriver: 'com.mysql.jdbc.Driver' },\n          // Oracle\n          '2': { dbDriver: 'oracle.jdbc.OracleDriver' },\n          // SQLServer 数据库\n          '3': { dbDriver: 'com.microsoft.sqlserver.jdbc.SQLServerDriver' },\n        },\n        dbUrlMap: {\n          // MySQL 数据库\n          '1': { dbUrl: 'jdbc:mysql://127.0.0.1:3306/jeecg-boot?characterEncoding=UTF-8&useUnicode=true&useSSL=false' },\n          // Oracle\n          '2': { dbUrl: 'jdbc:oracle:thin:@127.0.0.1:1521:ORCL' },\n          // SQLServer 数据库\n          '3': { dbUrl: 'jdbc:sqlserver://127.0.0.1:1433;SelectMethod=cursor;DatabaseName=jeecgboot' }\n        }\n      }\n    },\n    created() {\n    },\n    methods: {\n      add() {\n        this.edit({})\n      },\n      edit(record) {\n        this.form.resetFields()\n        this.model = Object.assign({}, record)\n        this.visible = true\n        this.$nextTick(() => {\n          this.form.setFieldsValue(pick(this.model, 'code', 'name', 'remark', 'dbType', 'dbDriver', 'dbUrl', 'dbName', 'dbUsername', 'dbPassword'))\n        })\n      },\n      close() {\n        this.$emit('close')\n        this.visible = false\n      },\n      handleOk() {\n        // 触发表单验证\n        this.form.validateFields((err, values) => {\n          if (!err) {\n            this.confirmLoading = true\n            let formData = Object.assign(this.model, values)\n            let httpUrl = this.url.add, method = 'post'\n            if (this.model.id) {\n              httpUrl = this.url.edit\n              method = 'put'\n              // 由于编码的特殊性，所以不能更改\n              formData['code'] = undefined\n            }\n            httpAction(httpUrl, formData, method).then((res) => {\n              if (res.success) {\n                this.$message.success(res.message)\n                this.$emit('ok')\n                this.close()\n              } else {\n                this.$message.warning(res.message)\n              }\n            }).finally(() => {\n              this.confirmLoading = false\n            })\n          }\n        })\n      },\n      handleCancel() {\n        this.close()\n      },\n      // 测试数据源配置是否可以正常连接\n      handleTest() {\n        let keys = ['dbType', 'dbDriver', 'dbUrl', 'dbName', 'dbUsername', 'dbPassword']\n        // 获取以上字段的值，并清除校验状态\n        let fieldsValues = this.form.getFieldsValue(keys)\n        let setFields = {}\n        keys.forEach(key => setFields[key] = { value: fieldsValues[key], errors: null })\n        // 清除校验状态，目的是可以让错误文字闪烁\n        this.form.setFields(setFields)\n        // 重新校验\n        this.$nextTick(() => {\n          this.form.validateFields(keys, (errors, values) => {\n            if (!errors) {\n              let loading = this.$message.loading('连接中……', 0)\n              postAction('/online/cgreport/api/testConnection', fieldsValues).then(res => {\n                if (res.success) {\n                  this.$message.success('连接成功')\n                } else throw new Error(res.message)\n              }).catch(error => {\n                this.$warning({ title: '连接失败', content: error.message || error })\n              }).finally(() => loading())\n            }\n          })\n        })\n      },\n      // 数据库类型更改时，联动更改数据库驱动\n      handleDbTypeChange(val) {\n        let dbDriver = this.dbDriverMap[val]\n        let dbUrl = this.dbUrlMap[val]\n        if (dbDriver) {\n          this.form.setFieldsValue(dbDriver)\n        }\n        if (dbUrl) {\n          this.form.setFieldsValue(dbUrl)\n        }\n      },\n    }\n  }\n</script>\n\n<style lang=\"less\" scoped></style>"],"sourceRoot":"src/views/system/modules"}]}