{"remainingRequest":"D:\\activiti\\project01\\jeecg-boot-activiti-master\\ant-design-vue-jeecg\\node_modules\\babel-loader\\lib\\index.js!D:\\activiti\\project01\\jeecg-boot-activiti-master\\ant-design-vue-jeecg\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!D:\\activiti\\project01\\jeecg-boot-activiti-master\\ant-design-vue-jeecg\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\activiti\\project01\\jeecg-boot-activiti-master\\ant-design-vue-jeecg\\src\\views\\jeecg\\JVxeDemo\\layout-demo\\Template4.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\activiti\\project01\\jeecg-boot-activiti-master\\ant-design-vue-jeecg\\src\\views\\jeecg\\JVxeDemo\\layout-demo\\Template4.vue","mtime":1611914356000},{"path":"D:\\activiti\\project01\\jeecg-boot-activiti-master\\ant-design-vue-jeecg\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1621061384845},{"path":"D:\\activiti\\project01\\jeecg-boot-activiti-master\\ant-design-vue-jeecg\\node_modules\\babel-loader\\lib\\index.js","mtime":1621061377995},{"path":"D:\\activiti\\project01\\jeecg-boot-activiti-master\\ant-design-vue-jeecg\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1621061384845},{"path":"D:\\activiti\\project01\\jeecg-boot-activiti-master\\ant-design-vue-jeecg\\node_modules\\vue-loader\\lib\\index.js","mtime":1621061372054}],"contextDependencies":[],"result":["var _watch;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport { getAction } from '@api/manage';\nimport { JVXETypes } from '@/components/jeecg/JVxeTable';\nexport default {\n  name: 'Template4',\n  data: function data() {\n    return {\n      table1: {\n        // 是否正在加载\n        loading: false,\n        // 分页器参数\n        pagination: {\n          // 当前页码\n          current: 1,\n          // 每页的条数\n          pageSize: 200,\n          // 可切换的条数\n          pageSizeOptions: ['10', '20', '30', '100', '200'],\n          // 数据总数（目前并不知道真实的总数，所以先填写0，在后台查出来后再赋值）\n          total: 0\n        },\n        // 最后选中的行\n        lastRow: null,\n        // 选择的行\n        selectedRows: [],\n        // 数据源，控制表格的数据\n        dataSource: [],\n        // 列配置，控制表格显示的列\n        columns: [{\n          key: 'num',\n          title: '序号',\n          width: '80px'\n        }, {\n          // 字段key，跟后台数据的字段名匹配\n          key: 'ship_name',\n          // 列的标题\n          title: '船名',\n          // 列的宽度\n          width: '180px',\n          // 如果加上了该属性，就代表当前单元格是可编辑的，type就是表单的类型，input就是简单的输入框\n          type: JVXETypes.input\n        }, {\n          key: 'call',\n          title: '呼叫',\n          width: '80px',\n          type: JVXETypes.input\n        }, {\n          key: 'len',\n          title: '长',\n          width: '80px',\n          type: JVXETypes.input\n        }, {\n          key: 'ton',\n          title: '吨',\n          width: '120px',\n          type: JVXETypes.input\n        }, {\n          key: 'payer',\n          title: '付款方',\n          width: '120px',\n          type: JVXETypes.input\n        }, {\n          key: 'count',\n          title: '数',\n          width: '40px'\n        }, {\n          key: 'company',\n          title: '公司',\n          // 最小宽度，与宽度不同的是，这个不是固定的宽度，如果表格有多余的空间，会平均分配给设置了 minWidth 的列\n          // 如果要做占满表格的列可以这么写\n          minWidth: '180px',\n          type: JVXETypes.input\n        }, {\n          key: 'trend',\n          title: '动向',\n          width: '120px',\n          type: JVXETypes.input\n        }]\n      },\n      // 子级表的配置信息 （配置和主表的完全一致，就不写冗余的注释了）\n      table2: {\n        loading: false,\n        pagination: {\n          current: 1,\n          pageSize: 200,\n          pageSizeOptions: ['100', '200'],\n          total: 0\n        },\n        selectedRows: [],\n        dataSource: [],\n        columns: [{\n          key: 'dd_num',\n          title: '调度序号',\n          width: '120px'\n        }, {\n          key: 'tug',\n          title: '拖轮',\n          width: '180px',\n          type: JVXETypes.input\n        }, {\n          key: 'work_start_time',\n          title: '作业开始时间',\n          width: '180px',\n          type: JVXETypes.input\n        }, {\n          key: 'work_stop_time',\n          title: '作业结束时间',\n          width: '180px',\n          type: JVXETypes.input\n        }, {\n          key: 'type',\n          title: '船舶分类',\n          width: '120px',\n          type: JVXETypes.input\n        }, {\n          key: 'port_area',\n          title: '所属港区',\n          width: '120px',\n          type: JVXETypes.input\n        }]\n      },\n      table3: {\n        // 最后选中的行\n        lastRow: null,\n        // 选择的行\n        selectedRows: []\n      },\n      table4: {\n        loading: false,\n        pagination: {\n          current: 1,\n          pageSize: 200,\n          pageSizeOptions: ['100', '200'],\n          total: 0\n        },\n        selectedRows: [],\n        dataSource: [],\n        columns: [{\n          key: 'dd_num',\n          title: '调度序号',\n          width: '120px'\n        }, {\n          key: 'tug',\n          title: '拖轮',\n          width: '180px',\n          type: JVXETypes.input\n        }, {\n          key: 'work_start_time',\n          title: '作业开始时间',\n          width: '180px',\n          type: JVXETypes.input\n        }, {\n          key: 'work_stop_time',\n          title: '作业结束时间',\n          width: '180px',\n          type: JVXETypes.input\n        }, {\n          key: 'type',\n          title: '船舶分类',\n          width: '120px',\n          type: JVXETypes.input\n        }, {\n          key: 'port_area',\n          title: '所属港区',\n          width: '120px',\n          type: JVXETypes.input\n        }]\n      },\n      // 查询url地址\n      url: {\n        getData: '/mock/vxe/getData'\n      }\n    };\n  },\n  // 监听器\n  watch: (_watch = {}, _defineProperty(_watch, 'table1.lastRow', function table1LastRow() {\n    this.loadTable2Data();\n  }), _defineProperty(_watch, 'table3.lastRow', function table3LastRow() {\n    this.loadTable4Data();\n  }), _watch),\n  created: function created() {\n    this.loadTable1Data();\n  },\n  methods: {\n    // 加载table1左上【主表】的数据\n    loadTable1Data: function loadTable1Data() {\n      var _this = this;\n\n      // 封装查询条件\n      var formData = {\n        pageNo: this.table1.pagination.current,\n        pageSize: this.table1.pagination.pageSize\n      }; // 调用查询数据接口\n\n      this.table1.loading = true;\n      getAction(this.url.getData, formData).then(function (res) {\n        if (res.success) {\n          // 后台查询回来的 total，数据总数量\n          _this.table1.pagination.total = res.result.total; // 将查询的数据赋值给 dataSource\n\n          _this.table1.dataSource = res.result.records; // 重置选择\n\n          _this.table1.selectedRows = [];\n        } else {\n          _this.$error({\n            title: '主表查询失败',\n            content: res.message\n          });\n        }\n      }).finally(function () {\n        // 这里是无论成功或失败都会执行的方法，在这里关闭loading\n        _this.table1.loading = false;\n      });\n    },\n    // 当table1左上【主表】分页参数变化时触发的事件\n    handleTable1PageChange: function handleTable1PageChange(event) {\n      // 重新赋值\n      this.table1.pagination.current = event.current;\n      this.table1.pagination.pageSize = event.pageSize; // 查询数据\n\n      this.loadTable1Data();\n    },\n    // table1左上【主表】当选择的行变化时触发的事件\n    handleTable1SelectRowChange: function handleTable1SelectRowChange(event) {\n      this.handleTableSelectRowChange(this.table1, event);\n    },\n    // 加载table2左下【子表】的数据，根据主表的id进行查询\n    loadTable2Data: function loadTable2Data() {\n      var _this2 = this;\n\n      // 如果主表没有选择，则不查询\n      var selectedRows = this.table1.selectedRows;\n\n      if (!selectedRows || selectedRows.length === 0) {\n        this.table2.pagination.total = 0;\n        this.table2.dataSource = [];\n        this.table2.selectedRows = [];\n        return;\n      } else if (this.table1.lastRow == null) {\n        this.table1.lastRow = selectedRows[selectedRows.length - 1];\n      }\n\n      var formData = {\n        parentId: this.table1.lastRow.id,\n        pageNo: this.table2.pagination.current,\n        pageSize: this.table2.pagination.pageSize\n      };\n      this.table2.loading = true;\n      getAction(this.url.getData, formData).then(function (res) {\n        if (res.success) {\n          _this2.table2.pagination.total = res.result.total;\n          _this2.table2.dataSource = res.result.records;\n          _this2.table2.selectedRows = [];\n        } else {\n          _this2.$error({\n            title: '子表查询失败',\n            content: res.message\n          });\n        }\n      }).finally(function () {\n        _this2.table2.loading = false;\n      });\n    },\n    // 当table2左下【子表】分页参数变化时触发的事件\n    handleTable2PageChange: function handleTable2PageChange(event) {\n      // 重新赋值\n      this.table2.pagination.current = event.current;\n      this.table2.pagination.pageSize = event.pageSize; // 查询数据\n\n      this.loadTable2Data();\n    },\n    // table3右上【主表】当选择的行变化时触发的事件\n    handleTable3SelectRowChange: function handleTable3SelectRowChange(event) {\n      this.handleTableSelectRowChange(this.table3, event);\n    },\n    // 加载table4右下【子表】的数据，根据主表的id进行查询\n    loadTable4Data: function loadTable4Data() {\n      var _this3 = this;\n\n      var parentIds = []; // 如果主表没有选择，则不查询\n\n      var selectedRows = this.table3.selectedRows;\n\n      if (!selectedRows || selectedRows.length === 0) {\n        this.table4.pagination.total = 0;\n        this.table4.dataSource = [];\n        this.table4.selectedRows = [];\n        return;\n      } else if (this.table3.lastRow == null) {\n        this.table3.lastRow = selectedRows[selectedRows.length - 1];\n      }\n\n      var formData = {\n        parentId: this.table3.lastRow.id,\n        pageNo: this.table4.pagination.current,\n        pageSize: this.table4.pagination.pageSize\n      };\n      this.table4.loading = true;\n      getAction(this.url.getData, formData).then(function (res) {\n        if (res.success) {\n          _this3.table4.pagination.total = res.result.total;\n          _this3.table4.dataSource = res.result.records;\n          _this3.table4.selectedRows = [];\n        } else {\n          _this3.$error({\n            title: '子表查询失败',\n            content: res.message\n          });\n        }\n      }).finally(function () {\n        _this3.table4.loading = false;\n      });\n    },\n    // 当table4右下【子表】分页参数变化时触发的事件\n    handleTable4PageChange: function handleTable4PageChange(event) {\n      // 重新赋值\n      this.table4.pagination.current = event.current;\n      this.table4.pagination.pageSize = event.pageSize; // 查询数据\n\n      this.loadTable4Data();\n    },\n\n    /** 公共方法：处理表格选中变化事件 */\n    handleTableSelectRowChange: function handleTableSelectRowChange(table, event) {\n      var row = event.row,\n          action = event.action,\n          selectedRows = event.selectedRows,\n          $table = event.$table; // 获取最后一个选中的\n\n      var lastSelected = selectedRows[selectedRows.length - 1];\n\n      if (action === 'selected') {\n        table.lastRow = row;\n      } else if (action === 'selected-all') {\n        // 取消全选\n        if (selectedRows.length === 0) {\n          table.lastRow = null;\n        } else if (!table.lastRow) {\n          table.lastRow = lastSelected;\n        }\n      } else if (action === 'unselected' && row === table.lastRow) {\n        table.lastRow = lastSelected;\n      }\n\n      $table.setCurrentRow(table.lastRow);\n      table.selectedRows = selectedRows;\n    }\n  }\n};",{"version":3,"sources":["Template4.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n  <a-card :bordered=\"false\">\n\n    <a-row :gutter=\"8\">\n      <a-col :span=\"12\">\n        <!-- 左上父 -->\n        <j-vxe-table\n          toolbar\n          row-number\n          row-selection\n          click-select-row\n          highlight-current-row\n          :radio-config=\"{highlight: false}\"\n          :checkbox-config=\"{highlight: false}\"\n          :height=\"340\"\n          :loading=\"table1.loading\"\n          :columns=\"table1.columns\"\n          :dataSource=\"table1.dataSource\"\n          :pagination=\"table1.pagination\"\n          style=\"margin-bottom: 8px;\"\n          @pageChange=\"handleTable1PageChange\"\n          @selectRowChange=\"handleTable1SelectRowChange\"\n        />\n        <!-- 左下子 -->\n        <j-vxe-table\n          toolbar\n          row-number\n          row-selection\n          click-select-row\n          :height=\"350\"\n          :loading=\"table2.loading\"\n          :columns=\"table2.columns\"\n          :dataSource=\"table2.dataSource\"\n          :pagination=\"table2.pagination\"\n          @pageChange=\"handleTable2PageChange\"\n        />\n      </a-col>\n      <!-- 左侧父选择的数据展示在这里 -->\n      <a-col :span=\"12\">\n        <!-- 右上父 -->\n        <j-vxe-table\n          row-number\n          row-selection\n          click-select-row\n          highlight-current-row\n          :radio-config=\"{highlight: false}\"\n          :checkbox-config=\"{highlight: false}\"\n          :height=\"340\"\n          :columns=\"table1.columns\"\n          :dataSource=\"table1.selectedRows\"\n          style=\"margin: 40px 0 8px;\"\n          @selectRowChange=\"handleTable3SelectRowChange\"\n        />\n        <!-- 右下子 -->\n        <j-vxe-table\n          toolbar\n          row-number\n          row-selection\n          click-select-row\n          :height=\"350\"\n          :loading=\"table4.loading\"\n          :columns=\"table4.columns\"\n          :dataSource=\"table4.dataSource\"\n          :pagination=\"table4.pagination\"\n          style=\"margin: 48px 0 0;\"\n        />\n      </a-col>\n    </a-row>\n\n  </a-card>\n</template>\n\n<script>\n  import { getAction } from '@api/manage'\n  import { JVXETypes } from '@/components/jeecg/JVxeTable'\n\n  export default {\n    name: 'Template4',\n    data() {\n      return {\n        table1: {\n          // 是否正在加载\n          loading: false,\n          // 分页器参数\n          pagination: {\n            // 当前页码\n            current: 1,\n            // 每页的条数\n            pageSize: 200,\n            // 可切换的条数\n            pageSizeOptions: ['10', '20', '30', '100', '200'],\n            // 数据总数（目前并不知道真实的总数，所以先填写0，在后台查出来后再赋值）\n            total: 0,\n          },\n          // 最后选中的行\n          lastRow: null,\n          // 选择的行\n          selectedRows: [],\n          // 数据源，控制表格的数据\n          dataSource: [],\n          // 列配置，控制表格显示的列\n          columns: [\n            {key: 'num', title: '序号', width: '80px'},\n            {\n              // 字段key，跟后台数据的字段名匹配\n              key: 'ship_name',\n              // 列的标题\n              title: '船名',\n              // 列的宽度\n              width: '180px',\n              // 如果加上了该属性，就代表当前单元格是可编辑的，type就是表单的类型，input就是简单的输入框\n              type: JVXETypes.input\n            },\n            {key: 'call', title: '呼叫', width: '80px', type: JVXETypes.input},\n            {key: 'len', title: '长', width: '80px', type: JVXETypes.input},\n            {key: 'ton', title: '吨', width: '120px', type: JVXETypes.input},\n            {key: 'payer', title: '付款方', width: '120px', type: JVXETypes.input},\n            {key: 'count', title: '数', width: '40px'},\n            {\n              key: 'company',\n              title: '公司',\n              // 最小宽度，与宽度不同的是，这个不是固定的宽度，如果表格有多余的空间，会平均分配给设置了 minWidth 的列\n              // 如果要做占满表格的列可以这么写\n              minWidth: '180px',\n              type: JVXETypes.input\n            },\n            {key: 'trend', title: '动向', width: '120px', type: JVXETypes.input},\n          ],\n        },\n        // 子级表的配置信息 （配置和主表的完全一致，就不写冗余的注释了）\n        table2: {\n          loading: false,\n          pagination: {current: 1, pageSize: 200, pageSizeOptions: ['100', '200'], total: 0},\n          selectedRows: [],\n          dataSource: [],\n          columns: [\n            {key: 'dd_num', title: '调度序号', width: '120px'},\n            {key: 'tug', title: '拖轮', width: '180px', type: JVXETypes.input},\n            {key: 'work_start_time', title: '作业开始时间', width: '180px', type: JVXETypes.input},\n            {key: 'work_stop_time', title: '作业结束时间', width: '180px', type: JVXETypes.input},\n            {key: 'type', title: '船舶分类', width: '120px', type: JVXETypes.input},\n            {key: 'port_area', title: '所属港区', width: '120px', type: JVXETypes.input},\n          ],\n        },\n        table3: {\n          // 最后选中的行\n          lastRow: null,\n          // 选择的行\n          selectedRows: [],\n        },\n        table4: {\n          loading: false,\n          pagination: {current: 1, pageSize: 200, pageSizeOptions: ['100', '200'], total: 0},\n          selectedRows: [],\n          dataSource: [],\n          columns: [\n            {key: 'dd_num', title: '调度序号', width: '120px'},\n            {key: 'tug', title: '拖轮', width: '180px', type: JVXETypes.input},\n            {key: 'work_start_time', title: '作业开始时间', width: '180px', type: JVXETypes.input},\n            {key: 'work_stop_time', title: '作业结束时间', width: '180px', type: JVXETypes.input},\n            {key: 'type', title: '船舶分类', width: '120px', type: JVXETypes.input},\n            {key: 'port_area', title: '所属港区', width: '120px', type: JVXETypes.input},\n          ],\n        },\n        // 查询url地址\n        url: {\n          getData: '/mock/vxe/getData',\n        },\n      }\n    },\n    // 监听器\n    watch: {\n      // 监听table1 左上【主表】选择的数据发生了变化\n      ['table1.lastRow']() {\n        this.loadTable2Data()\n      },\n      // 监听table3 右上【主表】选择的数据发生了变化\n      ['table3.lastRow']() {\n        this.loadTable4Data()\n      },\n\n    },\n    created() {\n      this.loadTable1Data()\n    },\n    methods: {\n\n      // 加载table1左上【主表】的数据\n      loadTable1Data() {\n        // 封装查询条件\n        let formData = {\n          pageNo: this.table1.pagination.current,\n          pageSize: this.table1.pagination.pageSize\n        }\n        // 调用查询数据接口\n        this.table1.loading = true\n        getAction(this.url.getData, formData).then(res => {\n          if (res.success) {\n            // 后台查询回来的 total，数据总数量\n            this.table1.pagination.total = res.result.total\n            // 将查询的数据赋值给 dataSource\n            this.table1.dataSource = res.result.records\n            // 重置选择\n            this.table1.selectedRows = []\n          } else {\n            this.$error({title: '主表查询失败', content: res.message})\n          }\n        }).finally(() => {\n          // 这里是无论成功或失败都会执行的方法，在这里关闭loading\n          this.table1.loading = false\n        })\n      },\n\n\n      // 当table1左上【主表】分页参数变化时触发的事件\n      handleTable1PageChange(event) {\n        // 重新赋值\n        this.table1.pagination.current = event.current\n        this.table1.pagination.pageSize = event.pageSize\n        // 查询数据\n        this.loadTable1Data()\n      },\n\n\n      // table1左上【主表】当选择的行变化时触发的事件\n      handleTable1SelectRowChange(event) {\n        this.handleTableSelectRowChange(this.table1, event)\n      },\n\n\n      // 加载table2左下【子表】的数据，根据主表的id进行查询\n      loadTable2Data() {\n        // 如果主表没有选择，则不查询\n        let selectedRows = this.table1.selectedRows\n        if (!selectedRows || selectedRows.length === 0) {\n          this.table2.pagination.total = 0\n          this.table2.dataSource = []\n          this.table2.selectedRows = []\n          return\n        } else if (this.table1.lastRow == null) {\n          this.table1.lastRow = selectedRows[selectedRows.length - 1]\n        }\n        let formData = {\n          parentId: this.table1.lastRow.id,\n          pageNo: this.table2.pagination.current,\n          pageSize: this.table2.pagination.pageSize\n        }\n        this.table2.loading = true\n        getAction(this.url.getData, formData).then(res => {\n          if (res.success) {\n            this.table2.pagination.total = res.result.total\n            this.table2.dataSource = res.result.records\n            this.table2.selectedRows = []\n          } else {\n            this.$error({title: '子表查询失败', content: res.message})\n          }\n        }).finally(() => {\n          this.table2.loading = false\n        })\n      },\n\n      // 当table2左下【子表】分页参数变化时触发的事件\n      handleTable2PageChange(event) {\n        // 重新赋值\n        this.table2.pagination.current = event.current\n        this.table2.pagination.pageSize = event.pageSize\n        // 查询数据\n        this.loadTable2Data()\n      },\n\n\n      // table3右上【主表】当选择的行变化时触发的事件\n      handleTable3SelectRowChange(event) {\n        this.handleTableSelectRowChange(this.table3, event)\n      },\n\n\n      // 加载table4右下【子表】的数据，根据主表的id进行查询\n      loadTable4Data() {\n        let parentIds = []\n        // 如果主表没有选择，则不查询\n        let selectedRows = this.table3.selectedRows\n        if (!selectedRows || selectedRows.length === 0) {\n          this.table4.pagination.total = 0\n          this.table4.dataSource = []\n          this.table4.selectedRows = []\n          return\n        } else if (this.table3.lastRow == null) {\n          this.table3.lastRow = selectedRows[selectedRows.length - 1]\n        }\n        let formData = {\n          parentId: this.table3.lastRow.id,\n          pageNo: this.table4.pagination.current,\n          pageSize: this.table4.pagination.pageSize\n        }\n        this.table4.loading = true\n        getAction(this.url.getData, formData).then(res => {\n          if (res.success) {\n            this.table4.pagination.total = res.result.total\n            this.table4.dataSource = res.result.records\n            this.table4.selectedRows = []\n          } else {\n            this.$error({title: '子表查询失败', content: res.message})\n          }\n        }).finally(() => {\n          this.table4.loading = false\n        })\n      },\n\n\n      // 当table4右下【子表】分页参数变化时触发的事件\n      handleTable4PageChange(event) {\n        // 重新赋值\n        this.table4.pagination.current = event.current\n        this.table4.pagination.pageSize = event.pageSize\n        // 查询数据\n        this.loadTable4Data()\n      },\n\n      /** 公共方法：处理表格选中变化事件 */\n      handleTableSelectRowChange(table, event) {\n        let {row, action, selectedRows, $table} = event\n        // 获取最后一个选中的\n        let lastSelected = selectedRows[selectedRows.length - 1]\n        if (action === 'selected') {\n          table.lastRow = row\n        } else if (action === 'selected-all') {\n          // 取消全选\n          if (selectedRows.length === 0) {\n            table.lastRow = null\n          } else if (!table.lastRow) {\n            table.lastRow = lastSelected\n          }\n        } else if (action === 'unselected' && row === table.lastRow) {\n          table.lastRow = lastSelected\n        }\n        $table.setCurrentRow(table.lastRow)\n        table.selectedRows = selectedRows\n      },\n\n    }\n  }\n</script>\n\n<style scoped>\n\n</style>"],"sourceRoot":"src/views/jeecg/JVxeDemo/layout-demo"}]}