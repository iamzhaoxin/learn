{"remainingRequest":"D:\\activiti\\project01\\jeecg-boot-activiti-master\\ant-design-vue-jeecg\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\activiti\\project01\\jeecg-boot-activiti-master\\ant-design-vue-jeecg\\src\\extends\\cesium\\CesiumDemo.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\activiti\\project01\\jeecg-boot-activiti-master\\ant-design-vue-jeecg\\src\\extends\\cesium\\CesiumDemo.vue","mtime":1611914356000},{"path":"D:\\activiti\\project01\\jeecg-boot-activiti-master\\ant-design-vue-jeecg\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1621061384845},{"path":"D:\\activiti\\project01\\jeecg-boot-activiti-master\\ant-design-vue-jeecg\\node_modules\\babel-loader\\lib\\index.js","mtime":1621061377995},{"path":"D:\\activiti\\project01\\jeecg-boot-activiti-master\\ant-design-vue-jeecg\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1621061384845},{"path":"D:\\activiti\\project01\\jeecg-boot-activiti-master\\ant-design-vue-jeecg\\node_modules\\vue-loader\\lib\\index.js","mtime":1621061372054}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\n  import chinajson from '@/extends/cesium/china.json'\n  import pointjson from '@/extends/cesium/point.json'\n  import riverjson from '@/extends/cesium/river.json'\n  import nsbdjson from '@/extends/cesium/nsbd.json'\n  import waterNormalsjpg from '@/extends/cesium/waterNormals.jpg'\n  import yellowgif from '@/extends/cesium/yellow.gif'\n    export default {\n      props: {\n      },\n      name: \"CesiumDemo\",\n      data(){\n        return {\n          viewer:null,\n          pick2: {},\n          mouse_state:{innerText:''},\n          rotates: false\n        }\n      },\n      mounted() {\n        const _this = this;\n        //'GoogleAerial','BingAerial', 'EsriAerial', 'TianAerial',| 'OSMStandard', 'MapStreets, 'OSMCycle'\n        const url = \"http://118.190.55.100:8888/tileservice/imagery/OSMCycle/{z}/{x}/{y}\";\n        this.viewer = new Cesium.Viewer(\"cesiumContainer\", {\n          animation: false,        //是否创建动画小器件，左下角仪表\n          timeline: false,         //是否显示时间线控件\n          fullscreenButton: false, //右下角全屏按钮\n          geocoder: false,         //是否显示地名查找控件\n          baseLayerPicker: false,  //是否显示图层选择控件\n          imageryProvider: new Cesium.UrlTemplateImageryProvider({url:url}),\n          terrainProvider : Cesium.createWorldTerrain({ //立体\n            requestVertexNormals: true\n          })\n        });\n        //去cesium logo水印\n        this.viewer.cesiumWidget.creditContainer.style.display = \"none\";\n        // 默认弹窗去除\n        document.querySelector('.cesium-infoBox').style.display = \"none\";\n        //事件 https://www.cnblogs.com/-llf/p/10431978.html\n        var handler = new Cesium.ScreenSpaceEventHandler(this.viewer.scene.canvas);\n        handler.removeInputAction(Cesium.ScreenSpaceEventType.LEFT_CLICK);\n        handler.setInputAction(function(e){\n          console.log('左键单击事件：',e,e.position);\n          var pick = _this.viewer.scene.pick(e.position);\n          if (Cesium.defined(pick)){\n            _this.pick2 = {\n              id:  pick.id.id,\n              name:  pick.id.name,\n            }\n            if (pick.id.properties) _this.pick2.properties = pick.id.properties.getValue();\n            console.log('选中',_this.pick2)\n          }\n        },Cesium.ScreenSpaceEventType.LEFT_CLICK);\n        handler.setInputAction(function(movement) {\n          var ellipsoid = _this.viewer.scene.globe.ellipsoid;\n          //通过指定的椭球或者地图对应的坐标系，将鼠标的二维坐标转换为对应椭球体三维坐标\n          var cartesian = _this.viewer.camera.pickEllipsoid(movement.endPosition, ellipsoid);\n          if (cartesian) {\n            //将笛卡尔坐标转换为地理坐标\n            var cartographic = ellipsoid.cartesianToCartographic(cartesian);\n            //将弧度转为度的十进制度表示\n            var longitudeString = Cesium.Math.toDegrees(cartographic.longitude).toFixed(3);\n            var latitudeString = Cesium.Math.toDegrees(cartographic.latitude).toFixed(3);\n            //获取相机高度\n            var height = Math.ceil(_this.viewer.camera.positionCartographic.height).toFixed(3);\n            _this.mouse_state.innerText = '移动：(' + longitudeString + ', ' + latitudeString + \",\" + height + ')';\n          }else {\n            _this.mouse_state.innerText = \"\";\n          }\n        }, Cesium.ScreenSpaceEventType.MOUSE_MOVE);\n      },\n      watch:{\n      },\n      methods: {\n        getMapInstance: function(pick2){\n          if(pick2 != null && pick2.name !=null && pick2.name.sdLon != null && pick2.name.sdLat != null){\n            this.rotate(pick2.name.sdLon,pick2.name.sdLat);\n          }else{\n            var startTime = Cesium.JulianDate.fromDate(new Date());\n            var stopTime = Cesium.JulianDate.addSeconds(startTime, 0.1, new Cesium.JulianDate());\n            this.viewer.clock.stopTime = stopTime.clone();\n          }\n        },\n        rotate: function (lng,lat) {\n          var _this = this;\n          // var viewer = new Cesium.Viewer('cesiumContainer');\n          var options = {\n\n            lng: lng,\n            lat: lat,\n            height: 11110.8,\n            heading: 0.0,\n            pitch: 0.0,\n            roll: 0.0\n          };\n          var position = Cesium.Cartesian3.fromDegrees(options.lng, options.lat, options.height);\n          // 相机看点的角度，如果大于0那么则是从地底往上看，所以要为负值，这里取-30度\n          var pitch = Cesium.Math.toRadians(-20);\n          // 给定飞行一周所需时间，比如10s, 那么每秒转动度数\n          var angle = 210 / 30;\n          // 给定相机距离点多少距离飞行，这里取值为5000m\n          var distance = 5000;\n          var startTime = Cesium.JulianDate.fromDate(new Date());\n\n          // var stopTime = Cesium.JulianDate.addSeconds(startTime, 1, new Cesium.JulianDate());\n\n          this.viewer.clock.startTime = startTime.clone();  // 开始时间\n          // this.viewer.clock.stopTime = stopTime.clone();     // 结速时间\n          this.viewer.clock.currentTime = startTime.clone(); // 当前时间\n          this.viewer.clock.clockRange = Cesium.ClockRange.CLAMPED; // 行为方式\n          this.viewer.clock.clockStep = Cesium.ClockStep.SYSTEM_CLOCK; // 时钟设置为当前系统时间; 忽略所有其他设置。\n          // 相机的当前heading\n          var initialHeading = this.viewer.camera.heading;\n          var Exection = function TimeExecution() {\n            // 当前已经过去的时间，单位s\n            var delTime = Cesium.JulianDate.secondsDifference(_this.viewer.clock.currentTime, _this.viewer.clock.startTime);\n            var heading = Cesium.Math.toRadians(delTime * angle) + initialHeading;\n            _this.viewer.scene.camera.setView({\n              destination :position, // 点的坐标\n              orientation:{\n                heading: heading,\n                pitch : pitch,\n\n              }\n            });\n            _this.viewer.scene.camera.moveBackward(distance);\n\n            if (Cesium.JulianDate.compare(_this.viewer.clock.currentTime, _this.viewer.clock.stopTime) >= 0) {\n              _this.viewer.clock.onTick.removeEventListener(Exection);\n            }\n          };\n\n          this.viewer.clock.onTick.addEventListener(Exection);\n\n          if(_this.rotates == true){\n            _this.rotates = false\n            _this.showGraph = true\n            var stopTime = Cesium.JulianDate.addSeconds(startTime, 1, new Cesium.JulianDate());\n            this.viewer.clock.stopTime = stopTime.clone();\n            _this.flyTo();\n            // _this.infoMap();\n          }else{\n            var stopTime = Cesium.JulianDate.addSeconds(startTime, 10000, new Cesium.JulianDate());\n            this.viewer.clock.stopTime = stopTime.clone();\n            _this.rotates = true\n            _this.showGraph = false\n          }\n        },\n        flyTo: function () {\n          //lookAt(target, offect)\n//target目标位置在世界坐标,offect以目标为中心的当地东北向参考系中的目标的偏移量。\n          this.viewer.camera.flyTo({\n            destination :  Cesium.Cartesian3.fromDegrees(114.6544496000,37.0705682300,3333331.0), // 设置位置\n            orientation: {\n              heading : Cesium.Math.toRadians(20.0), // 方向\n              pitch : Cesium.Math.toRadians(-90.0),// 倾斜角度\n              roll : 0\n            },\n            duration:5, // 设置飞行持续时间，默认会根据距离来计算\n            complete: function () {\n              // 到达位置后执行的回调函数\n              console.log('到达位置');\n            },\n            cancle: function () {\n              // 如果取消飞行则会调用此函数\n              console.log('取消飞行')\n            },\n            // 如果摄像机飞越高于该值，则调整俯仰俯仰的俯仰角度，并将地球保持在视口中。\n            pitchAdjustHeight: -90,\n            maximumHeight:5000, // 相机最大飞行高度\n            // flyOverLongitude: 100, // 如果到达目的地有2种方式，设置具体值后会强制选择方向飞过这个经度\n          });\n        },\n        /*视角移过去后就不能缩放了，还是用 flyTo */\n        lookAt: function(){\n          var center = Cesium.Cartesian3.fromDegrees(114.6544496000,37.0705682300,3333331.0);\n          var heading = Cesium.Math.toRadians(20.0);\n          var pitch = Cesium.Math.toRadians(-180.0);\n          var range = 5000.0;\n          this.viewer.camera.lookAt(center, new Cesium.HeadingPitchRange(heading, pitch, range));\n\n\n        },\n        /*案例画出南水北调的省份*/\n        area2:function(){\n          var _this = this;\n          // https://sandcastle.cesium.com/SampleData/simplestyles.geojson\n          //可以直接调json链接，但是这样设置的name会无效，所以使用静态方式较好\n          var datasname = 'china'\n            var a = _this.viewer.dataSources.add(new Cesium.GeoJsonDataSource(datasname).load(chinajson, {\n              stroke: Cesium.Color.fromCssColorString('#A4BF78'),// 折线和多边形轮廓的默认颜色\n              fill: Cesium.Color.fromCssColorString('#A4BF78').withAlpha(0.3),// 内部填充色\n              strokeWidth: 10,// 轮廓默认宽度\n              markerSymbol: '?'\n            }));\n            _this.viewer.flyTo(a);\n            // 删除方法\n            // console.log(this.viewer.dataSources.remove(this.viewer.dataSources.getByName('j2')[0],true))\n\n            console.log(_this.viewer.dataSources.getByName(datasname)[0])\n\n\n        },\n        /*案例画出南水北调线路，自定义颜色*/\n        river: function (){\n          var promise = Cesium.GeoJsonDataSource.load(riverjson, {\n            stroke: Cesium.Color.fromCssColorString('#fff'),// 折线和多边形轮廓的默认颜色\n            fill: Cesium.Color.fromCssColorString('#6BB0FF').withAlpha(0.8),// 内部填充色\n            strokeWidth: 1,// 轮廓默认宽度\n            markerSymbol: '?'\n          });\n          var _this = this;\n          /*重写相关属性*/\n          promise.then(function(dataSource) {\n            _this.viewer.dataSources.add(dataSource);\n            var entities = dataSource.entities.values;\n            var colorHash = {};\n            for (var i = 0; i < entities.length; i++) {\n              var entity = entities[i];\n              var name = entity.name;\n              var color = Cesium.Color.fromRandom({\n                alpha : 1.0\n              });\n              entity.polygon.material = color;\n              entity.polygon.outline = false;\n              entity.polygon.extrudedHeight =0;\n            }\n          });\n          _this.viewer.flyTo(promise);\n        },\n        //案例南水北调线路图，绘制水面波浪效果\n        drawWater: function(){\n          var waterFace=[\n            130.0, 30.0, 0,\n            150.0, 30.0, 0,\n            150.0, 10.0, 0,\n            130.0, 10.0, 0];\n          var _this = this;\n            waterFace = []\n            for (const coordinateElement of nsbdjson.coordinates[0]) {\n              waterFace.push(coordinateElement[0])\n              waterFace.push(coordinateElement[1])\n              waterFace.push(coordinateElement[2])\n            }\n            _this.drawWaterByFace(waterFace)\n\n\n        },\n        drawWaterByFace: function(waterFace){\n          //是否淹没效果\n          this.viewer.scene.globe.depthTestAgainstTerrain = false;\n          var waterPrimitive = new Cesium.Primitive({\n            show:true,// 默认隐藏\n            allowPicking:false,\n            geometryInstances : new Cesium.GeometryInstance({\n              geometry : new Cesium.PolygonGeometry({\n                polygonHierarchy : new Cesium.PolygonHierarchy(Cesium.Cartesian3.fromDegreesArrayHeights(waterFace)),\n                //extrudedHeight: 0,//注释掉此属性可以只显示水面\n                //perPositionHeight : true//注释掉此属性水面就贴地了\n              })\n            }),\n            // 可以设置内置的水面shader\n            appearance : new Cesium.EllipsoidSurfaceAppearance({\n              material : new Cesium.Material({\n                translucent:true,\n                fabric : {\n                  type : 'Water',\n                  uniforms : {\n                    //baseWaterColor:new Cesium.Color(0.0, 0.0, 1.0, 0.5),\n                    //blendColor: new Cesium.Color(0.0, 0.0, 1.0, 0.5),\n                    //specularMap: 'gray.jpg',\n                    //normalMap: '../assets/waterNormals.jpg',\n                    normalMap: waterNormalsjpg,\n                    frequency: 1000.0,\n                    animationSpeed: 0.01,\n                    amplitude: 10.0\n                  }\n                }\n              }),\n              // fragmentShaderSource:'varying vec3 v_positionMC;\\nvarying vec3 v_positionEC;\\nvarying vec2 v_st;\\nvoid main()\\n{\\nczm_materialInput materialInput;\\nvec3 normalEC = normalize(czm_normal3D * czm_geodeticSurfaceNormal(v_positionMC, vec3(0.0), vec3(1.0)));\\n#ifdef FACE_FORWARD\\nnormalEC = faceforward(normalEC, vec3(0.0, 0.0, 1.0), -normalEC);\\n#endif\\nmaterialInput.s = v_st.s;\\nmaterialInput.st = v_st;\\nmaterialInput.str = vec3(v_st, 0.0);\\nmaterialInput.normalEC = normalEC;\\nmaterialInput.tangentToEyeMatrix = czm_eastNorthUpToEyeCoordinates(v_positionMC, materialInput.normalEC);\\nvec3 positionToEyeEC = -v_positionEC;\\nmaterialInput.positionToEyeEC = positionToEyeEC;\\nczm_material material = czm_getMaterial(materialInput);\\n#ifdef FLAT\\ngl_FragColor = vec4(material.diffuse + material.emission, material.alpha);\\n#else\\ngl_FragColor = czm_phong(normalize(positionToEyeEC), material);\\gl_FragColor.a=0.5;\\n#endif\\n}\\n'//重写shader，修改水面的透明度\n            })\n          });\n          var a = this.viewer.scene.primitives.add(waterPrimitive);\n\n          this.viewer.camera.flyTo({\n            destination : Cesium.Cartesian3.fromDegrees(117.106488355488,\n              34.1451075219894, 2500000.0),\n            orientation : {\n              heading: Cesium.Math.toRadians(0.0), //默认朝北0度，顺时针方向，东是90度\n              pitch: Cesium.Math.toRadians(-90), //默认朝下看-90,0为水平看，\n              roll: Cesium.Math.toRadians(0) //默认0\n            }\n          });\n\n        },\n        /*根据点位信息画区域，上面是根据geojson画*/\n        area: function (){\n          var _this = this\n          var points = [\n            112.82436,\n            23.071506,\n            112.82742,\n            23.067512,\n            112.828878,\n            23.064659,\n            112.830799,\n            23.060947,\n            112.832166,\n            24.058329\n          ]\n          var positions=Cesium.Cartesian3.fromDegreesArray(points);\n          var rangeModel = _this.viewer.entities.add({\n            name: \"rangeModel\",\n            polygon: {\n              hierarchy: new Cesium.CallbackProperty(function() {\n                return new Cesium.PolygonHierarchy(positions);\n              }, false),\n              clampToGround: true,\n              show: true,\n              fill: true,\n              material: Cesium.Color.RED.withAlpha(0.5),\n              width: 3,\n              outlineColor: Cesium.Color.BLACK,\n              outlineWidth: 1,\n              outline: false\n            }\n          });\n          _this.viewer.flyTo(rangeModel);\n\n        },\n        /*案例 点，动画闪动*/\n        entiti: function (){\n          var _this = this;\n// 模型\n          // let entity = viewer.entities.add({\n          //     position: Cesium.Cartesian3.fromDegrees(106.325, 26.84, 200),\n          //     model: {\n          //         uri: '/static/cesium/Apps/SampleData/models/DracoCompressed/CesiumMilkTruck.gltf'\n          //     }\n          // });\n          // entity.model.scale = 1000;\n          // viewer.zoomTo(entity);\n          //小原点\n          // let citizensBankPark = viewer.entities.add({\n          //     id: \"11111111\",\n          //     name: '温度计1',\n          //     position: Cesium.Cartesian3.fromDegrees(106.325, 26.84),\n          //     // position: new Cesium.Cartesian3(-1610801.5773835022, 5457584.684552207, 2871437.1159677417),  //鼠标点击获取的，不准\n          //     point: {\n          //         pixelSize: 20,\n          //         color: Cesium.Color.RED,\n          //         //color: { alpha: 0.8, red: 255, green: 0, blue: 0 },\n          //         outlineColor: Cesium.Color.WHITE,\n          //         outlineWidth: 1\n          //     },\n          //     label: {\n          //         text: 'P',\n          //         font: '14pt',\n          //         // style: Cesium.LabelStyle.FILL_AND_OUTLINE,\n          //         style: Cesium.LabelStyle.FILL,\n          //         // outlineWidth: 1,\n          //         verticalOrigin: Cesium.VerticalOrigin.CENTER,\n          //         pixelOffset: new Cesium.Cartesian2(0, 0),\n          //         eyeOffset: new Cesium.Cartesian3(0, 0, -10)\n          //     },\n          // });\n          //广告牌  //加地形后位置不固定?\n          var e1 = {\n            id: 'new Date().getSeconds()',\n            position: Cesium.Cartesian3.fromDegrees(106.325, 26.84, 800),\n            billboard: {\n              disableDepthTestDistance: Number.POSITIVE_INFINITY,\n              image: yellowgif,\n              // width: 32,\n              // height: 32,\n            },\n            height: 200,\n            // label: {\n            //     text: '温度计1',\n            //     font: '12pt monospace',\n            //     style: Cesium.LabelStyle.FILL_AND_OUTLINE,\n            //     outlineWidth: 2,\n            //     verticalOrigin: Cesium.VerticalOrigin.TOP,\n            //     pixelOffset: new Cesium.Cartesian2(0, -32)\n            // }\n          }\n          var citizensBankPark = this.viewer.entities.add(e1);\n          citizensBankPark.addProperty(\"imageClock\");\n          var index=1,scale=0.05;\n          citizensBankPark.imageClock=setInterval(function () {\n            if(citizensBankPark!=null){\n              scale+=0.01;\n              citizensBankPark.billboard.image = yellowgif;\n              index+=1;\n              citizensBankPark.billboard.scale = scale;\n\n              if(index>3){\n                index=1;\n              }\n              if(scale >0.3){\n                scale = 0.05\n              }\n            }\n          }, 60);\n          this.viewer.flyTo(citizensBankPark);\n          //删除方式\n          /* setTimeout(function () {\n             _this.viewer.entities.removeById('new Date().getSeconds()')\n           },5000)*/\n        },\n        /*立方体*/\n        czmlDataSource: function () {\n          var czml = [{\n            \"id\" : \"document\",\n            \"name\" : \"box\",\n            \"version\" : \"1.0\"\n          },{\n            \"id\" : \"shape2\",\n            \"name\" : \"Red box with black outline\",\n            \"position\" : {\n              \"cartographicDegrees\" : [114.6544496000,37.0705682300, 0.0]\n            },\n            \"box\" : {\n              \"dimensions\" : {\n                \"cartesian\": [40000.0, 30000.0, 50000.0]\n              },\n              \"material\" : {\n                \"solidColor\" : {\n                  \"color\" : {\n                    \"rgba\" : [255, 0, 0, 128]\n                  }\n                }\n              },\n              \"outline\" : true,\n              \"outlineColor\" : {\n                \"rgba\" : [0, 0, 0, 255]\n              }\n            }\n          }];\n\n          var dataSourcePromise = Cesium.CzmlDataSource.load(czml);\n          this.viewer.dataSources.add(dataSourcePromise);\n          this.viewer.flyTo(dataSourcePromise);\n          // this.viewer.zoomTo(dataSourcePromise);\n\n          /*this.viewer.dataSources.add(Cesium.GeoJsonDataSource.load('modules/gis/nsbd.json', {\n            clampToGround: true\n          }));*/\n        },\n        }\n    }\n",{"version":3,"sources":["CesiumDemo.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;AAmfile":"CesiumDemo.vue","sourceRoot":"src/extends/cesium","sourcesContent":["<template>\n  <div>\n    <div id=\"cesiumContainer\"></div>\n    <span>{{mouse_state.innerText}}</span><br>\n    <span>{{pick2.id}}</span><br>\n    <span>{{pick2.properties}}</span><br>\n    <button @click=\"flyTo\">flyTo</button>\n    <button @click=\"lookAt\">lookAt</button>\n    <button @click=\"czmlDataSource\">设形状</button>\n    <button @click=\"area\">区域点位</button>\n    <button @click=\"area2\">区域geojson</button>\n    <button @click=\"entiti\">addentiti闪动点</button>\n    <button @click=\"river\">river普通颜色河流</button>\n    <button @click=\"drawWater\">drawWater河流动画</button>\n    <button @click=\"rotate(113,33)\">围着点转</button>\n  </div>\n</template>\n\n<script>\n  import chinajson from '@/extends/cesium/china.json'\n  import pointjson from '@/extends/cesium/point.json'\n  import riverjson from '@/extends/cesium/river.json'\n  import nsbdjson from '@/extends/cesium/nsbd.json'\n  import waterNormalsjpg from '@/extends/cesium/waterNormals.jpg'\n  import yellowgif from '@/extends/cesium/yellow.gif'\n    export default {\n      props: {\n      },\n      name: \"CesiumDemo\",\n      data(){\n        return {\n          viewer:null,\n          pick2: {},\n          mouse_state:{innerText:''},\n          rotates: false\n        }\n      },\n      mounted() {\n        const _this = this;\n        //'GoogleAerial','BingAerial', 'EsriAerial', 'TianAerial',| 'OSMStandard', 'MapStreets, 'OSMCycle'\n        const url = \"http://118.190.55.100:8888/tileservice/imagery/OSMCycle/{z}/{x}/{y}\";\n        this.viewer = new Cesium.Viewer(\"cesiumContainer\", {\n          animation: false,        //是否创建动画小器件，左下角仪表\n          timeline: false,         //是否显示时间线控件\n          fullscreenButton: false, //右下角全屏按钮\n          geocoder: false,         //是否显示地名查找控件\n          baseLayerPicker: false,  //是否显示图层选择控件\n          imageryProvider: new Cesium.UrlTemplateImageryProvider({url:url}),\n          terrainProvider : Cesium.createWorldTerrain({ //立体\n            requestVertexNormals: true\n          })\n        });\n        //去cesium logo水印\n        this.viewer.cesiumWidget.creditContainer.style.display = \"none\";\n        // 默认弹窗去除\n        document.querySelector('.cesium-infoBox').style.display = \"none\";\n        //事件 https://www.cnblogs.com/-llf/p/10431978.html\n        var handler = new Cesium.ScreenSpaceEventHandler(this.viewer.scene.canvas);\n        handler.removeInputAction(Cesium.ScreenSpaceEventType.LEFT_CLICK);\n        handler.setInputAction(function(e){\n          console.log('左键单击事件：',e,e.position);\n          var pick = _this.viewer.scene.pick(e.position);\n          if (Cesium.defined(pick)){\n            _this.pick2 = {\n              id:  pick.id.id,\n              name:  pick.id.name,\n            }\n            if (pick.id.properties) _this.pick2.properties = pick.id.properties.getValue();\n            console.log('选中',_this.pick2)\n          }\n        },Cesium.ScreenSpaceEventType.LEFT_CLICK);\n        handler.setInputAction(function(movement) {\n          var ellipsoid = _this.viewer.scene.globe.ellipsoid;\n          //通过指定的椭球或者地图对应的坐标系，将鼠标的二维坐标转换为对应椭球体三维坐标\n          var cartesian = _this.viewer.camera.pickEllipsoid(movement.endPosition, ellipsoid);\n          if (cartesian) {\n            //将笛卡尔坐标转换为地理坐标\n            var cartographic = ellipsoid.cartesianToCartographic(cartesian);\n            //将弧度转为度的十进制度表示\n            var longitudeString = Cesium.Math.toDegrees(cartographic.longitude).toFixed(3);\n            var latitudeString = Cesium.Math.toDegrees(cartographic.latitude).toFixed(3);\n            //获取相机高度\n            var height = Math.ceil(_this.viewer.camera.positionCartographic.height).toFixed(3);\n            _this.mouse_state.innerText = '移动：(' + longitudeString + ', ' + latitudeString + \",\" + height + ')';\n          }else {\n            _this.mouse_state.innerText = \"\";\n          }\n        }, Cesium.ScreenSpaceEventType.MOUSE_MOVE);\n      },\n      watch:{\n      },\n      methods: {\n        getMapInstance: function(pick2){\n          if(pick2 != null && pick2.name !=null && pick2.name.sdLon != null && pick2.name.sdLat != null){\n            this.rotate(pick2.name.sdLon,pick2.name.sdLat);\n          }else{\n            var startTime = Cesium.JulianDate.fromDate(new Date());\n            var stopTime = Cesium.JulianDate.addSeconds(startTime, 0.1, new Cesium.JulianDate());\n            this.viewer.clock.stopTime = stopTime.clone();\n          }\n        },\n        rotate: function (lng,lat) {\n          var _this = this;\n          // var viewer = new Cesium.Viewer('cesiumContainer');\n          var options = {\n\n            lng: lng,\n            lat: lat,\n            height: 11110.8,\n            heading: 0.0,\n            pitch: 0.0,\n            roll: 0.0\n          };\n          var position = Cesium.Cartesian3.fromDegrees(options.lng, options.lat, options.height);\n          // 相机看点的角度，如果大于0那么则是从地底往上看，所以要为负值，这里取-30度\n          var pitch = Cesium.Math.toRadians(-20);\n          // 给定飞行一周所需时间，比如10s, 那么每秒转动度数\n          var angle = 210 / 30;\n          // 给定相机距离点多少距离飞行，这里取值为5000m\n          var distance = 5000;\n          var startTime = Cesium.JulianDate.fromDate(new Date());\n\n          // var stopTime = Cesium.JulianDate.addSeconds(startTime, 1, new Cesium.JulianDate());\n\n          this.viewer.clock.startTime = startTime.clone();  // 开始时间\n          // this.viewer.clock.stopTime = stopTime.clone();     // 结速时间\n          this.viewer.clock.currentTime = startTime.clone(); // 当前时间\n          this.viewer.clock.clockRange = Cesium.ClockRange.CLAMPED; // 行为方式\n          this.viewer.clock.clockStep = Cesium.ClockStep.SYSTEM_CLOCK; // 时钟设置为当前系统时间; 忽略所有其他设置。\n          // 相机的当前heading\n          var initialHeading = this.viewer.camera.heading;\n          var Exection = function TimeExecution() {\n            // 当前已经过去的时间，单位s\n            var delTime = Cesium.JulianDate.secondsDifference(_this.viewer.clock.currentTime, _this.viewer.clock.startTime);\n            var heading = Cesium.Math.toRadians(delTime * angle) + initialHeading;\n            _this.viewer.scene.camera.setView({\n              destination :position, // 点的坐标\n              orientation:{\n                heading: heading,\n                pitch : pitch,\n\n              }\n            });\n            _this.viewer.scene.camera.moveBackward(distance);\n\n            if (Cesium.JulianDate.compare(_this.viewer.clock.currentTime, _this.viewer.clock.stopTime) >= 0) {\n              _this.viewer.clock.onTick.removeEventListener(Exection);\n            }\n          };\n\n          this.viewer.clock.onTick.addEventListener(Exection);\n\n          if(_this.rotates == true){\n            _this.rotates = false\n            _this.showGraph = true\n            var stopTime = Cesium.JulianDate.addSeconds(startTime, 1, new Cesium.JulianDate());\n            this.viewer.clock.stopTime = stopTime.clone();\n            _this.flyTo();\n            // _this.infoMap();\n          }else{\n            var stopTime = Cesium.JulianDate.addSeconds(startTime, 10000, new Cesium.JulianDate());\n            this.viewer.clock.stopTime = stopTime.clone();\n            _this.rotates = true\n            _this.showGraph = false\n          }\n        },\n        flyTo: function () {\n          //lookAt(target, offect)\n//target目标位置在世界坐标,offect以目标为中心的当地东北向参考系中的目标的偏移量。\n          this.viewer.camera.flyTo({\n            destination :  Cesium.Cartesian3.fromDegrees(114.6544496000,37.0705682300,3333331.0), // 设置位置\n            orientation: {\n              heading : Cesium.Math.toRadians(20.0), // 方向\n              pitch : Cesium.Math.toRadians(-90.0),// 倾斜角度\n              roll : 0\n            },\n            duration:5, // 设置飞行持续时间，默认会根据距离来计算\n            complete: function () {\n              // 到达位置后执行的回调函数\n              console.log('到达位置');\n            },\n            cancle: function () {\n              // 如果取消飞行则会调用此函数\n              console.log('取消飞行')\n            },\n            // 如果摄像机飞越高于该值，则调整俯仰俯仰的俯仰角度，并将地球保持在视口中。\n            pitchAdjustHeight: -90,\n            maximumHeight:5000, // 相机最大飞行高度\n            // flyOverLongitude: 100, // 如果到达目的地有2种方式，设置具体值后会强制选择方向飞过这个经度\n          });\n        },\n        /*视角移过去后就不能缩放了，还是用 flyTo */\n        lookAt: function(){\n          var center = Cesium.Cartesian3.fromDegrees(114.6544496000,37.0705682300,3333331.0);\n          var heading = Cesium.Math.toRadians(20.0);\n          var pitch = Cesium.Math.toRadians(-180.0);\n          var range = 5000.0;\n          this.viewer.camera.lookAt(center, new Cesium.HeadingPitchRange(heading, pitch, range));\n\n\n        },\n        /*案例画出南水北调的省份*/\n        area2:function(){\n          var _this = this;\n          // https://sandcastle.cesium.com/SampleData/simplestyles.geojson\n          //可以直接调json链接，但是这样设置的name会无效，所以使用静态方式较好\n          var datasname = 'china'\n            var a = _this.viewer.dataSources.add(new Cesium.GeoJsonDataSource(datasname).load(chinajson, {\n              stroke: Cesium.Color.fromCssColorString('#A4BF78'),// 折线和多边形轮廓的默认颜色\n              fill: Cesium.Color.fromCssColorString('#A4BF78').withAlpha(0.3),// 内部填充色\n              strokeWidth: 10,// 轮廓默认宽度\n              markerSymbol: '?'\n            }));\n            _this.viewer.flyTo(a);\n            // 删除方法\n            // console.log(this.viewer.dataSources.remove(this.viewer.dataSources.getByName('j2')[0],true))\n\n            console.log(_this.viewer.dataSources.getByName(datasname)[0])\n\n\n        },\n        /*案例画出南水北调线路，自定义颜色*/\n        river: function (){\n          var promise = Cesium.GeoJsonDataSource.load(riverjson, {\n            stroke: Cesium.Color.fromCssColorString('#fff'),// 折线和多边形轮廓的默认颜色\n            fill: Cesium.Color.fromCssColorString('#6BB0FF').withAlpha(0.8),// 内部填充色\n            strokeWidth: 1,// 轮廓默认宽度\n            markerSymbol: '?'\n          });\n          var _this = this;\n          /*重写相关属性*/\n          promise.then(function(dataSource) {\n            _this.viewer.dataSources.add(dataSource);\n            var entities = dataSource.entities.values;\n            var colorHash = {};\n            for (var i = 0; i < entities.length; i++) {\n              var entity = entities[i];\n              var name = entity.name;\n              var color = Cesium.Color.fromRandom({\n                alpha : 1.0\n              });\n              entity.polygon.material = color;\n              entity.polygon.outline = false;\n              entity.polygon.extrudedHeight =0;\n            }\n          });\n          _this.viewer.flyTo(promise);\n        },\n        //案例南水北调线路图，绘制水面波浪效果\n        drawWater: function(){\n          var waterFace=[\n            130.0, 30.0, 0,\n            150.0, 30.0, 0,\n            150.0, 10.0, 0,\n            130.0, 10.0, 0];\n          var _this = this;\n            waterFace = []\n            for (const coordinateElement of nsbdjson.coordinates[0]) {\n              waterFace.push(coordinateElement[0])\n              waterFace.push(coordinateElement[1])\n              waterFace.push(coordinateElement[2])\n            }\n            _this.drawWaterByFace(waterFace)\n\n\n        },\n        drawWaterByFace: function(waterFace){\n          //是否淹没效果\n          this.viewer.scene.globe.depthTestAgainstTerrain = false;\n          var waterPrimitive = new Cesium.Primitive({\n            show:true,// 默认隐藏\n            allowPicking:false,\n            geometryInstances : new Cesium.GeometryInstance({\n              geometry : new Cesium.PolygonGeometry({\n                polygonHierarchy : new Cesium.PolygonHierarchy(Cesium.Cartesian3.fromDegreesArrayHeights(waterFace)),\n                //extrudedHeight: 0,//注释掉此属性可以只显示水面\n                //perPositionHeight : true//注释掉此属性水面就贴地了\n              })\n            }),\n            // 可以设置内置的水面shader\n            appearance : new Cesium.EllipsoidSurfaceAppearance({\n              material : new Cesium.Material({\n                translucent:true,\n                fabric : {\n                  type : 'Water',\n                  uniforms : {\n                    //baseWaterColor:new Cesium.Color(0.0, 0.0, 1.0, 0.5),\n                    //blendColor: new Cesium.Color(0.0, 0.0, 1.0, 0.5),\n                    //specularMap: 'gray.jpg',\n                    //normalMap: '../assets/waterNormals.jpg',\n                    normalMap: waterNormalsjpg,\n                    frequency: 1000.0,\n                    animationSpeed: 0.01,\n                    amplitude: 10.0\n                  }\n                }\n              }),\n              // fragmentShaderSource:'varying vec3 v_positionMC;\\nvarying vec3 v_positionEC;\\nvarying vec2 v_st;\\nvoid main()\\n{\\nczm_materialInput materialInput;\\nvec3 normalEC = normalize(czm_normal3D * czm_geodeticSurfaceNormal(v_positionMC, vec3(0.0), vec3(1.0)));\\n#ifdef FACE_FORWARD\\nnormalEC = faceforward(normalEC, vec3(0.0, 0.0, 1.0), -normalEC);\\n#endif\\nmaterialInput.s = v_st.s;\\nmaterialInput.st = v_st;\\nmaterialInput.str = vec3(v_st, 0.0);\\nmaterialInput.normalEC = normalEC;\\nmaterialInput.tangentToEyeMatrix = czm_eastNorthUpToEyeCoordinates(v_positionMC, materialInput.normalEC);\\nvec3 positionToEyeEC = -v_positionEC;\\nmaterialInput.positionToEyeEC = positionToEyeEC;\\nczm_material material = czm_getMaterial(materialInput);\\n#ifdef FLAT\\ngl_FragColor = vec4(material.diffuse + material.emission, material.alpha);\\n#else\\ngl_FragColor = czm_phong(normalize(positionToEyeEC), material);\\gl_FragColor.a=0.5;\\n#endif\\n}\\n'//重写shader，修改水面的透明度\n            })\n          });\n          var a = this.viewer.scene.primitives.add(waterPrimitive);\n\n          this.viewer.camera.flyTo({\n            destination : Cesium.Cartesian3.fromDegrees(117.106488355488,\n              34.1451075219894, 2500000.0),\n            orientation : {\n              heading: Cesium.Math.toRadians(0.0), //默认朝北0度，顺时针方向，东是90度\n              pitch: Cesium.Math.toRadians(-90), //默认朝下看-90,0为水平看，\n              roll: Cesium.Math.toRadians(0) //默认0\n            }\n          });\n\n        },\n        /*根据点位信息画区域，上面是根据geojson画*/\n        area: function (){\n          var _this = this\n          var points = [\n            112.82436,\n            23.071506,\n            112.82742,\n            23.067512,\n            112.828878,\n            23.064659,\n            112.830799,\n            23.060947,\n            112.832166,\n            24.058329\n          ]\n          var positions=Cesium.Cartesian3.fromDegreesArray(points);\n          var rangeModel = _this.viewer.entities.add({\n            name: \"rangeModel\",\n            polygon: {\n              hierarchy: new Cesium.CallbackProperty(function() {\n                return new Cesium.PolygonHierarchy(positions);\n              }, false),\n              clampToGround: true,\n              show: true,\n              fill: true,\n              material: Cesium.Color.RED.withAlpha(0.5),\n              width: 3,\n              outlineColor: Cesium.Color.BLACK,\n              outlineWidth: 1,\n              outline: false\n            }\n          });\n          _this.viewer.flyTo(rangeModel);\n\n        },\n        /*案例 点，动画闪动*/\n        entiti: function (){\n          var _this = this;\n// 模型\n          // let entity = viewer.entities.add({\n          //     position: Cesium.Cartesian3.fromDegrees(106.325, 26.84, 200),\n          //     model: {\n          //         uri: '/static/cesium/Apps/SampleData/models/DracoCompressed/CesiumMilkTruck.gltf'\n          //     }\n          // });\n          // entity.model.scale = 1000;\n          // viewer.zoomTo(entity);\n          //小原点\n          // let citizensBankPark = viewer.entities.add({\n          //     id: \"11111111\",\n          //     name: '温度计1',\n          //     position: Cesium.Cartesian3.fromDegrees(106.325, 26.84),\n          //     // position: new Cesium.Cartesian3(-1610801.5773835022, 5457584.684552207, 2871437.1159677417),  //鼠标点击获取的，不准\n          //     point: {\n          //         pixelSize: 20,\n          //         color: Cesium.Color.RED,\n          //         //color: { alpha: 0.8, red: 255, green: 0, blue: 0 },\n          //         outlineColor: Cesium.Color.WHITE,\n          //         outlineWidth: 1\n          //     },\n          //     label: {\n          //         text: 'P',\n          //         font: '14pt',\n          //         // style: Cesium.LabelStyle.FILL_AND_OUTLINE,\n          //         style: Cesium.LabelStyle.FILL,\n          //         // outlineWidth: 1,\n          //         verticalOrigin: Cesium.VerticalOrigin.CENTER,\n          //         pixelOffset: new Cesium.Cartesian2(0, 0),\n          //         eyeOffset: new Cesium.Cartesian3(0, 0, -10)\n          //     },\n          // });\n          //广告牌  //加地形后位置不固定?\n          var e1 = {\n            id: 'new Date().getSeconds()',\n            position: Cesium.Cartesian3.fromDegrees(106.325, 26.84, 800),\n            billboard: {\n              disableDepthTestDistance: Number.POSITIVE_INFINITY,\n              image: yellowgif,\n              // width: 32,\n              // height: 32,\n            },\n            height: 200,\n            // label: {\n            //     text: '温度计1',\n            //     font: '12pt monospace',\n            //     style: Cesium.LabelStyle.FILL_AND_OUTLINE,\n            //     outlineWidth: 2,\n            //     verticalOrigin: Cesium.VerticalOrigin.TOP,\n            //     pixelOffset: new Cesium.Cartesian2(0, -32)\n            // }\n          }\n          var citizensBankPark = this.viewer.entities.add(e1);\n          citizensBankPark.addProperty(\"imageClock\");\n          var index=1,scale=0.05;\n          citizensBankPark.imageClock=setInterval(function () {\n            if(citizensBankPark!=null){\n              scale+=0.01;\n              citizensBankPark.billboard.image = yellowgif;\n              index+=1;\n              citizensBankPark.billboard.scale = scale;\n\n              if(index>3){\n                index=1;\n              }\n              if(scale >0.3){\n                scale = 0.05\n              }\n            }\n          }, 60);\n          this.viewer.flyTo(citizensBankPark);\n          //删除方式\n          /* setTimeout(function () {\n             _this.viewer.entities.removeById('new Date().getSeconds()')\n           },5000)*/\n        },\n        /*立方体*/\n        czmlDataSource: function () {\n          var czml = [{\n            \"id\" : \"document\",\n            \"name\" : \"box\",\n            \"version\" : \"1.0\"\n          },{\n            \"id\" : \"shape2\",\n            \"name\" : \"Red box with black outline\",\n            \"position\" : {\n              \"cartographicDegrees\" : [114.6544496000,37.0705682300, 0.0]\n            },\n            \"box\" : {\n              \"dimensions\" : {\n                \"cartesian\": [40000.0, 30000.0, 50000.0]\n              },\n              \"material\" : {\n                \"solidColor\" : {\n                  \"color\" : {\n                    \"rgba\" : [255, 0, 0, 128]\n                  }\n                }\n              },\n              \"outline\" : true,\n              \"outlineColor\" : {\n                \"rgba\" : [0, 0, 0, 255]\n              }\n            }\n          }];\n\n          var dataSourcePromise = Cesium.CzmlDataSource.load(czml);\n          this.viewer.dataSources.add(dataSourcePromise);\n          this.viewer.flyTo(dataSourcePromise);\n          // this.viewer.zoomTo(dataSourcePromise);\n\n          /*this.viewer.dataSources.add(Cesium.GeoJsonDataSource.load('modules/gis/nsbd.json', {\n            clampToGround: true\n          }));*/\n        },\n        }\n    }\n</script>\n\n<style scoped>\n\n</style>"]}]}