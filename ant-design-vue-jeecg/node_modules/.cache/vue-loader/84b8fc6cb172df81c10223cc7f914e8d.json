{"remainingRequest":"D:\\activiti\\project01\\jeecg-boot-activiti-master\\ant-design-vue-jeecg\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\activiti\\project01\\jeecg-boot-activiti-master\\ant-design-vue-jeecg\\src\\views\\user\\register\\Register.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\activiti\\project01\\jeecg-boot-activiti-master\\ant-design-vue-jeecg\\src\\views\\user\\register\\Register.vue","mtime":1621922115235},{"path":"D:\\activiti\\project01\\jeecg-boot-activiti-master\\ant-design-vue-jeecg\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1621061384845},{"path":"D:\\activiti\\project01\\jeecg-boot-activiti-master\\ant-design-vue-jeecg\\node_modules\\babel-loader\\lib\\index.js","mtime":1621061377995},{"path":"D:\\activiti\\project01\\jeecg-boot-activiti-master\\ant-design-vue-jeecg\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1621061384845},{"path":"D:\\activiti\\project01\\jeecg-boot-activiti-master\\ant-design-vue-jeecg\\node_modules\\vue-loader\\lib\\index.js","mtime":1621061372054}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport {mixinDevice} from '@/utils/mixin.js'\nimport {getSmsCaptcha} from '@/api/login'\nimport {getAction, postAction} from '@/api/manage'\nimport {checkOnlyUser} from '@/api/api'\n\nconst levelNames = {\n  0: '低',\n  1: '低',\n  2: '中',\n  3: '强'\n}\nconst levelClass = {\n  0: 'error',\n  1: 'error',\n  2: 'warning',\n  3: 'success'\n}\nconst levelColor = {\n  0: '#ff0000',\n  1: '#ff0000',\n  2: '#ff7e05',\n  3: '#4F62D0',\n}\nexport default {\n  name: \"Register\",\n  components: {},\n  mixins: [mixinDevice],\n  data() {\n    return {\n      form: null,\n\n      state: {\n        time: 60,\n        smsSendBtn: false,\n        passwordLevel: 0,\n        passwordLevelChecked: false,\n        percent: 10,\n        progressColor: '#FF0000'\n      },\n      registerBtn: false\n    }\n  },\n  computed: {\n    passwordLevelClass() {\n      return levelClass[this.state.passwordLevel]\n    },\n    passwordLevelName() {\n      return levelNames[this.state.passwordLevel]\n    },\n    passwordLevelColor() {\n      return levelColor[this.state.passwordLevel]\n    }\n  },\n  methods: {\n    checkUsername(rule, value, callback) {\n      if(!value){\n        callback(new Error(\"请输入用户名\"))\n      }else{\n      var params = {\n        username: value,\n      };\n      checkOnlyUser(params).then((res) => {\n        if (res.success) {\n          callback()\n        } else {\n          callback(\"用户名已存在!\")\n        }\n      })\n    }\n  },\n    handleEmailCheck(rule, value, callback) {\n      var params = {\n        email: value,\n      };\n      checkOnlyUser(params).then((res) => {\n        if (res.success) {\n          callback()\n        } else {\n          callback(\"邮箱已存在!\")\n        }\n      })\n    },\n    handlePasswordLevel(rule, value, callback) {\n\n      let level = 0\n      let reg = /^(?=.*[a-zA-Z])(?=.*\\d)(?=.*[~!@#$%^&*()_+`\\-={}:\";'<>?,./]).{8,}$/;\n      if (!reg.test(value)) {\n        callback(new Error('密码由8位数字、大小写字母和特殊符号组成!'))\n      }\n      // 判断这个字符串中有没有数字\n      if (/[0-9]/.test(value)) {\n        level++\n      }\n      // 判断字符串中有没有字母\n      if (/[a-zA-Z]/.test(value)) {\n        level++\n      }\n      // 判断字符串中有没有特殊符号\n      if (/[^0-9a-zA-Z_]/.test(value)) {\n        level++\n      }\n      this.state.passwordLevel = level\n      this.state.percent = level * 30\n      if (level >= 2) {\n        if (level >= 3) {\n          this.state.percent = 100\n        }\n        callback()\n      } else {\n        if (level === 0) {\n          this.state.percent = 10\n        }\n        callback(new Error('密码强度不够'))\n      }\n    },\n\n    handlePasswordCheck(rule, value, callback) {\n      let password = this.form.getFieldValue('password')\n      //console.log('value', value)\n      if (value === undefined) {\n        callback(new Error('请输入密码'))\n      }\n      if (value && password && value.trim() !== password.trim()) {\n        callback(new Error('两次密码不一致'))\n      }\n      callback()\n    },\n    handleCaptchaCheck(rule, value, callback){\n      if(!value){\n        callback(new Error(\"请输入验证码\"))\n      }else{\n        callback();\n      }\n    },\n    handlePhoneCheck(rule, value, callback) {\n      var reg=/^1[3456789]\\d{9}$/\n      if(!reg.test(value)){\n        callback(new Error(\"请输入正确手机号\"))\n      }else{\n      var params = {\n        phone: value,\n      };\n      checkOnlyUser(params).then((res) => {\n        if (res.success) {\n          callback()\n        } else {\n          callback(\"手机号已存在!\")\n        }\n      })\n    }\n  },\n\n    handlePasswordInputClick() {\n      if (!this.isMobile()) {\n        this.state.passwordLevelChecked = true\n        return;\n      }\n      this.state.passwordLevelChecked = false\n    },\n\n    handleSubmit() {\n      this.form.validateFields((err, values) => {\n        if (!err) {\n          var register = {\n            username: values.username,\n            password: values.password,\n            phone: values.mobile,\n            smscode: values.captcha\n          };\n          postAction(\"/sys/user/register\", register).then((res) => {\n            if (!res.success) {\n              this.registerFailed(res.message)\n            } else {\n              this.$router.push({name: 'registerResult', params: {...values}})\n            }\n          })\n        }\n      })\n    },\n\n    getCaptcha(e) {\n      e.preventDefault()\n      let that = this\n      this.form.validateFields(['mobile'], {force: true}, (err, values) => {\n          if (!err) {\n            this.state.smsSendBtn = true;\n            let interval = window.setInterval(() => {\n              if (that.state.time-- <= 0) {\n                that.state.time = 60;\n                that.state.smsSendBtn = false;\n                window.clearInterval(interval);\n              }\n            }, 1000);\n            const hide = this.$message.loading('验证码发送中..', 0);\n            const params = {\n              mobile: values.mobile,\n              smsmode: \"1\"\n            };\n            postAction(\"/sys/sms\", params).then((res) => {\n              if (!res.success) {\n                this.registerFailed(res.message);\n                setTimeout(hide, 0);\n              }\n              setTimeout(hide, 500);\n            }).catch(err => {\n              setTimeout(hide, 1);\n              clearInterval(interval);\n              that.state.time = 60;\n              that.state.smsSendBtn = false;\n              this.requestFailed(err);\n            });\n          }\n        }\n      );\n    },\n    registerFailed(message) {\n      this.$notification['error']({\n        message: \"注册失败\",\n        description: message,\n        duration: 2,\n      });\n\n    },\n    requestFailed(err) {\n      this.$notification['error']({\n        message: '错误',\n        description: ((err.response || {}).data || {}).message || \"请求出现错误，请稍后再试\",\n        duration: 4,\n      });\n      this.registerBtn = false;\n    },\n  },\n  watch: {\n    'state.passwordLevel'(val) {\n      console.log(val)\n\n    }\n  }\n}\n",{"version":3,"sources":["Register.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA6FA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA","file":"Register.vue","sourceRoot":"src/views/user/register","sourcesContent":["<template>\r\n  <div class=\"main user-layout-register\">\r\n    <h3><span>注册</span></h3>\r\n    <a-form ref=\"formRegister\" :autoFormCreate=\"(form)=>{this.form = form}\" id=\"formRegister\">\r\n      <a-form-item\r\n        fieldDecoratorId=\"username\"\r\n        :fieldDecoratorOptions=\"{rules: [{ required: false}, { validator: this.checkUsername }]}\">\r\n        <a-input size=\"large\" type=\"text\" autocomplete=\"false\" placeholder=\"请输入用户名\"></a-input>\r\n      </a-form-item>\r\n\r\n      <a-popover placement=\"rightTop\" trigger=\"click\" :visible=\"state.passwordLevelChecked\">\r\n        <template slot=\"content\">\r\n          <div :style=\"{ width: '240px' }\">\r\n            <div :class=\"['user-register', passwordLevelClass]\">强度：<span>{{ passwordLevelName }}</span></div>\r\n            <a-progress :percent=\"state.percent\" :showInfo=\"false\" :strokeColor=\" passwordLevelColor \"/>\r\n            <div style=\"margin-top: 10px;\">\r\n              <span>请至少输入 8 个字符。请不要使用容易被猜到的密码。</span>\r\n            </div>\r\n          </div>\r\n        </template>\r\n        <a-form-item\r\n          fieldDecoratorId=\"password\"\r\n          :fieldDecoratorOptions=\"{rules: [{ required: false}, { validator: this.handlePasswordLevel }]}\">\r\n          <a-input size=\"large\" type=\"password\" @click=\"handlePasswordInputClick\" autocomplete=\"false\" placeholder=\"至少8位密码，区分大小写\"></a-input>\r\n        </a-form-item>\r\n      </a-popover>\r\n\r\n      <a-form-item\r\n        fieldDecoratorId=\"password2\"\r\n        :fieldDecoratorOptions=\"{rules: [{ required: false}, { validator: this.handlePasswordCheck }]}\">\r\n\r\n        <a-input size=\"large\" type=\"password\" autocomplete=\"false\" placeholder=\"确认密码\"></a-input>\r\n      </a-form-item>\r\n<!--      <a-form-item-->\r\n<!--        fieldDecoratorId=\"email\">-->\r\n<!--        <a-input size=\"large\" type=\"text\" placeholder=\"邮箱\"></a-input>-->\r\n<!--      </a-form-item>-->\r\n      <a-form-item\r\n        fieldDecoratorId=\"mobile\"\r\n        :fieldDecoratorOptions=\"{rules: [{ required: false}, { validator: this.handlePhoneCheck }]}\">\r\n        <a-input size=\"large\" placeholder=\"11 位手机号\">\r\n          <a-select slot=\"addonBefore\" size=\"large\" defaultValue=\"+86\">\r\n            <a-select-option value=\"+86\">+86</a-select-option>\r\n            <a-select-option value=\"+87\">+87</a-select-option>\r\n          </a-select>\r\n        </a-input>\r\n      </a-form-item>\r\n      <!--<a-input-group size=\"large\" compact>\r\n            <a-select style=\"width: 20%\" size=\"large\" defaultValue=\"+86\">\r\n              <a-select-option value=\"+86\">+86</a-select-option>\r\n              <a-select-option value=\"+87\">+87</a-select-option>\r\n            </a-select>\r\n            <a-input style=\"width: 80%\" size=\"large\" placeholder=\"11 位手机号\"></a-input>\r\n          </a-input-group>-->\r\n\r\n      <a-row :gutter=\"16\">\r\n        <a-col class=\"gutter-row\" :span=\"16\">\r\n          <a-form-item\r\n            fieldDecoratorId=\"captcha\"\r\n            :fieldDecoratorOptions=\"{rules: [{ required: false}, { validator: this.handleCaptchaCheck }]}\">\r\n            <a-input size=\"large\" type=\"text\" placeholder=\"验证码\">\r\n              <a-icon slot=\"prefix\" type=\"mail\" :style=\"{ color: 'rgba(0,0,0,.25)' }\"/>\r\n            </a-input>\r\n          </a-form-item>\r\n        </a-col>\r\n        <a-col class=\"gutter-row\" :span=\"8\">\r\n          <a-button\r\n            class=\"getCaptcha\"\r\n            size=\"large\"\r\n            :disabled=\"state.smsSendBtn\"\r\n            @click.stop.prevent=\"getCaptcha\"\r\n            v-text=\"!state.smsSendBtn && '获取验证码'||(state.time+' s')\"></a-button>\r\n        </a-col>\r\n      </a-row>\r\n\r\n      <a-form-item>\r\n        <a-button\r\n          size=\"large\"\r\n          type=\"primary\"\r\n          htmlType=\"submit\"\r\n          class=\"register-button\"\r\n          :loading=\"registerBtn\"\r\n          @click.stop.prevent=\"handleSubmit\"\r\n          :disabled=\"registerBtn\">注册\r\n        </a-button>\r\n        <router-link class=\"login\" :to=\"{ name: 'login' }\">使用已有账户登录</router-link>\r\n      </a-form-item>\r\n\r\n    </a-form>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\n  import {mixinDevice} from '@/utils/mixin.js'\r\n  import {getSmsCaptcha} from '@/api/login'\r\n  import {getAction, postAction} from '@/api/manage'\r\n  import {checkOnlyUser} from '@/api/api'\r\n\r\n  const levelNames = {\r\n    0: '低',\r\n    1: '低',\r\n    2: '中',\r\n    3: '强'\r\n  }\r\n  const levelClass = {\r\n    0: 'error',\r\n    1: 'error',\r\n    2: 'warning',\r\n    3: 'success'\r\n  }\r\n  const levelColor = {\r\n    0: '#ff0000',\r\n    1: '#ff0000',\r\n    2: '#ff7e05',\r\n    3: '#4F62D0',\r\n  }\r\n  export default {\r\n    name: \"Register\",\r\n    components: {},\r\n    mixins: [mixinDevice],\r\n    data() {\r\n      return {\r\n        form: null,\r\n\r\n        state: {\r\n          time: 60,\r\n          smsSendBtn: false,\r\n          passwordLevel: 0,\r\n          passwordLevelChecked: false,\r\n          percent: 10,\r\n          progressColor: '#FF0000'\r\n        },\r\n        registerBtn: false\r\n      }\r\n    },\r\n    computed: {\r\n      passwordLevelClass() {\r\n        return levelClass[this.state.passwordLevel]\r\n      },\r\n      passwordLevelName() {\r\n        return levelNames[this.state.passwordLevel]\r\n      },\r\n      passwordLevelColor() {\r\n        return levelColor[this.state.passwordLevel]\r\n      }\r\n    },\r\n    methods: {\r\n      checkUsername(rule, value, callback) {\r\n        if(!value){\r\n          callback(new Error(\"请输入用户名\"))\r\n        }else{\r\n        var params = {\r\n          username: value,\r\n        };\r\n        checkOnlyUser(params).then((res) => {\r\n          if (res.success) {\r\n            callback()\r\n          } else {\r\n            callback(\"用户名已存在!\")\r\n          }\r\n        })\r\n      }\r\n    },\r\n      handleEmailCheck(rule, value, callback) {\r\n        var params = {\r\n          email: value,\r\n        };\r\n        checkOnlyUser(params).then((res) => {\r\n          if (res.success) {\r\n            callback()\r\n          } else {\r\n            callback(\"邮箱已存在!\")\r\n          }\r\n        })\r\n      },\r\n      handlePasswordLevel(rule, value, callback) {\r\n\r\n        let level = 0\r\n        let reg = /^(?=.*[a-zA-Z])(?=.*\\d)(?=.*[~!@#$%^&*()_+`\\-={}:\";'<>?,./]).{8,}$/;\r\n        if (!reg.test(value)) {\r\n          callback(new Error('密码由8位数字、大小写字母和特殊符号组成!'))\r\n        }\r\n        // 判断这个字符串中有没有数字\r\n        if (/[0-9]/.test(value)) {\r\n          level++\r\n        }\r\n        // 判断字符串中有没有字母\r\n        if (/[a-zA-Z]/.test(value)) {\r\n          level++\r\n        }\r\n        // 判断字符串中有没有特殊符号\r\n        if (/[^0-9a-zA-Z_]/.test(value)) {\r\n          level++\r\n        }\r\n        this.state.passwordLevel = level\r\n        this.state.percent = level * 30\r\n        if (level >= 2) {\r\n          if (level >= 3) {\r\n            this.state.percent = 100\r\n          }\r\n          callback()\r\n        } else {\r\n          if (level === 0) {\r\n            this.state.percent = 10\r\n          }\r\n          callback(new Error('密码强度不够'))\r\n        }\r\n      },\r\n\r\n      handlePasswordCheck(rule, value, callback) {\r\n        let password = this.form.getFieldValue('password')\r\n        //console.log('value', value)\r\n        if (value === undefined) {\r\n          callback(new Error('请输入密码'))\r\n        }\r\n        if (value && password && value.trim() !== password.trim()) {\r\n          callback(new Error('两次密码不一致'))\r\n        }\r\n        callback()\r\n      },\r\n      handleCaptchaCheck(rule, value, callback){\r\n        if(!value){\r\n          callback(new Error(\"请输入验证码\"))\r\n        }else{\r\n          callback();\r\n        }\r\n      },\r\n      handlePhoneCheck(rule, value, callback) {\r\n        var reg=/^1[3456789]\\d{9}$/\r\n        if(!reg.test(value)){\r\n          callback(new Error(\"请输入正确手机号\"))\r\n        }else{\r\n        var params = {\r\n          phone: value,\r\n        };\r\n        checkOnlyUser(params).then((res) => {\r\n          if (res.success) {\r\n            callback()\r\n          } else {\r\n            callback(\"手机号已存在!\")\r\n          }\r\n        })\r\n      }\r\n    },\r\n\r\n      handlePasswordInputClick() {\r\n        if (!this.isMobile()) {\r\n          this.state.passwordLevelChecked = true\r\n          return;\r\n        }\r\n        this.state.passwordLevelChecked = false\r\n      },\r\n\r\n      handleSubmit() {\r\n        this.form.validateFields((err, values) => {\r\n          if (!err) {\r\n            var register = {\r\n              username: values.username,\r\n              password: values.password,\r\n              phone: values.mobile,\r\n              smscode: values.captcha\r\n            };\r\n            postAction(\"/sys/user/register\", register).then((res) => {\r\n              if (!res.success) {\r\n                this.registerFailed(res.message)\r\n              } else {\r\n                this.$router.push({name: 'registerResult', params: {...values}})\r\n              }\r\n            })\r\n          }\r\n        })\r\n      },\r\n\r\n      getCaptcha(e) {\r\n        e.preventDefault()\r\n        let that = this\r\n        this.form.validateFields(['mobile'], {force: true}, (err, values) => {\r\n            if (!err) {\r\n              this.state.smsSendBtn = true;\r\n              let interval = window.setInterval(() => {\r\n                if (that.state.time-- <= 0) {\r\n                  that.state.time = 60;\r\n                  that.state.smsSendBtn = false;\r\n                  window.clearInterval(interval);\r\n                }\r\n              }, 1000);\r\n              const hide = this.$message.loading('验证码发送中..', 0);\r\n              const params = {\r\n                mobile: values.mobile,\r\n                smsmode: \"1\"\r\n              };\r\n              postAction(\"/sys/sms\", params).then((res) => {\r\n                if (!res.success) {\r\n                  this.registerFailed(res.message);\r\n                  setTimeout(hide, 0);\r\n                }\r\n                setTimeout(hide, 500);\r\n              }).catch(err => {\r\n                setTimeout(hide, 1);\r\n                clearInterval(interval);\r\n                that.state.time = 60;\r\n                that.state.smsSendBtn = false;\r\n                this.requestFailed(err);\r\n              });\r\n            }\r\n          }\r\n        );\r\n      },\r\n      registerFailed(message) {\r\n        this.$notification['error']({\r\n          message: \"注册失败\",\r\n          description: message,\r\n          duration: 2,\r\n        });\r\n\r\n      },\r\n      requestFailed(err) {\r\n        this.$notification['error']({\r\n          message: '错误',\r\n          description: ((err.response || {}).data || {}).message || \"请求出现错误，请稍后再试\",\r\n          duration: 4,\r\n        });\r\n        this.registerBtn = false;\r\n      },\r\n    },\r\n    watch: {\r\n      'state.passwordLevel'(val) {\r\n        console.log(val)\r\n\r\n      }\r\n    }\r\n  }\r\n</script>\r\n<style lang=\"less\">\r\n  .user-register {\r\n\r\n    &.error {\r\n      color: #ff0000;\r\n    }\r\n\r\n    &.warning {\r\n      color: #ff7e05;\r\n    }\r\n\r\n    &.success {\r\n      color: #4F62D0;\r\n    }\r\n\r\n  }\r\n\r\n  .user-layout-register {\r\n    .ant-input-group-addon:first-child {\r\n      background-color: #fff;\r\n    }\r\n  }\r\n</style>\r\n<style lang=\"less\" scoped>\r\n  .user-layout-register {\r\n\r\n    & > h3 {\r\n      font-size: 16px;\r\n      margin-bottom: 20px;\r\n    }\r\n\r\n    .getCaptcha {\r\n      display: block;\r\n      width: 100%;\r\n      height: 40px;\r\n    }\r\n\r\n    .register-button {\r\n      width: 50%;\r\n    }\r\n\r\n    .login {\r\n      float: right;\r\n      line-height: 40px;\r\n    }\r\n  }\r\n</style>"]}]}