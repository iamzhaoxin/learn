{"remainingRequest":"D:\\activiti\\project01\\jeecg-boot-activiti-master\\ant-design-vue-jeecg\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\activiti\\project01\\jeecg-boot-activiti-master\\ant-design-vue-jeecg\\src\\views\\system\\modules\\SysCheckRuleModal.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\activiti\\project01\\jeecg-boot-activiti-master\\ant-design-vue-jeecg\\src\\views\\system\\modules\\SysCheckRuleModal.vue","mtime":1611914356000},{"path":"D:\\activiti\\project01\\jeecg-boot-activiti-master\\ant-design-vue-jeecg\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1621061384845},{"path":"D:\\activiti\\project01\\jeecg-boot-activiti-master\\ant-design-vue-jeecg\\node_modules\\babel-loader\\lib\\index.js","mtime":1621061377995},{"path":"D:\\activiti\\project01\\jeecg-boot-activiti-master\\ant-design-vue-jeecg\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1621061384845},{"path":"D:\\activiti\\project01\\jeecg-boot-activiti-master\\ant-design-vue-jeecg\\node_modules\\vue-loader\\lib\\index.js","mtime":1621061372054}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport pick from 'lodash.pick'\nimport { httpAction } from '@/api/manage'\nimport { validateDuplicateValue, alwaysResolve, failedSymbol } from '@/utils/util'\nimport { FormTypes } from '@/utils/JEditableTableUtil'\nimport JEditableTable from '@comp/jeecg/JEditableTable'\n\nexport default {\n  name: 'SysCheckRuleModal',\n  components: {\n    JEditableTable,\n    'my-action-button': {\n      props: { rowEvent: Object, allowEmpty: Boolean },\n      methods: {\n        confirmIsShow() {\n          const { index, allValues: { inputValues } } = this.rowEvent\n          let value = inputValues[index]\n          return value.digits || value.pattern\n        },\n        handleLineAdd() {\n          const { target } = this.rowEvent\n          target.add()\n        },\n        handleLineDelete() {\n          const { rowId, target } = this.rowEvent\n          target.removeRows(rowId)\n        },\n        renderDeleteButton() {\n          if (this.allowEmpty || this.rowEvent.index > 0) {\n            if (this.confirmIsShow()) {\n              return (\n                <a-popconfirm title=\"确定要删除吗？\" onConfirm={this.handleLineDelete}>\n                  <a-button icon=\"minus\"/>\n                </a-popconfirm>\n              )\n            } else {\n              return (\n                <a-button icon=\"minus\" onClick={this.handleLineDelete}/>\n              )\n            }\n          }\n          return ''\n        },\n      },\n      render() {\n        return (\n          <div>\n            <a-button onClick={this.handleLineAdd} icon=\"plus\"/>\n            &nbsp;\n            {this.renderDeleteButton()}\n          </div>\n        )\n      }\n    }\n  },\n  data() {\n    return {\n      title: '操作',\n      visible: false,\n      model: {},\n      labelCol: {\n        xs: { span: 24 },\n        sm: { span: 5 },\n      },\n      wrapperCol: {\n        xs: { span: 24 },\n        sm: { span: 16 },\n      },\n      confirmLoading: false,\n      form: this.$form.createForm(this),\n      validatorRules: {\n        ruleName: { rules: [{ required: true, message: '请输入规则名称!' },] },\n        ruleCode: {\n          rules: [\n            { required: true, message: '请输入规则Code!' },\n            { validator: (rule, value, callback) => validateDuplicateValue('sys_check_rule', 'rule_code', value, this.model.id, callback) }\n          ]\n        },\n      },\n      tabs: {\n        activeKey: 'design',\n        global: {\n          key: 'global',\n          columns: [\n            {\n              title: '优先级',\n              key: 'priority',\n              width: '15%',\n              type: FormTypes.select,\n              defaultValue: '1',\n              options: [\n                { title: '优先运行', value: '1' },\n                { title: '最后运行', value: '0' },\n              ],\n              validateRules: []\n            },\n            {\n              title: '规则（正则表达式）',\n              key: 'pattern',\n              width: '50%',\n              type: FormTypes.input,\n              validateRules: [\n                { required: true, message: '规则不能为空' },\n                { handler: this.validatePatternHandler },\n              ]\n            },\n            {\n              title: '提示文本',\n              key: 'message',\n              width: '20%',\n              type: FormTypes.input,\n              validateRules: [\n                { required: true, message: '${title}不能为空' },\n              ]\n            },\n            {\n              title: '操作',\n              key: 'action',\n              width: '15%',\n              slotName: 'action',\n              type: FormTypes.slot\n            }\n          ],\n          dataSource: [],\n        },\n        design: {\n          key: 'design',\n          columns: [\n            {\n              title: '位数',\n              key: 'digits',\n              width: '15%',\n              type: FormTypes.inputNumber,\n              validateRules: [\n                { required: true, message: '${title}不能为空' },\n                { pattern: /^[1-9]\\d*$/, message: '请输入零以上的正整数' },\n              ]\n            },\n            {\n              title: '规则（正则表达式）',\n              key: 'pattern',\n              width: '50%',\n              type: FormTypes.input,\n              validateRules: [\n                { required: true, message: '规则不能为空' },\n                { handler: this.validatePatternHandler }\n              ]\n            },\n            {\n              title: '提示文本',\n              key: 'message',\n              width: '20%',\n              type: FormTypes.input,\n              validateRules: [\n                { required: true, message: '${title}不能为空' },\n              ]\n            },\n            {\n              title: '操作',\n              key: 'action',\n              width: '15%',\n              slotName: 'action',\n              type: FormTypes.slot\n            },\n          ],\n          dataSource: [],\n        }\n      },\n      url: {\n        add: '/sys/checkRule/add',\n        edit: '/sys/checkRule/edit',\n      },\n    }\n  },\n  created() {\n  },\n  methods: {\n\n    validatePatternHandler(type, value, row, column, callback, target) {\n      if (type === 'blur' || type === 'getValues') {\n        try {\n          new RegExp(value)\n          callback(true)\n        } catch (e) {\n          callback(false, '请输入正确的正则表达式')\n        }\n      } else {\n        callback(true) // 不填写或者填写 null 代表不进行任何操作\n      }\n    },\n\n    add() {\n      this.edit({})\n    },\n    edit(record) {\n      this.form.resetFields()\n      this.tabs.activeKey = this.tabs.design.key\n      this.tabs.global.dataSource = []\n      this.tabs.design.dataSource = [{ digits: '', pattern: '', message: '' }]\n      this.model = Object.assign({}, record)\n      this.visible = true\n      this.$nextTick(() => {\n        this.form.setFieldsValue(pick(this.model, 'ruleName', 'ruleCode', 'ruleDescription'))\n        // 子表数据\n        let ruleJson = this.model.ruleJson\n        if (ruleJson) {\n          let ruleList = JSON.parse(ruleJson)\n          // 筛选出全局规则和局部规则\n          let global = [], design = [], priority = '1'\n          ruleList.forEach(rule => {\n            if (rule.digits === '*') {\n              global.push(Object.assign(rule, { priority }))\n            } else {\n              priority = '0'\n              design.push(rule)\n            }\n          })\n          this.tabs.global.dataSource = global\n          this.tabs.design.dataSource = design\n        }\n      })\n    },\n    close() {\n      this.$emit('close')\n      this.visible = false\n    },\n    handleOk() {\n      Promise.all([\n        // 主表单校验\n        alwaysResolve(new Promise((resolve, reject) => {\n          this.form.validateFields((error, values) => error ? reject(error) : resolve(values))\n        })),\n        // 局部规则子表校验\n        alwaysResolve(this.$refs.designTable.getValuesPromise),\n        // 全局规则子表校验\n        alwaysResolve(this.$refs.globalTable.getValuesPromise),\n      ]).then(results => {\n        let [mainResult, designResult, globalResult] = results\n\n        if (mainResult.type === failedSymbol) {\n          return Promise.reject('主表校验未通过')\n        } else if (designResult.type === failedSymbol) {\n          this.tabs.activeKey = this.tabs.design.key\n          return Promise.reject('局部规则子表校验未通过')\n        } else if (globalResult.type === failedSymbol) {\n          this.tabs.activeKey = this.tabs.global.key\n          return Promise.reject('全局规则子表校验未通过')\n        } else {\n          // 所有校验已通过，这一步是整合数据\n          let mainValues = mainResult.data, globalValues = globalResult.data, designValues = designResult.data\n\n          // 整合两个子表的数据\n          let firstGlobal = [], afterGlobal = []\n          globalValues.forEach(v => {\n            v.digits = '*'\n            if (v.priority === '1') {\n              firstGlobal.push(v)\n            } else {\n              afterGlobal.push(v)\n            }\n          })\n          let concatValues = firstGlobal.concat(designValues).concat(afterGlobal)\n          let subValues = concatValues.map(i => pick(i, 'digits', 'pattern', 'message'))\n\n          // 生成 formData，用于传入后台\n          let ruleJson = JSON.stringify(subValues)\n          let formData = Object.assign(this.model, mainValues, { ruleJson })\n\n          // 判断请求方式和请求地址，并发送请求\n          let method = 'post', httpUrl = this.url.add\n          if (this.model.id) {\n            method = 'put'\n            httpUrl = this.url.edit\n          }\n          this.confirmLoading = true\n          return httpAction(httpUrl, formData, method)\n        }\n      }).then((res) => {\n        if (res.success) {\n          this.$message.success(res.message)\n          this.$emit('ok')\n          this.close()\n        } else {\n          this.$message.warning(res.message)\n        }\n      }).catch(e => {\n        console.error(e)\n      }).finally(() => {\n        this.confirmLoading = false\n      })\n    },\n    handleCancel() {\n      this.close()\n    },\n\n  }\n}\n",{"version":3,"sources":["SysCheckRuleModal.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAgfile":"SysCheckRuleModal.vue","sourceRoot":"src/views/system/modules","sourcesContent":["<template>\n  <a-modal\n    :title=\"title\"\n    :width=\"1000\"\n    :visible=\"visible\"\n    :confirmLoading=\"confirmLoading\"\n    @ok=\"handleOk\"\n    @cancel=\"handleCancel\"\n    cancelText=\"关闭\">\n\n    <a-spin :spinning=\"confirmLoading\">\n      <a-form :form=\"form\">\n\n        <a-form-item\n          :labelCol=\"labelCol\"\n          :wrapperCol=\"wrapperCol\"\n          label=\"规则名称\">\n          <a-input placeholder=\"请输入规则名称\" v-decorator=\"['ruleName', validatorRules.ruleName]\"/>\n        </a-form-item>\n        <a-form-item\n          :labelCol=\"labelCol\"\n          :wrapperCol=\"wrapperCol\"\n          label=\"规则Code\">\n          <a-input placeholder=\"请输入规则Code\" v-decorator=\"['ruleCode', validatorRules.ruleCode]\"/>\n        </a-form-item>\n        <a-form-item\n          :labelCol=\"labelCol\"\n          :wrapperCol=\"wrapperCol\"\n          label=\"规则描述\">\n          <a-textarea placeholder=\"请输入规则描述\" v-decorator=\"['ruleDescription', {}]\"/>\n        </a-form-item>\n\n      </a-form>\n      <!-- 规则设计 -->\n      <a-tabs v-model=\"tabs.activeKey\">\n        <a-tab-pane tab=\"局部规则\" :key=\"tabs.design.key\" forceRender>\n          <a-alert type=\"info\" showIcon message=\"局部规则按照你输入的位数有序的校验。\"/>\n          <j-editable-table\n            ref=\"designTable\"\n            dragSort\n            rowNumber\n            :maxHeight=\"240\"\n            :columns=\"tabs.design.columns\"\n            :dataSource=\"tabs.design.dataSource\"\n            style=\"margin-top: 8px;\"\n          >\n\n            <template #action=\"props\">\n              <my-action-button :rowEvent=\"props\"/>\n            </template>\n\n          </j-editable-table>\n        </a-tab-pane>\n        <a-tab-pane tab=\"全局规则\" :key=\"tabs.global.key\" forceRender>\n          <j-editable-table\n            ref=\"globalTable\"\n            dragSort\n            rowNumber\n            actionButton\n            :maxHeight=\"240\"\n            :columns=\"tabs.global.columns\"\n            :dataSource=\"tabs.global.dataSource\"\n          >\n\n            <template #actionButtonAfter>\n              <a-alert type=\"info\" showIcon message=\"全局规则可校验用户输入的所有字符；全局规则的优先级比局部规则的要高。\" style=\"margin-bottom: 8px;\"/>\n            </template>\n\n            <template #action=\"props\">\n              <my-action-button :rowEvent=\"props\" allowEmpty/>\n            </template>\n\n          </j-editable-table>\n        </a-tab-pane>\n      </a-tabs>\n    </a-spin>\n  </a-modal>\n</template>\n\n<script>\n  import pick from 'lodash.pick'\n  import { httpAction } from '@/api/manage'\n  import { validateDuplicateValue, alwaysResolve, failedSymbol } from '@/utils/util'\n  import { FormTypes } from '@/utils/JEditableTableUtil'\n  import JEditableTable from '@comp/jeecg/JEditableTable'\n\n  export default {\n    name: 'SysCheckRuleModal',\n    components: {\n      JEditableTable,\n      'my-action-button': {\n        props: { rowEvent: Object, allowEmpty: Boolean },\n        methods: {\n          confirmIsShow() {\n            const { index, allValues: { inputValues } } = this.rowEvent\n            let value = inputValues[index]\n            return value.digits || value.pattern\n          },\n          handleLineAdd() {\n            const { target } = this.rowEvent\n            target.add()\n          },\n          handleLineDelete() {\n            const { rowId, target } = this.rowEvent\n            target.removeRows(rowId)\n          },\n          renderDeleteButton() {\n            if (this.allowEmpty || this.rowEvent.index > 0) {\n              if (this.confirmIsShow()) {\n                return (\n                  <a-popconfirm title=\"确定要删除吗？\" onConfirm={this.handleLineDelete}>\n                    <a-button icon=\"minus\"/>\n                  </a-popconfirm>\n                )\n              } else {\n                return (\n                  <a-button icon=\"minus\" onClick={this.handleLineDelete}/>\n                )\n              }\n            }\n            return ''\n          },\n        },\n        render() {\n          return (\n            <div>\n              <a-button onClick={this.handleLineAdd} icon=\"plus\"/>\n              &nbsp;\n              {this.renderDeleteButton()}\n            </div>\n          )\n        }\n      }\n    },\n    data() {\n      return {\n        title: '操作',\n        visible: false,\n        model: {},\n        labelCol: {\n          xs: { span: 24 },\n          sm: { span: 5 },\n        },\n        wrapperCol: {\n          xs: { span: 24 },\n          sm: { span: 16 },\n        },\n        confirmLoading: false,\n        form: this.$form.createForm(this),\n        validatorRules: {\n          ruleName: { rules: [{ required: true, message: '请输入规则名称!' },] },\n          ruleCode: {\n            rules: [\n              { required: true, message: '请输入规则Code!' },\n              { validator: (rule, value, callback) => validateDuplicateValue('sys_check_rule', 'rule_code', value, this.model.id, callback) }\n            ]\n          },\n        },\n        tabs: {\n          activeKey: 'design',\n          global: {\n            key: 'global',\n            columns: [\n              {\n                title: '优先级',\n                key: 'priority',\n                width: '15%',\n                type: FormTypes.select,\n                defaultValue: '1',\n                options: [\n                  { title: '优先运行', value: '1' },\n                  { title: '最后运行', value: '0' },\n                ],\n                validateRules: []\n              },\n              {\n                title: '规则（正则表达式）',\n                key: 'pattern',\n                width: '50%',\n                type: FormTypes.input,\n                validateRules: [\n                  { required: true, message: '规则不能为空' },\n                  { handler: this.validatePatternHandler },\n                ]\n              },\n              {\n                title: '提示文本',\n                key: 'message',\n                width: '20%',\n                type: FormTypes.input,\n                validateRules: [\n                  { required: true, message: '${title}不能为空' },\n                ]\n              },\n              {\n                title: '操作',\n                key: 'action',\n                width: '15%',\n                slotName: 'action',\n                type: FormTypes.slot\n              }\n            ],\n            dataSource: [],\n          },\n          design: {\n            key: 'design',\n            columns: [\n              {\n                title: '位数',\n                key: 'digits',\n                width: '15%',\n                type: FormTypes.inputNumber,\n                validateRules: [\n                  { required: true, message: '${title}不能为空' },\n                  { pattern: /^[1-9]\\d*$/, message: '请输入零以上的正整数' },\n                ]\n              },\n              {\n                title: '规则（正则表达式）',\n                key: 'pattern',\n                width: '50%',\n                type: FormTypes.input,\n                validateRules: [\n                  { required: true, message: '规则不能为空' },\n                  { handler: this.validatePatternHandler }\n                ]\n              },\n              {\n                title: '提示文本',\n                key: 'message',\n                width: '20%',\n                type: FormTypes.input,\n                validateRules: [\n                  { required: true, message: '${title}不能为空' },\n                ]\n              },\n              {\n                title: '操作',\n                key: 'action',\n                width: '15%',\n                slotName: 'action',\n                type: FormTypes.slot\n              },\n            ],\n            dataSource: [],\n          }\n        },\n        url: {\n          add: '/sys/checkRule/add',\n          edit: '/sys/checkRule/edit',\n        },\n      }\n    },\n    created() {\n    },\n    methods: {\n\n      validatePatternHandler(type, value, row, column, callback, target) {\n        if (type === 'blur' || type === 'getValues') {\n          try {\n            new RegExp(value)\n            callback(true)\n          } catch (e) {\n            callback(false, '请输入正确的正则表达式')\n          }\n        } else {\n          callback(true) // 不填写或者填写 null 代表不进行任何操作\n        }\n      },\n\n      add() {\n        this.edit({})\n      },\n      edit(record) {\n        this.form.resetFields()\n        this.tabs.activeKey = this.tabs.design.key\n        this.tabs.global.dataSource = []\n        this.tabs.design.dataSource = [{ digits: '', pattern: '', message: '' }]\n        this.model = Object.assign({}, record)\n        this.visible = true\n        this.$nextTick(() => {\n          this.form.setFieldsValue(pick(this.model, 'ruleName', 'ruleCode', 'ruleDescription'))\n          // 子表数据\n          let ruleJson = this.model.ruleJson\n          if (ruleJson) {\n            let ruleList = JSON.parse(ruleJson)\n            // 筛选出全局规则和局部规则\n            let global = [], design = [], priority = '1'\n            ruleList.forEach(rule => {\n              if (rule.digits === '*') {\n                global.push(Object.assign(rule, { priority }))\n              } else {\n                priority = '0'\n                design.push(rule)\n              }\n            })\n            this.tabs.global.dataSource = global\n            this.tabs.design.dataSource = design\n          }\n        })\n      },\n      close() {\n        this.$emit('close')\n        this.visible = false\n      },\n      handleOk() {\n        Promise.all([\n          // 主表单校验\n          alwaysResolve(new Promise((resolve, reject) => {\n            this.form.validateFields((error, values) => error ? reject(error) : resolve(values))\n          })),\n          // 局部规则子表校验\n          alwaysResolve(this.$refs.designTable.getValuesPromise),\n          // 全局规则子表校验\n          alwaysResolve(this.$refs.globalTable.getValuesPromise),\n        ]).then(results => {\n          let [mainResult, designResult, globalResult] = results\n\n          if (mainResult.type === failedSymbol) {\n            return Promise.reject('主表校验未通过')\n          } else if (designResult.type === failedSymbol) {\n            this.tabs.activeKey = this.tabs.design.key\n            return Promise.reject('局部规则子表校验未通过')\n          } else if (globalResult.type === failedSymbol) {\n            this.tabs.activeKey = this.tabs.global.key\n            return Promise.reject('全局规则子表校验未通过')\n          } else {\n            // 所有校验已通过，这一步是整合数据\n            let mainValues = mainResult.data, globalValues = globalResult.data, designValues = designResult.data\n\n            // 整合两个子表的数据\n            let firstGlobal = [], afterGlobal = []\n            globalValues.forEach(v => {\n              v.digits = '*'\n              if (v.priority === '1') {\n                firstGlobal.push(v)\n              } else {\n                afterGlobal.push(v)\n              }\n            })\n            let concatValues = firstGlobal.concat(designValues).concat(afterGlobal)\n            let subValues = concatValues.map(i => pick(i, 'digits', 'pattern', 'message'))\n\n            // 生成 formData，用于传入后台\n            let ruleJson = JSON.stringify(subValues)\n            let formData = Object.assign(this.model, mainValues, { ruleJson })\n\n            // 判断请求方式和请求地址，并发送请求\n            let method = 'post', httpUrl = this.url.add\n            if (this.model.id) {\n              method = 'put'\n              httpUrl = this.url.edit\n            }\n            this.confirmLoading = true\n            return httpAction(httpUrl, formData, method)\n          }\n        }).then((res) => {\n          if (res.success) {\n            this.$message.success(res.message)\n            this.$emit('ok')\n            this.close()\n          } else {\n            this.$message.warning(res.message)\n          }\n        }).catch(e => {\n          console.error(e)\n        }).finally(() => {\n          this.confirmLoading = false\n        })\n      },\n      handleCancel() {\n        this.close()\n      },\n\n    }\n  }\n</script>\n\n<style lang=\"less\" scoped></style>"]}]}