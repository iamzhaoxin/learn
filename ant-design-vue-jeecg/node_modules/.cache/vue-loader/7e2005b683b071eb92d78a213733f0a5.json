{"remainingRequest":"D:\\activiti\\project01\\jeecg-boot-activiti-master\\ant-design-vue-jeecg\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\activiti\\project01\\jeecg-boot-activiti-master\\ant-design-vue-jeecg\\src\\components\\jeecgbiz\\JSelectBizComponent\\JSelectBizComponentModal.vue?vue&type=style&index=0&id=790d3a66&lang=less&scoped=true&","dependencies":[{"path":"D:\\activiti\\project01\\jeecg-boot-activiti-master\\ant-design-vue-jeecg\\src\\components\\jeecgbiz\\JSelectBizComponent\\JSelectBizComponentModal.vue","mtime":1611914356000},{"path":"D:\\activiti\\project01\\jeecg-boot-activiti-master\\ant-design-vue-jeecg\\node_modules\\css-loader\\index.js","mtime":1620887942039},{"path":"D:\\activiti\\project01\\jeecg-boot-activiti-master\\ant-design-vue-jeecg\\node_modules\\vue-loader\\lib\\loaders\\stylePostLoader.js","mtime":1621061372054},{"path":"D:\\activiti\\project01\\jeecg-boot-activiti-master\\ant-design-vue-jeecg\\node_modules\\postcss-loader\\src\\index.js","mtime":1617935823297},{"path":"D:\\activiti\\project01\\jeecg-boot-activiti-master\\ant-design-vue-jeecg\\node_modules\\less-loader\\dist\\cjs.js","mtime":1621061389135},{"path":"D:\\activiti\\project01\\jeecg-boot-activiti-master\\ant-design-vue-jeecg\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1621061384845},{"path":"D:\\activiti\\project01\\jeecg-boot-activiti-master\\ant-design-vue-jeecg\\node_modules\\vue-loader\\lib\\index.js","mtime":1621061372054}],"contextDependencies":[],"result":["\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n.full-form-item {\n  display: flex;\n  margin-right: 0;\n\n  /deep/ .ant-form-item-control-wrapper {\n    flex: 1 1;\n    display: inline-block;\n  }\n}\n\n.j-inline-form {\n  /deep/ .ant-form-item {\n    margin-bottom: 12px;\n  }\n\n  /deep/ .ant-form-item-label {\n    line-height: 32px;\n    width: auto;\n  }\n\n  /deep/ .ant-form-item-control {\n    height: 32px;\n    line-height: 32px;\n  }\n}\n",{"version":3,"sources":["JSelectBizComponentModal.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA0VA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA","file":"JSelectBizComponentModal.vue","sourceRoot":"src/components/jeecgbiz/JSelectBizComponent","sourcesContent":["<template>\n  <j-modal\n    centered\n    :title=\"name + '选择'\"\n    :width=\"width\"\n    :visible=\"visible\"\n    switchFullscreen\n    @ok=\"handleOk\"\n    @cancel=\"close\"\n    cancelText=\"关闭\">\n\n    <a-row :gutter=\"18\">\n      <a-col :span=\"16\">\n        <!-- 查询区域 -->\n        <a-form layout=\"inline\" class=\"j-inline-form\">\n          <!-- 固定条件 -->\n          <a-form-item :label=\"(queryParamText||name)\">\n            <a-input v-model=\"queryParam[queryParamCode||valueKey]\" :placeholder=\"'请输入' + (queryParamText||name)\" @pressEnter=\"searchQuery\"/>\n          </a-form-item>\n          <!-- 动态生成的查询条件 -->\n          <j-select-biz-query-item v-if=\"queryConfig.length>0\" v-show=\"showMoreQueryItems\" :queryParam=\"queryParam\" :queryConfig=\"queryConfig\" @pressEnter=\"searchQuery\"/>\n          <!-- 按钮 -->\n          <a-button type=\"primary\" @click=\"searchQuery\" icon=\"search\">查询</a-button>\n          <a-button type=\"primary\" @click=\"searchReset\" icon=\"reload\" style=\"margin-left: 8px\">重置</a-button>\n          <a v-if=\"queryConfig.length>0\" @click=\"showMoreQueryItems=!showMoreQueryItems\" style=\"margin-left: 8px\">\n            {{ showMoreQueryItems ? '收起' : '展开' }}\n            <a-icon :type=\"showMoreQueryItems ? 'up' : 'down'\"/>\n          </a>\n        </a-form>\n\n        <a-table\n          size=\"middle\"\n          bordered\n          :rowKey=\"rowKey\"\n          :columns=\"innerColumns\"\n          :dataSource=\"dataSource\"\n          :pagination=\"ipagination\"\n          :loading=\"loading\"\n          :scroll=\"{ y: 240 }\"\n          :rowSelection=\"{selectedRowKeys, onChange: onSelectChange, type: multiple ? 'checkbox':'radio'}\"\n          :customRow=\"customRowFn\"\n          @change=\"handleTableChange\">\n        </a-table>\n\n      </a-col>\n      <a-col :span=\"8\">\n        <a-card :title=\"'已选' + name\" :bordered=\"false\" :head-style=\"{padding:0}\" :body-style=\"{padding:0}\">\n\n          <a-table size=\"middle\" :rowKey=\"rowKey\" bordered v-bind=\"selectedTable\">\n              <span slot=\"action\" slot-scope=\"text, record, index\">\n                <a @click=\"handleDeleteSelected(record, index)\">删除</a>\n              </span>\n          </a-table>\n\n        </a-card>\n      </a-col>\n    </a-row>\n  </j-modal>\n</template>\n\n<script>\n  import { getAction } from '@/api/manage'\n  import Ellipsis from '@/components/Ellipsis'\n  import { JeecgListMixin } from '@/mixins/JeecgListMixin'\n  import { cloneObject, pushIfNotExist } from '@/utils/util'\n  import JSelectBizQueryItem from './JSelectBizQueryItem'\n\n  export default {\n    name: 'JSelectBizComponentModal',\n    mixins: [JeecgListMixin],\n    components: {Ellipsis, JSelectBizQueryItem},\n    props: {\n      value: {\n        type: Array,\n        default: () => []\n      },\n      visible: {\n        type: Boolean,\n        default: false\n      },\n      valueKey: {\n        type: String,\n        required: true\n      },\n      multiple: {\n        type: Boolean,\n        default: true\n      },\n      width: {\n        type: Number,\n        default: 900\n      },\n\n      name: {\n        type: String,\n        default: ''\n      },\n      listUrl: {\n        type: String,\n        required: true,\n        default: ''\n      },\n      // 根据 value 获取显示文本的地址，例如存的是 username，可以通过该地址获取到 realname\n      valueUrl: {\n        type: String,\n        default: ''\n      },\n      displayKey: {\n        type: String,\n        default: null\n      },\n      columns: {\n        type: Array,\n        required: true,\n        default: () => []\n      },\n      // 查询条件Code\n      queryParamCode: {\n        type: String,\n        default: null\n      },\n      // 查询条件文字\n      queryParamText: {\n        type: String,\n        default: null\n      },\n      // 查询配置\n      queryConfig: {\n        type: Array,\n        default: () => []\n      },\n      rowKey: {\n        type: String,\n        default: 'id'\n      },\n      // 过长裁剪长度，设置为 -1 代表不裁剪\n      ellipsisLength: {\n        type: Number,\n        default: 12\n      },\n    },\n    data() {\n      return {\n        innerValue: [],\n        // 已选择列表\n        selectedTable: {\n          pagination: false,\n          scroll: { y: 240 },\n          columns: [\n            {\n              ...this.columns[0],\n              width: this.columns[0].widthRight || this.columns[0].width,\n            },\n            { title: '操作', dataIndex: 'action', align: 'center', width: 60, scopedSlots: { customRender: 'action' }, }\n          ],\n          dataSource: [],\n        },\n        renderEllipsis: (value) => (<ellipsis length={this.ellipsisLength}>{value}</ellipsis>),\n        url: { list: this.listUrl },\n        /* 分页参数 */\n        ipagination: {\n          current: 1,\n          pageSize: 5,\n          pageSizeOptions: ['5', '10', '20', '30'],\n          showTotal: (total, range) => {\n            return range[0] + '-' + range[1] + ' 共' + total + '条'\n          },\n          showQuickJumper: true,\n          showSizeChanger: true,\n          total: 0\n        },\n        options: [],\n        dataSourceMap: {},\n        showMoreQueryItems: false,\n      }\n    },\n    computed: {\n      // 表头\n      innerColumns() {\n        let columns = cloneObject(this.columns)\n        columns.forEach(column => {\n          // 给所有的列加上过长裁剪\n          if (this.ellipsisLength !== -1) {\n            column.customRender = (text) => this.renderEllipsis(text)\n          }\n        })\n        return columns\n      },\n    },\n    watch: {\n      value: {\n        deep: true,\n        immediate: true,\n        handler(val) {\n          this.innerValue = cloneObject(val)\n          this.selectedRowKeys = []\n          this.valueWatchHandler(val)\n          this.queryOptionsByValue(val)\n        }\n      },\n      dataSource: {\n        deep: true,\n        handler(val) {\n          this.emitOptions(val)\n          this.valueWatchHandler(this.innerValue)\n        }\n      },\n      selectedRowKeys: {\n        immediate: true,\n        deep: true,\n        handler(val) {\n          //update--begin--autor:scott-----date:20200927------for：选取职务名称出现全选 #1753-----\n          if(this.innerValue){\n            this.innerValue.length=0;\n          }\n          //update--end--autor:scott-----date:20200927------for：选取职务名称出现全选 #1753-----\n          this.selectedTable.dataSource = val.map(key => {\n            for (let data of this.dataSource) {\n              if (data[this.rowKey] === key) {\n                pushIfNotExist(this.innerValue, data[this.valueKey])\n                return data\n              }\n            }\n            for (let data of this.selectedTable.dataSource) {\n              if (data[this.rowKey] === key) {\n                pushIfNotExist(this.innerValue, data[this.valueKey])\n                return data\n              }\n            }\n            console.warn('未找到选择的行信息，key：' + key)\n            return {}\n          })\n        },\n      }\n    },\n\n    methods: {\n\n      /** 关闭弹窗 */\n      close() {\n        this.$emit('update:visible', false)\n      },\n\n      valueWatchHandler(val) {\n        val.forEach(item => {\n          this.dataSource.concat(this.selectedTable.dataSource).forEach(data => {\n            if (data[this.valueKey] === item) {\n              pushIfNotExist(this.selectedRowKeys, data[this.rowKey])\n            }\n          })\n        })\n      },\n\n      queryOptionsByValue(value) {\n        if (!value || value.length === 0) {\n          return\n        }\n        // 判断options是否存在value，如果已存在数据就不再请求后台了\n        let notExist = false\n        for (let val of value) {\n          let find = false\n          for (let option of this.options) {\n            if (val === option.value) {\n              find = true\n              break\n            }\n          }\n          if (!find) {\n            notExist = true\n            break\n          }\n        }\n        if (!notExist) return\n        getAction(this.valueUrl || this.listUrl, {\n          // 这里最后加一个 , 的原因是因为无论如何都要使用 in 查询，防止后台进行了模糊匹配，导致查询结果不准确\n          [this.valueKey]: value.join(',') + ',',\n          pageNo: 1,\n          pageSize: value.length\n        }).then((res) => {\n          if (res.success) {\n            let dataSource = res.result\n            if (!(dataSource instanceof Array)) {\n              dataSource = res.result.records\n            }\n            this.emitOptions(dataSource, (data) => {\n              pushIfNotExist(this.innerValue, data[this.valueKey])\n              pushIfNotExist(this.selectedRowKeys, data[this.rowKey])\n              pushIfNotExist(this.selectedTable.dataSource, data, this.rowKey)\n            })\n          }\n        })\n      },\n\n      emitOptions(dataSource, callback) {\n        dataSource.forEach(data => {\n          let key = data[this.valueKey]\n          this.dataSourceMap[key] = data\n          pushIfNotExist(this.options, { label: data[this.displayKey || this.valueKey], value: key }, 'value')\n          typeof callback === 'function' ? callback(data) : ''\n        })\n        this.$emit('options', this.options, this.dataSourceMap)\n      },\n\n      /** 完成选择 */\n      handleOk() {\n        let value = this.selectedTable.dataSource.map(data => data[this.valueKey])\n        this.$emit('input', value)\n        this.close()\n      },\n      /** 删除已选择的 */\n      handleDeleteSelected(record, index) {\n        this.selectedRowKeys.splice(this.selectedRowKeys.indexOf(record[this.rowKey]), 1)\n        //update--begin--autor:wangshuai-----date:20200722------for：JSelectBizComponent组件切换页数值问题------\n        this.selectedTable.dataSource.splice(this.selectedTable.dataSource.indexOf(record), 1)\n        this.innerValue.splice(this.innerValue.indexOf(record[this.valueKey]), 1)\n        console.log(\"this.selectedRowKeys:\",this.selectedRowKeys)\n        console.log(\"this.selectedTable.dataSource:\",this.selectedTable.dataSource)\n        //update--begin--autor:wangshuai-----date:20200722------for：JSelectBizComponent组件切换页数值问题------\n      },\n\n      customRowFn(record) {\n        return {\n          on: {\n            click: () => {\n              let key = record[this.rowKey]\n              if (!this.multiple) {\n                this.selectedRowKeys = [key]\n                this.selectedTable.dataSource = [record]\n              } else {\n                let index = this.selectedRowKeys.indexOf(key)\n                if (index === -1) {\n                  this.selectedRowKeys.push(key)\n                  this.selectedTable.dataSource.push(record)\n                } else {\n                  this.handleDeleteSelected(record, index)\n                }\n              }\n            }\n          }\n        }\n      },\n\n    }\n  }\n</script>\n<style lang=\"less\" scoped>\n  .full-form-item {\n    display: flex;\n    margin-right: 0;\n\n    /deep/ .ant-form-item-control-wrapper {\n      flex: 1 1;\n      display: inline-block;\n    }\n  }\n\n  .j-inline-form {\n    /deep/ .ant-form-item {\n      margin-bottom: 12px;\n    }\n\n    /deep/ .ant-form-item-label {\n      line-height: 32px;\n      width: auto;\n    }\n\n    /deep/ .ant-form-item-control {\n      height: 32px;\n      line-height: 32px;\n    }\n  }\n</style>"]}]}