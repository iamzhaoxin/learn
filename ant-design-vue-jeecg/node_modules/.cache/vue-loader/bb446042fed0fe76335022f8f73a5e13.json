{"remainingRequest":"D:\\activiti\\project01\\jeecg-boot-activiti-master\\ant-design-vue-jeecg\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\activiti\\project01\\jeecg-boot-activiti-master\\ant-design-vue-jeecg\\src\\components\\jeecg\\JVxeTable\\components\\cells\\JVxeUploadCell.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\activiti\\project01\\jeecg-boot-activiti-master\\ant-design-vue-jeecg\\src\\components\\jeecg\\JVxeTable\\components\\cells\\JVxeUploadCell.vue","mtime":1611914356000},{"path":"D:\\activiti\\project01\\jeecg-boot-activiti-master\\ant-design-vue-jeecg\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1621061384845},{"path":"D:\\activiti\\project01\\jeecg-boot-activiti-master\\ant-design-vue-jeecg\\node_modules\\babel-loader\\lib\\index.js","mtime":1621061377995},{"path":"D:\\activiti\\project01\\jeecg-boot-activiti-master\\ant-design-vue-jeecg\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1621061384845},{"path":"D:\\activiti\\project01\\jeecg-boot-activiti-master\\ant-design-vue-jeecg\\node_modules\\vue-loader\\lib\\index.js","mtime":1621061372054}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport JVxeCellMixins from '@/components/jeecg/JVxeTable/mixins/JVxeCellMixins'\nimport { ACCESS_TOKEN } from '@/store/mutation-types'\nimport { getFileAccessHttpUrl } from '@api/manage'\n\nexport default {\n  name: 'JVxeUploadCell',\n  mixins: [JVxeCellMixins],\n  props: {},\n  data() {\n    return {\n      innerFile: null,\n    }\n  },\n  computed: {\n    /** upload headers */\n    uploadHeaders() {\n      let {originColumn: col} = this\n      let headers = {}\n      if (col.token === true) {\n        headers['X-Access-Token'] = this.$ls.get(ACCESS_TOKEN)\n      }\n      return headers\n    },\n\n    hasFile() {\n      return this.innerFile != null\n    },\n\n  },\n  watch: {\n    innerValue: {\n      immediate: true,\n      handler() {\n        if (this.innerValue) {\n          this.innerFile = this.innerValue\n        } else {\n          this.innerFile = null\n        }\n      },\n    },\n  },\n  methods: {\n\n    handleChangeUpload(info) {\n      let {row, originColumn: col} = this\n      let {file} = info\n      let value = {\n        name: file.name,\n        type: file.type,\n        size: file.size,\n        status: file.status,\n        percent: file.percent\n      }\n      if (col.responseName && file.response) {\n        value['responseName'] = file.response[col.responseName]\n      }\n      if (file.status === 'done') {\n        value['path'] = file.response[col.responseName]\n        this.handleChangeCommon(value)\n      } else if (file.status === 'error') {\n        value['message'] = file.response.message || '未知错误'\n      }\n      this.innerFile = value\n    },\n\n    // handleClickPreviewFile(id) {\n    //   this.$message.info('尚未实现')\n    // },\n\n    handleClickDownloadFile(id) {\n      let {path} = this.value || {}\n      if (path) {\n        let url = getFileAccessHttpUrl(path)\n        window.open(url)\n      }\n    },\n\n    handleClickDeleteFile() {\n      this.handleChangeCommon(null)\n    },\n\n  },\n  // 【组件增强】注释详见：JVxeCellMixins.js\n  enhanced: {\n    switches: {visible: true},\n    getValue: value => fileGetValue(value),\n    setValue: value => fileSetValue(value),\n  }\n}\n\nfunction fileGetValue(value) {\n  if (value && value.path) {\n    return value.path\n  }\n  return value\n}\n\nfunction fileSetValue(value) {\n  if (value) {\n    let first = value.split(',')[0]\n    let name = first.substring(first.lastIndexOf('/') + 1)\n    return {\n      name: name,\n      path: value,\n      status: 'done',\n    }\n  }\n  return value\n}\n\n",{"version":3,"sources":["JVxeUploadCell.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA+DA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"JVxeUploadCell.vue","sourceRoot":"src/components/jeecg/JVxeTable/components/cells","sourcesContent":["<template>\n  <div>\n    <template v-if=\"hasFile\" v-for=\"(file, fileKey) of [innerFile || {}]\">\n      <a-input\n        :key=\"fileKey\"\n        :readOnly=\"true\"\n        :value=\"file.name\"\n      >\n\n        <template slot=\"addonBefore\" style=\"width: 30px\">\n          <a-tooltip v-if=\"file.status === 'uploading'\" :title=\"`上传中(${Math.floor(file.percent)}%)`\">\n            <a-icon type=\"loading\"/>\n          </a-tooltip>\n          <a-tooltip v-else-if=\"file.status === 'done'\" title=\"上传完成\">\n            <a-icon type=\"check-circle\" style=\"color:#00DB00;\"/>\n          </a-tooltip>\n          <a-tooltip v-else title=\"上传失败\">\n            <a-icon type=\"exclamation-circle\" style=\"color:red;\"/>\n          </a-tooltip>\n        </template>\n\n        <span v-if=\"file.status === 'uploading'\" slot=\"addonAfter\">{{ Math.floor(file.percent) }}%</span>\n        <template v-else-if=\"originColumn.allowDownload !== false || originColumn.allowRemove !== false\" slot=\"addonAfter\">\n          <a-dropdown :trigger=\"['click']\" placement=\"bottomRight\">\n            <a-tooltip title=\"操作\">\n              <a-icon\n                type=\"setting\"\n                style=\"cursor: pointer;\"/>\n            </a-tooltip>\n\n            <a-menu slot=\"overlay\">\n              <!-- <a-menu-item @click=\"handleClickPreviewFile\">-->\n              <!--  <span><a-icon type=\"eye\"/>&nbsp;预览</span>-->\n              <!-- </a-menu-item>-->\n              <a-menu-item v-if=\"originColumn.allowDownload !== false\" @click=\"handleClickDownloadFile\">\n                <span><a-icon type=\"download\"/>&nbsp;下载</span>\n              </a-menu-item>\n              <a-menu-item v-if=\"originColumn.allowRemove !== false\" @click=\"handleClickDeleteFile\">\n                <span><a-icon type=\"delete\"/>&nbsp;删除</span>\n              </a-menu-item>\n            </a-menu>\n          </a-dropdown>\n        </template>\n\n      </a-input>\n    </template>\n    <a-upload\n      v-show=\"!hasFile\"\n      name=\"file\"\n      :data=\"{'isup': 1}\"\n      :multiple=\"false\"\n      :action=\"originColumn.action\"\n      :headers=\"uploadHeaders\"\n      :showUploadList=\"false\"\n      v-bind=\"cellProps\"\n      @change=\"handleChangeUpload\"\n    >\n      <a-button icon=\"upload\">{{originColumn.btnText || '点击上传'}}</a-button>\n    </a-upload>\n  </div>\n</template>\n\n<script>\n  import JVxeCellMixins from '@/components/jeecg/JVxeTable/mixins/JVxeCellMixins'\n  import { ACCESS_TOKEN } from '@/store/mutation-types'\n  import { getFileAccessHttpUrl } from '@api/manage'\n\n  export default {\n    name: 'JVxeUploadCell',\n    mixins: [JVxeCellMixins],\n    props: {},\n    data() {\n      return {\n        innerFile: null,\n      }\n    },\n    computed: {\n      /** upload headers */\n      uploadHeaders() {\n        let {originColumn: col} = this\n        let headers = {}\n        if (col.token === true) {\n          headers['X-Access-Token'] = this.$ls.get(ACCESS_TOKEN)\n        }\n        return headers\n      },\n\n      hasFile() {\n        return this.innerFile != null\n      },\n\n    },\n    watch: {\n      innerValue: {\n        immediate: true,\n        handler() {\n          if (this.innerValue) {\n            this.innerFile = this.innerValue\n          } else {\n            this.innerFile = null\n          }\n        },\n      },\n    },\n    methods: {\n\n      handleChangeUpload(info) {\n        let {row, originColumn: col} = this\n        let {file} = info\n        let value = {\n          name: file.name,\n          type: file.type,\n          size: file.size,\n          status: file.status,\n          percent: file.percent\n        }\n        if (col.responseName && file.response) {\n          value['responseName'] = file.response[col.responseName]\n        }\n        if (file.status === 'done') {\n          value['path'] = file.response[col.responseName]\n          this.handleChangeCommon(value)\n        } else if (file.status === 'error') {\n          value['message'] = file.response.message || '未知错误'\n        }\n        this.innerFile = value\n      },\n\n      // handleClickPreviewFile(id) {\n      //   this.$message.info('尚未实现')\n      // },\n\n      handleClickDownloadFile(id) {\n        let {path} = this.value || {}\n        if (path) {\n          let url = getFileAccessHttpUrl(path)\n          window.open(url)\n        }\n      },\n\n      handleClickDeleteFile() {\n        this.handleChangeCommon(null)\n      },\n\n    },\n    // 【组件增强】注释详见：JVxeCellMixins.js\n    enhanced: {\n      switches: {visible: true},\n      getValue: value => fileGetValue(value),\n      setValue: value => fileSetValue(value),\n    }\n  }\n\n  function fileGetValue(value) {\n    if (value && value.path) {\n      return value.path\n    }\n    return value\n  }\n\n  function fileSetValue(value) {\n    if (value) {\n      let first = value.split(',')[0]\n      let name = first.substring(first.lastIndexOf('/') + 1)\n      return {\n        name: name,\n        path: value,\n        status: 'done',\n      }\n    }\n    return value\n  }\n\n</script>\n\n<style scoped>\n\n</style>"]}]}