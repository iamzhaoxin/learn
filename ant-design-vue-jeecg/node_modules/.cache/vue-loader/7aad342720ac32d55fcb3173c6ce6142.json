{"remainingRequest":"D:\\activiti\\project01\\jeecg-boot-activiti-master\\ant-design-vue-jeecg\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\activiti\\project01\\jeecg-boot-activiti-master\\ant-design-vue-jeecg\\src\\components\\jeecgbiz\\modal\\JSelectDepartModal.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\activiti\\project01\\jeecg-boot-activiti-master\\ant-design-vue-jeecg\\src\\components\\jeecgbiz\\modal\\JSelectDepartModal.vue","mtime":1611914356000},{"path":"D:\\activiti\\project01\\jeecg-boot-activiti-master\\ant-design-vue-jeecg\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1621061384845},{"path":"D:\\activiti\\project01\\jeecg-boot-activiti-master\\ant-design-vue-jeecg\\node_modules\\babel-loader\\lib\\index.js","mtime":1621061377995},{"path":"D:\\activiti\\project01\\jeecg-boot-activiti-master\\ant-design-vue-jeecg\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1621061384845},{"path":"D:\\activiti\\project01\\jeecg-boot-activiti-master\\ant-design-vue-jeecg\\node_modules\\vue-loader\\lib\\index.js","mtime":1621061372054}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport { queryDepartTreeList } from '@/api/api'\nexport default {\n  name: 'JSelectDepartModal',\n  props:['modalWidth','multi','rootOpened','departId'],\n  data(){\n    return {\n      visible:false,\n      confirmLoading:false,\n      treeData:[],\n      autoExpandParent:true,\n      expandedKeys:[],\n      dataList:[],\n      checkedKeys:[],\n      checkedRows:[],\n      searchValue:\"\"\n    }\n  },\n  created(){\n    this.loadDepart();\n  },\n  watch:{\n    departId(){\n      this.initDepartComponent()\n    },\n    visible: {\n      handler() {\n        if (this.departId) {\n          this.checkedKeys = this.departId.split(\",\");\n          // console.log('this.departId', this.departId)\n        } else {\n          this.checkedKeys = [];\n        }\n      }\n    }\n  },\n  methods:{\n    show(){\n      this.visible=true\n      this.checkedRows=[]\n      this.checkedKeys=[]\n    },\n    loadDepart(){\n      queryDepartTreeList().then(res=>{\n        if(res.success){\n          let arr = [...res.result]\n          this.reWriterWithSlot(arr)\n          this.treeData = arr\n          this.initDepartComponent()\n          if(this.rootOpened){\n            this.initExpandedKeys(res.result)\n          }\n        }\n      })\n    },\n    initDepartComponent(){\n      let names = ''\n      if(this.departId){\n        let currDepartId = this.departId\n        for(let item of this.dataList){\n          if(currDepartId.indexOf(item.key)>=0){\n            names+=\",\"+item.title\n          }\n        }\n        if(names){\n          names = names.substring(1)\n        }\n      }\n      this.$emit(\"initComp\",names)\n    },\n    reWriterWithSlot(arr){\n      for(let item of arr){\n        if(item.children && item.children.length>0){\n          this.reWriterWithSlot(item.children)\n          let temp = Object.assign({},item)\n          temp.children = {}\n          this.dataList.push(temp)\n        }else{\n          this.dataList.push(item)\n          item.scopedSlots={ title: 'title' }\n        }\n      }\n    },\n    initExpandedKeys(arr){\n      if(arr && arr.length>0){\n        let keys = []\n        for(let item of arr){\n          if(item.children && item.children.length>0){\n            keys.push(item.id)\n          }\n        }\n        this.expandedKeys=[...keys]\n      }else{\n        this.expandedKeys=[]\n      }\n    },\n    onCheck (checkedKeys,info) {\n      if(!this.multi){\n        let arr = checkedKeys.checked.filter(item => this.checkedKeys.indexOf(item) < 0)\n        this.checkedKeys = [...arr]\n        this.checkedRows = (this.checkedKeys.length === 0) ? [] : [info.node.dataRef]\n      }else{\n        this.checkedKeys = checkedKeys.checked\n        this.checkedRows = this.getCheckedRows(this.checkedKeys)\n      }\n    },\n    onSelect(selectedKeys,info) {\n      let keys = []\n      keys.push(selectedKeys[0])\n      if(!this.checkedKeys || this.checkedKeys.length===0 || !this.multi){\n        this.checkedKeys = [...keys]\n        this.checkedRows=[info.node.dataRef]\n      }else{\n        let currKey = info.node.dataRef.key\n        if(this.checkedKeys.indexOf(currKey)>=0){\n          this.checkedKeys = this.checkedKeys.filter(item=> item !==currKey)\n        }else{\n          this.checkedKeys.push(...keys)\n        }\n      }\n      this.checkedRows = this.getCheckedRows(this.checkedKeys)\n    },\n    onExpand (expandedKeys) {\n      this.expandedKeys = expandedKeys\n      this.autoExpandParent = false\n    },\n    handleSubmit(){\n      if(!this.checkedKeys || this.checkedKeys.length==0){\n        this.$emit(\"ok\",'')\n      }else{\n        this.$emit(\"ok\",this.checkedRows,this.checkedKeys.join(\",\"))\n      }\n      this.handleClear()\n    },\n    handleCancel(){\n      this.handleClear()\n    },\n    handleClear(){\n      this.visible=false\n      this.checkedKeys=[]\n    },\n    getParentKey(currKey,treeData){\n      let parentKey\n      for (let i = 0; i < treeData.length; i++) {\n        const node = treeData[i]\n        if (node.children) {\n          if (node.children.some(item => item.key === currKey)) {\n            parentKey = node.key\n          } else if (this.getParentKey(currKey, node.children)) {\n            parentKey = this.getParentKey(currKey, node.children)\n          }\n        }\n      }\n      return parentKey\n    },\n    onSearch(value){\n      const expandedKeys = this.dataList.map((item) => {\n        if (item.title.indexOf(value) > -1) {\n          return this.getParentKey(item.key,this.treeData)\n        }\n        return null\n      }).filter((item, i, self) => item && self.indexOf(item) === i)\n\n      Object.assign(this, {\n        expandedKeys,\n        searchValue: value,\n        autoExpandParent: true,\n      })\n\n\n    },\n    // 根据 checkedKeys 获取 rows\n    getCheckedRows(checkedKeys) {\n      const forChildren = (list, key) => {\n        for (let item of list) {\n          if (item.id === key) {\n            return item\n          }\n          if (item.children instanceof Array) {\n            let value = forChildren(item.children, key)\n            if (value != null) {\n              return value\n            }\n          }\n        }\n        return null\n      }\n\n      let rows = []\n      for (let key of checkedKeys) {\n        let row = forChildren(this.treeData, key)\n        if (row != null) {\n          rows.push(row)\n        }\n      }\n      return rows\n    }\n  }\n}\n\n",{"version":3,"sources":["JSelectDepartModal.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAufile":"JSelectDepartModal.vue","sourceRoot":"src/components/jeecgbiz/modal","sourcesContent":["<template>\n  <j-modal\n    title=\"选择部门\"\n    :width=\"modalWidth\"\n    :visible=\"visible\"\n    :confirmLoading=\"confirmLoading\"\n    @ok=\"handleSubmit\"\n    @cancel=\"handleCancel\"\n    switchFullscreen\n    cancelText=\"关闭\">\n    <a-spin tip=\"Loading...\" :spinning=\"false\">\n      <a-input-search style=\"margin-bottom: 1px\" placeholder=\"请输入部门名称按回车进行搜索\" @search=\"onSearch\" />\n      <a-tree\n        checkable\n        class=\"my-dept-select-tree\"\n        :treeData=\"treeData\"\n        :checkStrictly=\"true\"\n        @check=\"onCheck\"\n        @select=\"onSelect\"\n        @expand=\"onExpand\"\n        :autoExpandParent=\"autoExpandParent\"\n        :expandedKeys=\"expandedKeys\"\n        :checkedKeys=\"checkedKeys\">\n\n        <template slot=\"title\" slot-scope=\"{title}\">\n          <span v-if=\"title.indexOf(searchValue) > -1\">\n            {{title.substr(0, title.indexOf(searchValue))}}\n            <span style=\"color: #f50\">{{searchValue}}</span>\n            {{title.substr(title.indexOf(searchValue) + searchValue.length)}}\n          </span>\n          <span v-else>{{title}}</span>\n        </template>\n      </a-tree>\n\n    </a-spin>\n  </j-modal>\n</template>\n\n<script>\n  import { queryDepartTreeList } from '@/api/api'\n  export default {\n    name: 'JSelectDepartModal',\n    props:['modalWidth','multi','rootOpened','departId'],\n    data(){\n      return {\n        visible:false,\n        confirmLoading:false,\n        treeData:[],\n        autoExpandParent:true,\n        expandedKeys:[],\n        dataList:[],\n        checkedKeys:[],\n        checkedRows:[],\n        searchValue:\"\"\n      }\n    },\n    created(){\n      this.loadDepart();\n    },\n    watch:{\n      departId(){\n        this.initDepartComponent()\n      },\n      visible: {\n        handler() {\n          if (this.departId) {\n            this.checkedKeys = this.departId.split(\",\");\n            // console.log('this.departId', this.departId)\n          } else {\n            this.checkedKeys = [];\n          }\n        }\n      }\n    },\n    methods:{\n      show(){\n        this.visible=true\n        this.checkedRows=[]\n        this.checkedKeys=[]\n      },\n      loadDepart(){\n        queryDepartTreeList().then(res=>{\n          if(res.success){\n            let arr = [...res.result]\n            this.reWriterWithSlot(arr)\n            this.treeData = arr\n            this.initDepartComponent()\n            if(this.rootOpened){\n              this.initExpandedKeys(res.result)\n            }\n          }\n        })\n      },\n      initDepartComponent(){\n        let names = ''\n        if(this.departId){\n          let currDepartId = this.departId\n          for(let item of this.dataList){\n            if(currDepartId.indexOf(item.key)>=0){\n              names+=\",\"+item.title\n            }\n          }\n          if(names){\n            names = names.substring(1)\n          }\n        }\n        this.$emit(\"initComp\",names)\n      },\n      reWriterWithSlot(arr){\n        for(let item of arr){\n          if(item.children && item.children.length>0){\n            this.reWriterWithSlot(item.children)\n            let temp = Object.assign({},item)\n            temp.children = {}\n            this.dataList.push(temp)\n          }else{\n            this.dataList.push(item)\n            item.scopedSlots={ title: 'title' }\n          }\n        }\n      },\n      initExpandedKeys(arr){\n        if(arr && arr.length>0){\n          let keys = []\n          for(let item of arr){\n            if(item.children && item.children.length>0){\n              keys.push(item.id)\n            }\n          }\n          this.expandedKeys=[...keys]\n        }else{\n          this.expandedKeys=[]\n        }\n      },\n      onCheck (checkedKeys,info) {\n        if(!this.multi){\n          let arr = checkedKeys.checked.filter(item => this.checkedKeys.indexOf(item) < 0)\n          this.checkedKeys = [...arr]\n          this.checkedRows = (this.checkedKeys.length === 0) ? [] : [info.node.dataRef]\n        }else{\n          this.checkedKeys = checkedKeys.checked\n          this.checkedRows = this.getCheckedRows(this.checkedKeys)\n        }\n      },\n      onSelect(selectedKeys,info) {\n        let keys = []\n        keys.push(selectedKeys[0])\n        if(!this.checkedKeys || this.checkedKeys.length===0 || !this.multi){\n          this.checkedKeys = [...keys]\n          this.checkedRows=[info.node.dataRef]\n        }else{\n          let currKey = info.node.dataRef.key\n          if(this.checkedKeys.indexOf(currKey)>=0){\n            this.checkedKeys = this.checkedKeys.filter(item=> item !==currKey)\n          }else{\n            this.checkedKeys.push(...keys)\n          }\n        }\n        this.checkedRows = this.getCheckedRows(this.checkedKeys)\n      },\n      onExpand (expandedKeys) {\n        this.expandedKeys = expandedKeys\n        this.autoExpandParent = false\n      },\n      handleSubmit(){\n        if(!this.checkedKeys || this.checkedKeys.length==0){\n          this.$emit(\"ok\",'')\n        }else{\n          this.$emit(\"ok\",this.checkedRows,this.checkedKeys.join(\",\"))\n        }\n        this.handleClear()\n      },\n      handleCancel(){\n        this.handleClear()\n      },\n      handleClear(){\n        this.visible=false\n        this.checkedKeys=[]\n      },\n      getParentKey(currKey,treeData){\n        let parentKey\n        for (let i = 0; i < treeData.length; i++) {\n          const node = treeData[i]\n          if (node.children) {\n            if (node.children.some(item => item.key === currKey)) {\n              parentKey = node.key\n            } else if (this.getParentKey(currKey, node.children)) {\n              parentKey = this.getParentKey(currKey, node.children)\n            }\n          }\n        }\n        return parentKey\n      },\n      onSearch(value){\n        const expandedKeys = this.dataList.map((item) => {\n          if (item.title.indexOf(value) > -1) {\n            return this.getParentKey(item.key,this.treeData)\n          }\n          return null\n        }).filter((item, i, self) => item && self.indexOf(item) === i)\n\n        Object.assign(this, {\n          expandedKeys,\n          searchValue: value,\n          autoExpandParent: true,\n        })\n\n\n      },\n      // 根据 checkedKeys 获取 rows\n      getCheckedRows(checkedKeys) {\n        const forChildren = (list, key) => {\n          for (let item of list) {\n            if (item.id === key) {\n              return item\n            }\n            if (item.children instanceof Array) {\n              let value = forChildren(item.children, key)\n              if (value != null) {\n                return value\n              }\n            }\n          }\n          return null\n        }\n\n        let rows = []\n        for (let key of checkedKeys) {\n          let row = forChildren(this.treeData, key)\n          if (row != null) {\n            rows.push(row)\n          }\n        }\n        return rows\n      }\n    }\n  }\n\n</script>\n\n<style lang=\"less\" scoped>\n  // 限制部门选择树高度，避免部门太多时点击确定不便\n  .my-dept-select-tree{\n    height: 350px;\n    overflow-y: scroll;\n  }\n\n</style>"]}]}