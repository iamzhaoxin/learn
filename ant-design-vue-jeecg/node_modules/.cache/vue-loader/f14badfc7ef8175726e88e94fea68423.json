{"remainingRequest":"D:\\activiti\\project01\\jeecg-boot-activiti-master\\ant-design-vue-jeecg\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\activiti\\project01\\jeecg-boot-activiti-master\\ant-design-vue-jeecg\\src\\components\\jeecg\\JCategorySelect.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\activiti\\project01\\jeecg-boot-activiti-master\\ant-design-vue-jeecg\\src\\components\\jeecg\\JCategorySelect.vue","mtime":1611914356000},{"path":"D:\\activiti\\project01\\jeecg-boot-activiti-master\\ant-design-vue-jeecg\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1621061384845},{"path":"D:\\activiti\\project01\\jeecg-boot-activiti-master\\ant-design-vue-jeecg\\node_modules\\babel-loader\\lib\\index.js","mtime":1621061377995},{"path":"D:\\activiti\\project01\\jeecg-boot-activiti-master\\ant-design-vue-jeecg\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1621061384845},{"path":"D:\\activiti\\project01\\jeecg-boot-activiti-master\\ant-design-vue-jeecg\\node_modules\\vue-loader\\lib\\index.js","mtime":1621061372054}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\n\nimport { getAction } from '@/api/manage'\n\nexport default {\n  name: 'JCategorySelect',\n  props: {\n    value:{\n      type: String,\n      required: false\n    },\n    placeholder:{\n      type: String,\n      default: '请选择',\n      required: false\n    },\n    disabled:{\n      type:Boolean,\n      default:false,\n      required:false\n    },\n    condition:{\n      type:String,\n      default:'',\n      required:false\n    },\n    // 是否支持多选\n    multiple: {\n      type: Boolean,\n      default: false,\n    },\n    loadTriggleChange:{\n      type: Boolean,\n      default: false,\n      required:false\n    },\n    pid:{\n      type:String,\n      default:'',\n      required:false\n    },\n    pcode:{\n      type:String,\n      default:'',\n      required:false\n    },\n    back:{\n      type:String,\n      default:'',\n      required:false\n    }\n  },\n  data () {\n    return {\n      treeValue:\"\",\n      treeData:[],\n      url:\"/sys/category/loadTreeData\",\n      view:'/sys/category/loadDictItem/',\n      tableName:\"\",\n      text:\"\",\n      code:\"\",\n\n    }\n  },\n  watch: {\n    value () {\n      this.loadItemByCode()\n    },\n    pcode(){\n      this.loadRoot();\n    }\n  },\n  created(){\n    this.validateProp().then(()=>{\n      this.loadRoot()\n      this.loadItemByCode()\n    })\n  },\n  methods: {\n    /**加载一级节点 */\n    loadRoot(){\n      let param = {\n        pid:this.pid,\n        pcode:!this.pcode?'0':this.pcode,\n        condition:this.condition\n      }\n      getAction(this.url,param).then(res=>{\n        if(res.success && res.result){\n          for(let i of res.result){\n            i.value = i.key\n            if(i.leaf==false){\n              i.isLeaf=false\n            }else if(i.leaf==true){\n              i.isLeaf=true\n            }\n          }\n          this.treeData = [...res.result]\n        }else{\n          console.log(\"树一级节点查询结果-else\",res)\n        }\n      })\n    },\n\n    /** 数据回显*/\n    loadItemByCode(){\n      if(!this.value || this.value==\"0\"){\n        this.treeValue = []\n      }else{\n        getAction(this.view,{ids:this.value}).then(res=>{\n          if(res.success){\n            let values = this.value.split(',')\n            this.treeValue = res.result.map((item, index) => ({\n              key: values[index],\n              value: values[index],\n              label: item\n            }))\n            this.onLoadTriggleChange(res.result[0]);\n          }\n        })\n      }\n    },\n    onLoadTriggleChange(text){\n      //只有单选才会触发\n      if(!this.multiple && this.loadTriggleChange){\n        this.backValue(this.value,text)\n      }\n    },\n    backValue(value,label){\n      let obj = {}\n      if(this.back){\n        obj[this.back] = label\n      }\n      this.$emit('change', value, obj)\n    },\n    asyncLoadTreeData (treeNode) {\n      return new Promise((resolve) => {\n        if (treeNode.$vnode.children) {\n          resolve()\n          return\n        }\n        let pid = treeNode.$vnode.key\n        let param = {\n          pid:pid,\n          condition:this.condition\n        }\n        getAction(this.url,param).then(res=>{\n          if(res.success){\n            for(let i of res.result){\n              i.value = i.key\n              if(i.leaf==false){\n                i.isLeaf=false\n              }else if(i.leaf==true){\n                i.isLeaf=true\n              }\n            }\n            this.addChildren(pid,res.result,this.treeData)\n            this.treeData = [...this.treeData]\n          }\n          resolve()\n        })\n      })\n    },\n    addChildren(pid,children,treeArray){\n      if(treeArray && treeArray.length>0){\n        for(let item of treeArray){\n          if(item.key == pid){\n            if(!children || children.length==0){\n              item.isLeaf=true\n            }else{\n              item.children = children\n            }\n            break\n          }else{\n            this.addChildren(pid,children,item.children)\n          }\n        }\n      }\n    },\n\n    onChange(value){\n      if(!value){\n        this.$emit('change', '');\n        this.treeValue = ''\n      } else if (Array.isArray(value)) {\n        let labels = []\n        let values = value.map(item => {\n          labels.push(item.label)\n          return item.value\n        })\n        this.backValue(values.join(','), labels.join(','))\n        this.treeValue = value\n      } else {\n        this.backValue(value.value,value.label)\n        this.treeValue = value\n      }\n    },\n    getCurrTreeData(){\n      return this.treeData\n    },\n    validateProp(){\n      let mycondition = this.condition\n      return new Promise((resolve,reject)=>{\n        if(!mycondition){\n          resolve();\n        }else{\n          try {\n            let test=JSON.parse(mycondition);\n            if(typeof test == 'object' && test){\n              resolve()\n            }else{\n              this.$message.error(\"组件JTreeSelect-condition传值有误，需要一个json字符串!\")\n              reject()\n            }\n          } catch(e) {\n            this.$message.error(\"组件JTreeSelect-condition传值有误，需要一个json字符串!\")\n            reject()\n          }\n        }\n      })\n    }\n  },\n  //2.2新增 在组件内定义 指定父组件调用时候的传值属性和事件类型 这个牛逼\n  model: {\n    prop: 'value',\n    event: 'change'\n  }\n}\n",{"version":3,"sources":["JCategorySelect.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;AAifile":"JCategorySelect.vue","sourceRoot":"src/components/jeecg","sourcesContent":["<template>\n  <a-tree-select\n    allowClear\n    labelInValue\n    style=\"width: 100%\"\n    :disabled=\"disabled\"\n    :dropdownStyle=\"{ maxHeight: '400px', overflow: 'auto' }\"\n    :placeholder=\"placeholder\"\n    :loadData=\"asyncLoadTreeData\"\n    :value=\"treeValue\"\n    :treeData=\"treeData\"\n    :multiple=\"multiple\"\n    @change=\"onChange\">\n  </a-tree-select>\n</template>\n<script>\n\n  import { getAction } from '@/api/manage'\n\n  export default {\n    name: 'JCategorySelect',\n    props: {\n      value:{\n        type: String,\n        required: false\n      },\n      placeholder:{\n        type: String,\n        default: '请选择',\n        required: false\n      },\n      disabled:{\n        type:Boolean,\n        default:false,\n        required:false\n      },\n      condition:{\n        type:String,\n        default:'',\n        required:false\n      },\n      // 是否支持多选\n      multiple: {\n        type: Boolean,\n        default: false,\n      },\n      loadTriggleChange:{\n        type: Boolean,\n        default: false,\n        required:false\n      },\n      pid:{\n        type:String,\n        default:'',\n        required:false\n      },\n      pcode:{\n        type:String,\n        default:'',\n        required:false\n      },\n      back:{\n        type:String,\n        default:'',\n        required:false\n      }\n    },\n    data () {\n      return {\n        treeValue:\"\",\n        treeData:[],\n        url:\"/sys/category/loadTreeData\",\n        view:'/sys/category/loadDictItem/',\n        tableName:\"\",\n        text:\"\",\n        code:\"\",\n\n      }\n    },\n    watch: {\n      value () {\n        this.loadItemByCode()\n      },\n      pcode(){\n        this.loadRoot();\n      }\n    },\n    created(){\n      this.validateProp().then(()=>{\n        this.loadRoot()\n        this.loadItemByCode()\n      })\n    },\n    methods: {\n      /**加载一级节点 */\n      loadRoot(){\n        let param = {\n          pid:this.pid,\n          pcode:!this.pcode?'0':this.pcode,\n          condition:this.condition\n        }\n        getAction(this.url,param).then(res=>{\n          if(res.success && res.result){\n            for(let i of res.result){\n              i.value = i.key\n              if(i.leaf==false){\n                i.isLeaf=false\n              }else if(i.leaf==true){\n                i.isLeaf=true\n              }\n            }\n            this.treeData = [...res.result]\n          }else{\n            console.log(\"树一级节点查询结果-else\",res)\n          }\n        })\n      },\n\n      /** 数据回显*/\n      loadItemByCode(){\n        if(!this.value || this.value==\"0\"){\n          this.treeValue = []\n        }else{\n          getAction(this.view,{ids:this.value}).then(res=>{\n            if(res.success){\n              let values = this.value.split(',')\n              this.treeValue = res.result.map((item, index) => ({\n                key: values[index],\n                value: values[index],\n                label: item\n              }))\n              this.onLoadTriggleChange(res.result[0]);\n            }\n          })\n        }\n      },\n      onLoadTriggleChange(text){\n        //只有单选才会触发\n        if(!this.multiple && this.loadTriggleChange){\n          this.backValue(this.value,text)\n        }\n      },\n      backValue(value,label){\n        let obj = {}\n        if(this.back){\n          obj[this.back] = label\n        }\n        this.$emit('change', value, obj)\n      },\n      asyncLoadTreeData (treeNode) {\n        return new Promise((resolve) => {\n          if (treeNode.$vnode.children) {\n            resolve()\n            return\n          }\n          let pid = treeNode.$vnode.key\n          let param = {\n            pid:pid,\n            condition:this.condition\n          }\n          getAction(this.url,param).then(res=>{\n            if(res.success){\n              for(let i of res.result){\n                i.value = i.key\n                if(i.leaf==false){\n                  i.isLeaf=false\n                }else if(i.leaf==true){\n                  i.isLeaf=true\n                }\n              }\n              this.addChildren(pid,res.result,this.treeData)\n              this.treeData = [...this.treeData]\n            }\n            resolve()\n          })\n        })\n      },\n      addChildren(pid,children,treeArray){\n        if(treeArray && treeArray.length>0){\n          for(let item of treeArray){\n            if(item.key == pid){\n              if(!children || children.length==0){\n                item.isLeaf=true\n              }else{\n                item.children = children\n              }\n              break\n            }else{\n              this.addChildren(pid,children,item.children)\n            }\n          }\n        }\n      },\n\n      onChange(value){\n        if(!value){\n          this.$emit('change', '');\n          this.treeValue = ''\n        } else if (Array.isArray(value)) {\n          let labels = []\n          let values = value.map(item => {\n            labels.push(item.label)\n            return item.value\n          })\n          this.backValue(values.join(','), labels.join(','))\n          this.treeValue = value\n        } else {\n          this.backValue(value.value,value.label)\n          this.treeValue = value\n        }\n      },\n      getCurrTreeData(){\n        return this.treeData\n      },\n      validateProp(){\n        let mycondition = this.condition\n        return new Promise((resolve,reject)=>{\n          if(!mycondition){\n            resolve();\n          }else{\n            try {\n              let test=JSON.parse(mycondition);\n              if(typeof test == 'object' && test){\n                resolve()\n              }else{\n                this.$message.error(\"组件JTreeSelect-condition传值有误，需要一个json字符串!\")\n                reject()\n              }\n            } catch(e) {\n              this.$message.error(\"组件JTreeSelect-condition传值有误，需要一个json字符串!\")\n              reject()\n            }\n          }\n        })\n      }\n    },\n    //2.2新增 在组件内定义 指定父组件调用时候的传值属性和事件类型 这个牛逼\n    model: {\n      prop: 'value',\n      event: 'change'\n    }\n  }\n</script>\n"]}]}