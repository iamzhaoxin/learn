{"remainingRequest":"D:\\activiti\\project01\\jeecg-boot-activiti-master\\ant-design-vue-jeecg\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\activiti\\project01\\jeecg-boot-activiti-master\\ant-design-vue-jeecg\\src\\views\\jeecg\\JVxeDemo\\JVxeDemo1.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\activiti\\project01\\jeecg-boot-activiti-master\\ant-design-vue-jeecg\\src\\views\\jeecg\\JVxeDemo\\JVxeDemo1.vue","mtime":1611914356000},{"path":"D:\\activiti\\project01\\jeecg-boot-activiti-master\\ant-design-vue-jeecg\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1621061384845},{"path":"D:\\activiti\\project01\\jeecg-boot-activiti-master\\ant-design-vue-jeecg\\node_modules\\babel-loader\\lib\\index.js","mtime":1621061377995},{"path":"D:\\activiti\\project01\\jeecg-boot-activiti-master\\ant-design-vue-jeecg\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1621061384845},{"path":"D:\\activiti\\project01\\jeecg-boot-activiti-master\\ant-design-vue-jeecg\\node_modules\\vue-loader\\lib\\index.js","mtime":1621061372054}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport moment from 'moment'\nimport { pushIfNotExist, randomNumber, randomUUID } from '@/utils/util'\nimport { JVXETypes } from '@/components/jeecg/JVxeTable'\n\nexport default {\n  name: 'JVxeDemo1',\n  data() {\n    return {\n      loading: false,\n      columns: [\n        {\n          title: '不可编辑',\n          key: 'normal',\n          type: JVXETypes.normal,\n          width: '180px',\n          fixed: 'left',\n          defaultValue: 'normal-new',\n        },\n        {\n          title: '单行文本',\n          key: 'input',\n          type: JVXETypes.input,\n          width: '180px',\n          defaultValue: '',\n          placeholder: '请输入${title}',\n          validateRules: [\n            {\n              required: true, // 必填\n              message: '请输入${title}' // 显示的文本\n            },\n            {\n              pattern: /^[a-z|A-Z][a-z|A-Z\\d_-]*$/, // 正则\n              message: '${title}必须以字母开头，可包含数字、下划线、横杠'\n            },\n            {\n              unique: true,\n              message: '${title}不能重复'\n            },\n            {\n              handler({cellValue, row, column}, callback, target) {\n                // cellValue 当前校验的值\n                // callback(flag, message) 方法必须执行且只能执行一次\n                //          flag = 是否通过了校验，不填写或者填写 null 代表不进行任何操作\n                //          message = 提示的类型，默认使用配置的 message\n                // target 行编辑的实例对象\n                if (cellValue === 'abc') {\n                  callback(false, '${title}不能是abc')  // false = 未通过校验\n                } else {\n                  callback(true) // true = 通过验证\n                }\n              },\n              message: '${title}默认提示'\n            }\n          ]\n        },\n        {\n          title: '多行文本',\n          key: 'textarea',\n          type: JVXETypes.textarea,\n          width: '200px',\n        },\n        {\n          title: '数字',\n          key: 'number',\n          type: JVXETypes.inputNumber,\n          width: '80px',\n          defaultValue: 32,\n          // 【统计列】sum = 求和、average = 平均值\n          statistics: ['sum', 'average'],\n        },\n        {\n          title: '下拉框',\n          key: 'select',\n          type: JVXETypes.select,\n          width: '180px',\n          // 下拉选项\n          options: [\n            {title: 'String', value: 'string'},\n            {title: 'Integer', value: 'int'},\n            {title: 'Double', value: 'double'},\n            {title: 'Boolean', value: 'boolean'}\n          ],\n          allowInput: true,\n          placeholder: '请选择'\n        },\n        {\n          title: '下拉框_字典',\n          key: 'select_dict',\n          type: JVXETypes.select,\n          width: '180px',\n          options: [],\n          dictCode: 'sex',\n          placeholder: '请选择',\n        },\n        {\n          title: '下拉框_多选',\n          key: 'select_multiple',\n          type: JVXETypes.selectMultiple,\n          width: '180px',\n          options: [\n            {title: 'String', value: 'string'},\n            {title: 'Integer', value: 'int'},\n            {title: 'Double', value: 'double'},\n            {title: 'Boolean', value: 'boolean'}\n          ],\n          defaultValue: ['int', 'boolean'], // 多个默认项\n          // defaultValue: 'string,double,int', // 也可使用这种方式\n          placeholder: '多选',\n        },\n\n        {\n          title: '下拉框_搜索',\n          key: 'select_search',\n          type: JVXETypes.selectSearch,\n          width: '180px',\n          options: [\n            {title: 'String', value: 'string'},\n            {title: 'Integer', value: 'int'},\n            {title: 'Double', value: 'double'},\n            {title: 'Boolean', value: 'boolean'}\n          ],\n        },\n        {\n          title: '日期时间',\n          key: 'datetime',\n          type: JVXETypes.datetime,\n          width: '200px',\n          defaultValue: '2019-4-30 14:52:22',\n          placeholder: '请选择',\n        },\n        {\n          title: '复选框',\n          key: 'checkbox',\n          type: JVXETypes.checkbox,\n          width: '100px',\n          customValue: ['Y', 'N'], // true ,false\n          defaultChecked: false,\n        },\n        {\n          title: '操作',\n          key: 'action',\n          type: JVXETypes.slot,\n          fixed: 'right',\n          minWidth: '100px',\n          align: 'center',\n          slotName: 'action',\n        }\n      ],\n      dataSource: [],\n    }\n\n  },\n\n  created() {\n    this.randomPage(0, 20, true)\n  },\n  methods: {\n\n    handleCK(props) {\n      this.$message.success('请在控制台查看输出')\n      // 参数介绍：\n      // props.value          当前单元格的值\n      // props.row            当前行的数据\n      // props.rowId          当前行ID\n      // props.rowIndex       当前行下标\n      // props.column         当前列的配置\n      // props.columnIndex    当前列下标\n      // props.$table         vxe实例，可以调用vxe内置方法\n      // props.target         JVXE实例，可以调用JVXE内置方法\n      // props.caseId         JVXE实例唯一ID\n      // props.scrolling      是否正在滚动\n      // props.triggerChange  触发change事件，用于更改slot的值\n      console.log('查看: ', {props})\n    },\n\n    handleDL(props) {\n      // 调用删除方法\n      props.target.removeRows(props.row)\n    },\n\n    handleValueChange(event) {\n      console.log('handleValueChange.event: ', event)\n    },\n\n    /** 表单验证 */\n    handleTableCheck() {\n      this.$refs.vTable.validateTable().then(errMap => {\n        if (errMap) {\n          console.log('表单验证未通过：', {errMap})\n          this.$message.error('验证未通过，请在控制台查看详细')\n        } else {\n          this.$message.success('验证通过')\n        }\n      })\n    },\n\n    /** 获取值，忽略表单验证 */\n    handleTableGet() {\n      const values = this.$refs.vTable.getTableData()\n      console.log('获取值:', {values})\n      this.$message.success('获取值成功，请看控制台输出')\n    },\n\n    /** 模拟加载1000条数据 */\n    handleTableSet() {\n      this.randomPage(1, 1000, true)\n    },\n\n    /* 随机生成数据 */\n    randomPage(current, pageSize, loading = false) {\n      if (loading) {\n        this.loading = true\n      }\n\n      let randomDatetime = () => {\n        let time = randomNumber(1000, 9999999999999)\n        return moment(new Date(time)).format('YYYY-MM-DD HH:mm:ss')\n      }\n\n      let limit = (current - 1) * pageSize\n\n      let options = ['string', 'int', 'double', 'boolean']\n\n      let begin = Date.now()\n      let values = []\n      for (let i = 0; i < pageSize; i++) {\n        values.push({\n          id: randomUUID(),\n          normal: `normal-${(limit + i) + 1}`,\n          input: `text-${(limit + i) + 1}`,\n          textarea: `textarea-${(limit + i) + 1}`,\n          number: randomNumber(0, 233),\n          select: options[randomNumber(0, 3)],\n          select_dict: randomNumber(1, 2).toString(),\n          select_multiple: (() => {\n            let length = randomNumber(1, 4)\n            let arr = []\n            for (let j = 0; j < length; j++) {\n              pushIfNotExist(arr, options[randomNumber(0, 3)])\n            }\n            return arr\n          })(),\n          select_search: options[randomNumber(0, 3)],\n          datetime: randomDatetime(),\n          checkbox: ['Y', 'N'][randomNumber(0, 1)]\n        })\n      }\n\n      this.dataSource = values\n      let end = Date.now()\n      let diff = end - begin\n\n      if (loading && diff < pageSize) {\n        setTimeout(() => {\n          this.loading = false\n        }, pageSize - diff)\n      }\n\n    }\n  }\n}\n",{"version":3,"sources":["JVxeDemo1.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAsfile":"JVxeDemo1.vue","sourceRoot":"src/views/jeecg/JVxeDemo","sourcesContent":["<template>\n  <j-vxe-table\n    ref=\"vTable\"\n    toolbar\n    row-number\n    row-selection\n    drag-sort\n    keep-source\n    :height=\"580\"\n    :loading=\"loading\"\n    :dataSource=\"dataSource\"\n    :columns=\"columns\"\n    style=\"margin-top: 8px;\"\n    @valueChange=\"handleValueChange\"\n  >\n\n    <template v-slot:toolbarSuffix>\n      <a-button @click=\"handleTableCheck\">表单验证</a-button>\n      <a-tooltip placement=\"top\" title=\"获取值，忽略表单验证\" :autoAdjustOverflow=\"true\">\n        <a-button @click=\"handleTableGet\">获取值</a-button>\n      </a-tooltip>\n      <a-tooltip placement=\"top\" title=\"模拟加载1000条数据\" :autoAdjustOverflow=\"true\">\n        <a-button @click=\"handleTableSet\">设置值</a-button>\n      </a-tooltip>\n    </template>\n\n    <template v-slot:action=\"props\">\n      <a @click=\"handleCK(props)\">查看</a>\n      <a-divider type=\"vertical\"/>\n      <a-popconfirm title=\"确定删除吗？\" @confirm=\"handleDL(props)\">\n        <a>删除</a>\n      </a-popconfirm>\n    </template>\n\n  </j-vxe-table>\n</template>\n\n<script>\n  import moment from 'moment'\n  import { pushIfNotExist, randomNumber, randomUUID } from '@/utils/util'\n  import { JVXETypes } from '@/components/jeecg/JVxeTable'\n\n  export default {\n    name: 'JVxeDemo1',\n    data() {\n      return {\n        loading: false,\n        columns: [\n          {\n            title: '不可编辑',\n            key: 'normal',\n            type: JVXETypes.normal,\n            width: '180px',\n            fixed: 'left',\n            defaultValue: 'normal-new',\n          },\n          {\n            title: '单行文本',\n            key: 'input',\n            type: JVXETypes.input,\n            width: '180px',\n            defaultValue: '',\n            placeholder: '请输入${title}',\n            validateRules: [\n              {\n                required: true, // 必填\n                message: '请输入${title}' // 显示的文本\n              },\n              {\n                pattern: /^[a-z|A-Z][a-z|A-Z\\d_-]*$/, // 正则\n                message: '${title}必须以字母开头，可包含数字、下划线、横杠'\n              },\n              {\n                unique: true,\n                message: '${title}不能重复'\n              },\n              {\n                handler({cellValue, row, column}, callback, target) {\n                  // cellValue 当前校验的值\n                  // callback(flag, message) 方法必须执行且只能执行一次\n                  //          flag = 是否通过了校验，不填写或者填写 null 代表不进行任何操作\n                  //          message = 提示的类型，默认使用配置的 message\n                  // target 行编辑的实例对象\n                  if (cellValue === 'abc') {\n                    callback(false, '${title}不能是abc')  // false = 未通过校验\n                  } else {\n                    callback(true) // true = 通过验证\n                  }\n                },\n                message: '${title}默认提示'\n              }\n            ]\n          },\n          {\n            title: '多行文本',\n            key: 'textarea',\n            type: JVXETypes.textarea,\n            width: '200px',\n          },\n          {\n            title: '数字',\n            key: 'number',\n            type: JVXETypes.inputNumber,\n            width: '80px',\n            defaultValue: 32,\n            // 【统计列】sum = 求和、average = 平均值\n            statistics: ['sum', 'average'],\n          },\n          {\n            title: '下拉框',\n            key: 'select',\n            type: JVXETypes.select,\n            width: '180px',\n            // 下拉选项\n            options: [\n              {title: 'String', value: 'string'},\n              {title: 'Integer', value: 'int'},\n              {title: 'Double', value: 'double'},\n              {title: 'Boolean', value: 'boolean'}\n            ],\n            allowInput: true,\n            placeholder: '请选择'\n          },\n          {\n            title: '下拉框_字典',\n            key: 'select_dict',\n            type: JVXETypes.select,\n            width: '180px',\n            options: [],\n            dictCode: 'sex',\n            placeholder: '请选择',\n          },\n          {\n            title: '下拉框_多选',\n            key: 'select_multiple',\n            type: JVXETypes.selectMultiple,\n            width: '180px',\n            options: [\n              {title: 'String', value: 'string'},\n              {title: 'Integer', value: 'int'},\n              {title: 'Double', value: 'double'},\n              {title: 'Boolean', value: 'boolean'}\n            ],\n            defaultValue: ['int', 'boolean'], // 多个默认项\n            // defaultValue: 'string,double,int', // 也可使用这种方式\n            placeholder: '多选',\n          },\n\n          {\n            title: '下拉框_搜索',\n            key: 'select_search',\n            type: JVXETypes.selectSearch,\n            width: '180px',\n            options: [\n              {title: 'String', value: 'string'},\n              {title: 'Integer', value: 'int'},\n              {title: 'Double', value: 'double'},\n              {title: 'Boolean', value: 'boolean'}\n            ],\n          },\n          {\n            title: '日期时间',\n            key: 'datetime',\n            type: JVXETypes.datetime,\n            width: '200px',\n            defaultValue: '2019-4-30 14:52:22',\n            placeholder: '请选择',\n          },\n          {\n            title: '复选框',\n            key: 'checkbox',\n            type: JVXETypes.checkbox,\n            width: '100px',\n            customValue: ['Y', 'N'], // true ,false\n            defaultChecked: false,\n          },\n          {\n            title: '操作',\n            key: 'action',\n            type: JVXETypes.slot,\n            fixed: 'right',\n            minWidth: '100px',\n            align: 'center',\n            slotName: 'action',\n          }\n        ],\n        dataSource: [],\n      }\n\n    },\n\n    created() {\n      this.randomPage(0, 20, true)\n    },\n    methods: {\n\n      handleCK(props) {\n        this.$message.success('请在控制台查看输出')\n        // 参数介绍：\n        // props.value          当前单元格的值\n        // props.row            当前行的数据\n        // props.rowId          当前行ID\n        // props.rowIndex       当前行下标\n        // props.column         当前列的配置\n        // props.columnIndex    当前列下标\n        // props.$table         vxe实例，可以调用vxe内置方法\n        // props.target         JVXE实例，可以调用JVXE内置方法\n        // props.caseId         JVXE实例唯一ID\n        // props.scrolling      是否正在滚动\n        // props.triggerChange  触发change事件，用于更改slot的值\n        console.log('查看: ', {props})\n      },\n\n      handleDL(props) {\n        // 调用删除方法\n        props.target.removeRows(props.row)\n      },\n\n      handleValueChange(event) {\n        console.log('handleValueChange.event: ', event)\n      },\n\n      /** 表单验证 */\n      handleTableCheck() {\n        this.$refs.vTable.validateTable().then(errMap => {\n          if (errMap) {\n            console.log('表单验证未通过：', {errMap})\n            this.$message.error('验证未通过，请在控制台查看详细')\n          } else {\n            this.$message.success('验证通过')\n          }\n        })\n      },\n\n      /** 获取值，忽略表单验证 */\n      handleTableGet() {\n        const values = this.$refs.vTable.getTableData()\n        console.log('获取值:', {values})\n        this.$message.success('获取值成功，请看控制台输出')\n      },\n\n      /** 模拟加载1000条数据 */\n      handleTableSet() {\n        this.randomPage(1, 1000, true)\n      },\n\n      /* 随机生成数据 */\n      randomPage(current, pageSize, loading = false) {\n        if (loading) {\n          this.loading = true\n        }\n\n        let randomDatetime = () => {\n          let time = randomNumber(1000, 9999999999999)\n          return moment(new Date(time)).format('YYYY-MM-DD HH:mm:ss')\n        }\n\n        let limit = (current - 1) * pageSize\n\n        let options = ['string', 'int', 'double', 'boolean']\n\n        let begin = Date.now()\n        let values = []\n        for (let i = 0; i < pageSize; i++) {\n          values.push({\n            id: randomUUID(),\n            normal: `normal-${(limit + i) + 1}`,\n            input: `text-${(limit + i) + 1}`,\n            textarea: `textarea-${(limit + i) + 1}`,\n            number: randomNumber(0, 233),\n            select: options[randomNumber(0, 3)],\n            select_dict: randomNumber(1, 2).toString(),\n            select_multiple: (() => {\n              let length = randomNumber(1, 4)\n              let arr = []\n              for (let j = 0; j < length; j++) {\n                pushIfNotExist(arr, options[randomNumber(0, 3)])\n              }\n              return arr\n            })(),\n            select_search: options[randomNumber(0, 3)],\n            datetime: randomDatetime(),\n            checkbox: ['Y', 'N'][randomNumber(0, 1)]\n          })\n        }\n\n        this.dataSource = values\n        let end = Date.now()\n        let diff = end - begin\n\n        if (loading && diff < pageSize) {\n          setTimeout(() => {\n            this.loading = false\n          }, pageSize - diff)\n        }\n\n      }\n    }\n  }\n</script>\n\n<style scoped>\n\n</style>"]}]}