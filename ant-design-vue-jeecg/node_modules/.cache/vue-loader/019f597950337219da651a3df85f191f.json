{"remainingRequest":"D:\\activiti\\project01\\jeecg-boot-activiti-master\\ant-design-vue-jeecg\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\activiti\\project01\\jeecg-boot-activiti-master\\ant-design-vue-jeecg\\src\\components\\layouts\\TabLayout.vue?vue&type=style&index=0&lang=less&","dependencies":[{"path":"D:\\activiti\\project01\\jeecg-boot-activiti-master\\ant-design-vue-jeecg\\src\\components\\layouts\\TabLayout.vue","mtime":1621925474204},{"path":"D:\\activiti\\project01\\jeecg-boot-activiti-master\\ant-design-vue-jeecg\\node_modules\\css-loader\\index.js","mtime":1620887942039},{"path":"D:\\activiti\\project01\\jeecg-boot-activiti-master\\ant-design-vue-jeecg\\node_modules\\vue-loader\\lib\\loaders\\stylePostLoader.js","mtime":1621061372054},{"path":"D:\\activiti\\project01\\jeecg-boot-activiti-master\\ant-design-vue-jeecg\\node_modules\\postcss-loader\\src\\index.js","mtime":1617935823297},{"path":"D:\\activiti\\project01\\jeecg-boot-activiti-master\\ant-design-vue-jeecg\\node_modules\\less-loader\\dist\\cjs.js","mtime":1621061389135},{"path":"D:\\activiti\\project01\\jeecg-boot-activiti-master\\ant-design-vue-jeecg\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1621061384845},{"path":"D:\\activiti\\project01\\jeecg-boot-activiti-master\\ant-design-vue-jeecg\\node_modules\\vue-loader\\lib\\index.js","mtime":1621061372054}],"contextDependencies":[],"result":["\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n /*\n* The following styles are auto-applied to elements with\n* transition=\"page-transition\" when their visibility is toggled\n* by Vue.js.\n*\n* You can easily play with the page transition by editing\n* these styles.\n*/\n\n .page-transition-enter {\n   opacity: 0;\n }\n\n .page-transition-leave-active {\n   opacity: 0;\n }\n\n .page-transition-enter .page-transition-container,\n .page-transition-leave-active .page-transition-container {\n   -webkit-transform: scale(1.1);\n   transform: scale(1.1);\n }\n\n /*美化弹出Tab样式*/\n .ant-tabs-nav-container {\n   margin-top: 4px;\n }\n\n /* 修改 ant-tabs 样式 */\n .tab-layout-tabs.ant-tabs {\n   border-bottom: 1px solid #ccc;\n   border-left: 1px solid #ccc;\n   background-color: white;\n   padding: 0 20px;\n\n   .ant-tabs-bar {\n     margin: 4px 0 0;\n     border: none;\n   }\n\n }\n\n .tab-layout-tabs.ant-tabs {\n\n   &.ant-tabs-card .ant-tabs-tab {\n\n     padding: 0 24px !important;\n     background-color: white !important;\n     margin-right: 10px !important;\n\n     .ant-tabs-close-x {\n       width: 12px !important;\n       height: 12px !important;\n       opacity: 0 !important;\n       cursor: pointer !important;\n       font-size: 12px !important;\n       margin: 0 !important;\n       position: absolute;\n       top: 36%;\n       right: 6px;\n     }\n\n     &:hover .ant-tabs-close-x {\n       opacity: 1 !important;\n     }\n\n   }\n\n }\n\n .tab-layout-tabs.ant-tabs.ant-tabs-card > .ant-tabs-bar {\n   .ant-tabs-tab {\n     border: none !important;\n     border-bottom: 1px solid transparent !important;\n   }\n   .ant-tabs-tab-active {\n     border-color: @primary-color!important;\n   }\n }\n\n\n",{"version":3,"sources":["TabLayout.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAwVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"TabLayout.vue","sourceRoot":"src/components/layouts","sourcesContent":["<template>\r\n  <global-layout @dynamicRouterShow=\"dynamicRouterShow\">\r\n    <!-- update-begin- author:sunjianlei --- date:20191009 --- for: 提升右键菜单的层级 -->\r\n    <contextmenu :itemList=\"menuItemList\" :visible.sync=\"menuVisible\" style=\"z-index: 9999;\" @select=\"onMenuSelect\"/>\r\n    <!-- update-end- author:sunjianlei --- date:20191009 --- for: 提升右键菜单的层级 -->\r\n    <a-tabs\r\n      @contextmenu.native=\"e => onContextmenu(e)\"\r\n      v-if=\"multipage\"\r\n      :active-key=\"activePage\"\r\n      class=\"tab-layout-tabs\"\r\n      style=\"height:52px\"\r\n      :hide-add=\"true\"\r\n      type=\"editable-card\"\r\n      @change=\"changePage\"\r\n      @tabClick=\"tabCallBack\"\r\n      @edit=\"editPage\">\r\n      <a-tab-pane :id=\"page.fullPath\" :key=\"page.fullPath\" v-for=\"page in pageList\" :closable=\"!(page.meta.title=='首页')\">\r\n        <span slot=\"tab\" :pagekey=\"page.fullPath\">{{ page.meta.title }}</span>\r\n      </a-tab-pane>\r\n    </a-tabs>\r\n    <div style=\"margin: 12px 12px 0;\">\r\n      <transition name=\"page-toggle\">\r\n        <keep-alive v-if=\"multipage\">\r\n          <router-view v-if=\"reloadFlag\"/>\r\n        </keep-alive>\r\n        <template v-else>\r\n          <router-view v-if=\"reloadFlag\"/>\r\n        </template>\r\n      </transition>\r\n    </div>\r\n  </global-layout>\r\n</template>\r\n\r\n<script>\r\n  import GlobalLayout from '@/components/page/GlobalLayout'\r\n  import Contextmenu from '@/components/menu/Contextmenu'\r\n  import { mixin, mixinDevice } from '@/utils/mixin.js'\r\n  import { triggerWindowResizeEvent } from '@/utils/util'\r\n  const indexKey = '/dashboard/analysis'\r\n  import Vue from 'vue'\r\n  import { CACHE_INCLUDED_ROUTES } from \"@/store/mutation-types\"\r\n\r\n  export default {\r\n    name: 'TabLayout',\r\n    components: {\r\n      GlobalLayout,\r\n      Contextmenu\r\n    },\r\n    mixins: [mixin, mixinDevice],\r\n    data() {\r\n      return {\r\n        pageList: [],\r\n        linkList: [],\r\n        activePage: '',\r\n        menuVisible: false,\r\n        menuItemList: [\r\n          { key: '4', icon: 'reload', text: '刷 新' },\r\n          { key: '1', icon: 'arrow-left', text: '关闭左侧' },\r\n          { key: '2', icon: 'arrow-right', text: '关闭右侧' },\r\n          { key: '3', icon: 'close', text: '关闭其它' }\r\n        ],\r\n        reloadFlag:true\r\n      }\r\n    },\r\n    /* update_begin author:wuxianquan date:20190828 for: 关闭当前tab页，供子页面调用 ->望菜单能配置外链，直接弹出新页面而不是嵌入iframe #428 */\r\n    provide(){\r\n      return{\r\n        closeCurrent:this.closeCurrent\r\n      }\r\n    },\r\n    /* update_end author:wuxianquan date:20190828 for: 关闭当前tab页，供子页面调用->望菜单能配置外链，直接弹出新页面而不是嵌入iframe #428 */\r\n    computed: {\r\n      multipage() {\r\n        //判断如果是手机模式，自动切换为单页面模式\r\n        if (this.isMobile()) {\r\n          return false\r\n        } else {\r\n          return this.$store.state.app.multipage\r\n        }\r\n      }\r\n    },\r\n    created() {\r\n      if (this.$route.path != indexKey) {\r\n        this.addIndexToFirst()\r\n      }\r\n      // 复制一个route对象出来，不能影响原route\r\n      let currentRoute = Object.assign({}, this.$route)\r\n      currentRoute.meta = Object.assign({}, currentRoute.meta)\r\n      // update-begin-author:sunjianlei date:20191223 for: 修复刷新后菜单Tab名字显示异常\r\n      let storeKey = 'route:title:' + currentRoute.fullPath\r\n      let routeTitle = this.$ls.get(storeKey)\r\n      if (routeTitle) {\r\n        currentRoute.meta.title = routeTitle\r\n      }\r\n      // update-end-author:sunjianlei date:20191223 for: 修复刷新后菜单Tab名字显示异常\r\n      this.pageList.push(currentRoute)\r\n      this.linkList.push(currentRoute.fullPath)\r\n      this.activePage = currentRoute.fullPath\r\n    },\r\n    mounted() {\r\n    },\r\n    watch: {\r\n      '$route': function(newRoute) {\r\n        //console.log(\"新的路由\",newRoute)\r\n        this.activePage = newRoute.fullPath\r\n        if (!this.multipage) {\r\n          this.linkList = [newRoute.fullPath]\r\n          this.pageList = [Object.assign({},newRoute)]\r\n        // update-begin-author:taoyan date:20200211 for: TASK #3368 【路由缓存】首页的缓存设置有问题，需要根据后台的路由配置来实现是否缓存\r\n        } else if(indexKey==newRoute.fullPath) {\r\n          //首页时 判断是否缓存 没有缓存 刷新之\r\n          if (newRoute.meta.keepAlive === false) {\r\n            this.routeReload()\r\n          }\r\n        // update-end-author:taoyan date:20200211 for: TASK #3368 【路由缓存】首页的缓存设置有问题，需要根据后台的路由配置来实现是否缓存\r\n        }else if (this.linkList.indexOf(newRoute.fullPath) < 0) {\r\n          this.linkList.push(newRoute.fullPath)\r\n          this.pageList.push(Object.assign({},newRoute))\r\n          //// update-begin-author:sunjianlei date:20200103 for: 如果新增的页面配置了缓存路由，那么就强制刷新一遍 #842\r\n          // if (newRoute.meta.keepAlive) {\r\n          //   this.routeReload()\r\n          // }\r\n          //// update-end-author:sunjianlei date:20200103 for: 如果新增的页面配置了缓存路由，那么就强制刷新一遍 #842\r\n        } else if (this.linkList.indexOf(newRoute.fullPath) >= 0) {\r\n          let oldIndex = this.linkList.indexOf(newRoute.fullPath)\r\n          let oldPositionRoute = this.pageList[oldIndex]\r\n          this.pageList.splice(oldIndex, 1, Object.assign({},newRoute,{meta:oldPositionRoute.meta}))\r\n        }\r\n      },\r\n      'activePage': function(key) {\r\n        let index = this.linkList.lastIndexOf(key)\r\n        let waitRouter = this.pageList[index]\r\n        // 【TESTA-523】修复：不允许重复跳转路由异常\r\n        if (waitRouter.fullPath !== this.$route.fullPath) {\r\n          this.$router.push(Object.assign({}, waitRouter))\r\n        }\r\n        this.changeTitle(waitRouter.meta.title)\r\n      },\r\n      'multipage': function(newVal) {\r\n        if(this.reloadFlag){\r\n          if (!newVal) {\r\n            this.linkList = [this.$route.fullPath]\r\n            this.pageList = [this.$route]\r\n          }\r\n        }\r\n      },\r\n      // update-begin-author:sunjianlei date:20191223 for: 修复从单页模式切换回多页模式后首页不居第一位的 BUG\r\n      device() {\r\n        if (this.multipage && this.linkList.indexOf(indexKey) === -1) {\r\n          this.addIndexToFirst()\r\n        }\r\n      },\r\n      // update-end-author:sunjianlei date:20191223 for: 修复从单页模式切换回多页模式后首页不居第一位的 BUG\r\n    },\r\n    methods: {\r\n      // update-begin-author:sunjianlei date:20191223 for: 修复从单页模式切换回多页模式后首页不居第一位的 BUG\r\n      // 将首页添加到第一位\r\n      addIndexToFirst() {\r\n        this.pageList.splice(0, 0, {\r\n          name: 'dashboard-analysis',\r\n          path: indexKey,\r\n          fullPath: indexKey,\r\n          meta: {\r\n            icon: 'dashboard',\r\n            title: '首页'\r\n          }\r\n        })\r\n        this.linkList.splice(0, 0, indexKey)\r\n      },\r\n      // update-end-author:sunjianlei date:20191223 for: 修复从单页模式切换回多页模式后首页不居第一位的 BUG\r\n\r\n      // update-begin-author:sunjianlei date:20200120 for: 动态更改页面标题\r\n      changeTitle(title) {\r\n        let projectTitle = \"FastRun快速开发平台\"\r\n        // 首页特殊处理\r\n        if (this.$route.path === indexKey) {\r\n          document.title = projectTitle\r\n        } else {\r\n          document.title = title + ' · ' + projectTitle\r\n        }\r\n      },\r\n      // update-end-author:sunjianlei date:20200120 for: 动态更改页面标题\r\n\r\n      changePage(key) {\r\n        this.activePage = key\r\n      },\r\n      tabCallBack() {\r\n        this.$nextTick(() => {\r\n          //update-begin-author:taoyan date: 20201211 for:【新版】online报错 JT-100\r\n         setTimeout(()=>{\r\n           //省市区组件里面给window绑定了个resize事件 导致切换页面的时候触发了他的resize，但是切换页面，省市区组件还没被销毁前就触发了该事件，导致控制台报错，加个延迟\r\n           triggerWindowResizeEvent()\r\n         },20)\r\n          //update-end-author:taoyan date: 20201211 for:【新版】online报错 JT-100\r\n        })\r\n      },\r\n      editPage(key, action) {\r\n        this[action](key)\r\n      },\r\n      remove(key) {\r\n        if (key == indexKey) {\r\n          this.$message.warning('首页不能关闭!')\r\n          return\r\n        }\r\n        if (this.pageList.length === 1) {\r\n          this.$message.warning('这是最后一页，不能再关闭了啦')\r\n          return\r\n        }\r\n        console.log(\"this.pageList \",this.pageList );\r\n        let removeRoute = this.pageList.filter(item => item.fullPath == key)\r\n        this.pageList = this.pageList.filter(item => item.fullPath !== key)\r\n        let index = this.linkList.indexOf(key)\r\n        this.linkList = this.linkList.filter(item => item !== key)\r\n        index = index >= this.linkList.length ? this.linkList.length - 1 : index\r\n        this.activePage = this.linkList[index]\r\n\r\n        //update-begin--Author:scott  Date:20201015 for：路由缓存问题，关闭了tab页时再打开就不刷新 #842\r\n        //关闭页面则从缓存cache_included_routes中删除路由，下次点击菜单会重新加载页面\r\n        let cacheRouterArray = Vue.ls.get(CACHE_INCLUDED_ROUTES) || []\r\n        if (removeRoute && removeRoute[0]) {\r\n          let componentName = removeRoute[0].meta.componentName\r\n          console.log(\"key: \", key);\r\n          console.log(\"componentName: \", componentName);\r\n          if(cacheRouterArray.includes(componentName)){\r\n            cacheRouterArray.splice(cacheRouterArray.findIndex(item => item === componentName), 1)\r\n            Vue.ls.set(CACHE_INCLUDED_ROUTES, cacheRouterArray)\r\n          }\r\n        }\r\n        //update-end--Author:scott  Date:20201015 for：路由缓存问题，关闭了tab页时再打开就不刷新 #842\r\n\r\n      },\r\n      onContextmenu(e) {\r\n        const pagekey = this.getPageKey(e.target)\r\n        if (pagekey !== null) {\r\n          e.preventDefault()\r\n          this.menuVisible = true\r\n        }\r\n      },\r\n      getPageKey(target, depth) {\r\n        depth = depth || 0\r\n        if (depth > 2) {\r\n          return null\r\n        }\r\n        let pageKey = target.getAttribute('pagekey')\r\n        pageKey = pageKey || (target.previousElementSibling ? target.previousElementSibling.getAttribute('pagekey') : null)\r\n        return pageKey || (target.firstElementChild ? this.getPageKey(target.firstElementChild, ++depth) : null)\r\n      },\r\n      onMenuSelect(key, target) {\r\n        let pageKey = this.getPageKey(target)\r\n        switch (key) {\r\n          case '1':\r\n            this.closeLeft(pageKey)\r\n            break\r\n          case '2':\r\n            this.closeRight(pageKey)\r\n            break\r\n          case '3':\r\n            this.closeOthers(pageKey)\r\n            break\r\n          case '4':\r\n            this.routeReload()\r\n            break\r\n          default:\r\n            break\r\n        }\r\n      },\r\n      /* update_begin author:wuxianquan date:20190828 for: 关闭当前tab页，供子页面调用->望菜单能配置外链，直接弹出新页面而不是嵌入iframe #428 */\r\n      closeCurrent(){\r\n        this.remove(this.activePage);\r\n      },\r\n      /* update_end author:wuxianquan date:20190828 for: 关闭当前tab页，供子页面调用->望菜单能配置外链，直接弹出新页面而不是嵌入iframe #428 */\r\n      closeOthers(pageKey) {\r\n        let index = this.linkList.indexOf(pageKey)\r\n        if (pageKey == indexKey || pageKey.indexOf('?ticke=')>=0) {\r\n          this.linkList = this.linkList.slice(index, index + 1)\r\n          this.pageList = this.pageList.slice(index, index + 1)\r\n          this.activePage = this.linkList[0]\r\n        } else {\r\n          let indexContent = this.pageList.slice(0, 1)[0]\r\n          this.linkList = this.linkList.slice(index, index + 1)\r\n          this.pageList = this.pageList.slice(index, index + 1)\r\n          this.linkList.unshift(indexContent.fullPath)\r\n          this.pageList.unshift(indexContent)\r\n          this.activePage = this.linkList[1]\r\n        }\r\n      },\r\n      closeLeft(pageKey) {\r\n        if (pageKey == indexKey) {\r\n          return\r\n        }\r\n        let tempList = [...this.pageList]\r\n        let indexContent = tempList.slice(0, 1)[0]\r\n        let index = this.linkList.indexOf(pageKey)\r\n        this.linkList = this.linkList.slice(index)\r\n        this.pageList = this.pageList.slice(index)\r\n        this.linkList.unshift(indexContent.fullPath)\r\n        this.pageList.unshift(indexContent)\r\n        if (this.linkList.indexOf(this.activePage) < 0) {\r\n          this.activePage = this.linkList[0]\r\n        }\r\n      },\r\n      closeRight(pageKey) {\r\n        let index = this.linkList.indexOf(pageKey)\r\n        this.linkList = this.linkList.slice(0, index + 1)\r\n        this.pageList = this.pageList.slice(0, index + 1)\r\n        if (this.linkList.indexOf(this.activePage < 0)) {\r\n          this.activePage = this.linkList[this.linkList.length - 1]\r\n        }\r\n      },\r\n      //update-begin-author:taoyan date:20190430 for:动态路由title显示配置的菜单title而不是其对应路由的title\r\n      dynamicRouterShow(key,title){\r\n        let keyIndex = this.linkList.indexOf(key)\r\n        if(keyIndex>=0){\r\n          let currRouter = this.pageList[keyIndex]\r\n          let meta = Object.assign({},currRouter.meta,{title:title})\r\n          this.pageList.splice(keyIndex, 1, Object.assign({},currRouter,{meta:meta}))\r\n          if (key === this.activePage) {\r\n            this.changeTitle(title)\r\n          }\r\n        }\r\n      },\r\n      //update-end-author:taoyan date:20190430 for:动态路由title显示配置的菜单title而不是其对应路由的title\r\n\r\n      //update-begin-author:taoyan date:20191008 for:路由刷新\r\n      routeReload(){\r\n        this.reloadFlag = false\r\n        let ToggleMultipage = \"ToggleMultipage\"\r\n        this.$store.dispatch(ToggleMultipage,false)\r\n        this.$nextTick(()=>{\r\n          this.$store.dispatch(ToggleMultipage,true)\r\n          this.reloadFlag = true\r\n        })\r\n      },\r\n      //update-end-author:taoyan date:20191008 for:路由刷新\r\n      //新增一个返回方法\r\n      excuteCallback(callback){\r\n        callback()\r\n      },\r\n    }\r\n  }\r\n</script>\r\n\r\n<style lang=\"less\">\r\n\r\n  /*\r\n * The following styles are auto-applied to elements with\r\n * transition=\"page-transition\" when their visibility is toggled\r\n * by Vue.js.\r\n *\r\n * You can easily play with the page transition by editing\r\n * these styles.\r\n */\r\n\r\n  .page-transition-enter {\r\n    opacity: 0;\r\n  }\r\n\r\n  .page-transition-leave-active {\r\n    opacity: 0;\r\n  }\r\n\r\n  .page-transition-enter .page-transition-container,\r\n  .page-transition-leave-active .page-transition-container {\r\n    -webkit-transform: scale(1.1);\r\n    transform: scale(1.1);\r\n  }\r\n\r\n  /*美化弹出Tab样式*/\r\n  .ant-tabs-nav-container {\r\n    margin-top: 4px;\r\n  }\r\n\r\n  /* 修改 ant-tabs 样式 */\r\n  .tab-layout-tabs.ant-tabs {\r\n    border-bottom: 1px solid #ccc;\r\n    border-left: 1px solid #ccc;\r\n    background-color: white;\r\n    padding: 0 20px;\r\n\r\n    .ant-tabs-bar {\r\n      margin: 4px 0 0;\r\n      border: none;\r\n    }\r\n\r\n  }\r\n\r\n  .tab-layout-tabs.ant-tabs {\r\n\r\n    &.ant-tabs-card .ant-tabs-tab {\r\n\r\n      padding: 0 24px !important;\r\n      background-color: white !important;\r\n      margin-right: 10px !important;\r\n\r\n      .ant-tabs-close-x {\r\n        width: 12px !important;\r\n        height: 12px !important;\r\n        opacity: 0 !important;\r\n        cursor: pointer !important;\r\n        font-size: 12px !important;\r\n        margin: 0 !important;\r\n        position: absolute;\r\n        top: 36%;\r\n        right: 6px;\r\n      }\r\n\r\n      &:hover .ant-tabs-close-x {\r\n        opacity: 1 !important;\r\n      }\r\n\r\n    }\r\n\r\n  }\r\n\r\n  .tab-layout-tabs.ant-tabs.ant-tabs-card > .ant-tabs-bar {\r\n    .ant-tabs-tab {\r\n      border: none !important;\r\n      border-bottom: 1px solid transparent !important;\r\n    }\r\n    .ant-tabs-tab-active {\r\n      border-color: @primary-color!important;\r\n    }\r\n  }\r\n\r\n\r\n</style>\r\n"]}]}