{"remainingRequest":"D:\\activiti\\project01\\jeecg-boot-activiti-master\\ant-design-vue-jeecg\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\activiti\\project01\\jeecg-boot-activiti-master\\ant-design-vue-jeecg\\src\\components\\jeecg\\JEditableTable.vue?vue&type=style&index=0&id=2f0c1ef1&lang=less&scoped=true&","dependencies":[{"path":"D:\\activiti\\project01\\jeecg-boot-activiti-master\\ant-design-vue-jeecg\\src\\components\\jeecg\\JEditableTable.vue","mtime":1611914356000},{"path":"D:\\activiti\\project01\\jeecg-boot-activiti-master\\ant-design-vue-jeecg\\node_modules\\css-loader\\index.js","mtime":1620887942039},{"path":"D:\\activiti\\project01\\jeecg-boot-activiti-master\\ant-design-vue-jeecg\\node_modules\\vue-loader\\lib\\loaders\\stylePostLoader.js","mtime":1621061372054},{"path":"D:\\activiti\\project01\\jeecg-boot-activiti-master\\ant-design-vue-jeecg\\node_modules\\postcss-loader\\src\\index.js","mtime":1617935823297},{"path":"D:\\activiti\\project01\\jeecg-boot-activiti-master\\ant-design-vue-jeecg\\node_modules\\less-loader\\dist\\cjs.js","mtime":1621061389135},{"path":"D:\\activiti\\project01\\jeecg-boot-activiti-master\\ant-design-vue-jeecg\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1621061384845},{"path":"D:\\activiti\\project01\\jeecg-boot-activiti-master\\ant-design-vue-jeecg\\node_modules\\vue-loader\\lib\\index.js","mtime":1621061372054}],"contextDependencies":[],"result":["\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n.action-button {\n  margin-bottom: 8px;\n\n  .gap {\n    padding-left: 8px;\n  }\n\n}\n\n/* 设定边框参数 */\n@borderColor: #e8e8e8;\n@border: 1px solid @borderColor;\n/* tr & td 之间的间距 */\n@spacing: 8px;\n\n.input-table {\n  max-width: 100%;\n  overflow-x: hidden;\n  overflow-y: hidden;\n  position: relative;\n  border: @border;\n\n  .thead, .tbody {\n\n    .tr, .td {\n      display: flex;\n    }\n\n    .td {\n\n      /*border-right: 1px solid red;*/\n      /*color: white;*/\n      /*background-color: black;*/\n      /*margin-right: @spacing !important;*/\n\n      padding-left: @spacing;\n      flex-direction: column;\n\n      &.td-cb, &.td-num {\n        width: 45px;\n        min-width: 45px;\n        max-width: 50px;\n        margin-right: 0;\n        padding-left: 0;\n        padding-right: 0;\n        justify-content: center;\n        align-items: center;\n      }\n\n      &.td-ds {\n        width: 30px;\n        min-width: 30px;\n        max-width: 35px;\n        margin-right: 0;\n        padding-left: 0;\n        padding-right: 0;\n        justify-content: center;\n        align-items: center;\n\n        .td-ds-icons {\n          position: relative;\n          cursor: move;\n          width: 100%;\n          /*padding: 25% 0;*/\n          height: 100%;\n\n          .anticon-align-left,\n          .anticon-align-right {\n            position: absolute;\n            top: 30%;\n          }\n\n          .anticon-align-left {\n            left: 25%;\n          }\n\n          .anticon-align-right {\n            right: 25%;\n          }\n        }\n\n\n      }\n\n    }\n\n  }\n\n  .thead {\n    overflow-y: scroll;\n    overflow-x: hidden;\n    border-bottom: @border;\n\n    /** 隐藏thead的滑块   */\n\n    &::-webkit-scrollbar-thumb {\n      box-shadow: none !important;\n      background-color: transparent !important;\n    }\n\n    .tr {\n      min-width: 100%;\n      overflow-y: scroll;\n    }\n\n    .td {\n      /*flex: 1;*/\n      padding: 8px @spacing;\n      justify-content: center;\n    }\n\n  }\n\n  .tbody {\n    position: relative;\n    top: 0;\n    left: 0;\n    overflow-x: hidden;\n    overflow-y: hidden;\n    min-height: 61px;\n    /*max-height: 400px;*/\n    min-width: 100%;\n\n    .tr-nodata {\n      color: #999;\n      line-height: 61px;\n      text-align: center;\n    }\n\n    .tr {\n      /*line-height: 50px;*/\n\n      border-bottom: @border;\n      transition: background-color 300ms;\n      width: 100%;\n      position: absolute;\n      left: 0;\n      z-index: 10;\n\n      &.tr-checked {\n        background-color: #fafafa;\n      }\n\n      &:hover {\n        background-color: #E6F7FF;\n      }\n\n    }\n\n    .tr-expand {\n      position: relative;\n      z-index: 9;\n      background-color: white;\n    }\n\n    .td {\n      /*flex: 1;*/\n      padding: 14px @spacing 14px 0;\n      justify-content: center;\n\n      &:last-child {\n        padding-right: @spacing;\n      }\n\n      input {\n        font-variant: tabular-nums;\n        box-sizing: border-box;\n        margin: 0;\n        list-style: none;\n        position: relative;\n        display: inline-block;\n        padding: 4px 11px;\n        width: 100%;\n        height: 32px;\n        font-size: 14px;\n        line-height: 1.5;\n        color: rgba(0, 0, 0, 0.65);\n        background-color: #fff;\n        border: 1px solid #d9d9d9;\n        border-radius: 4px;\n        transition: all 0.3s;\n        outline: none;\n\n        &:hover {\n          border-color: #4D90FE\n        }\n\n        &:focus {\n          border-color: #40a9ff;\n          box-shadow: 0 0 0 2px rgba(24, 144, 255, 0.2);\n          border-right-width: 1px !important;\n        }\n\n        &:disabled {\n          color: rgba(0, 0, 0, 0.25);\n          background: #f5f5f5;\n          cursor: not-allowed;\n        }\n\n        /* 设置placeholder的颜色 */\n\n        &::-webkit-input-placeholder { /* WebKit browsers */\n          color: #ccc;\n        }\n\n        &:-moz-placeholder { /* Mozilla Firefox 4 to 18 */\n          color: #ccc;\n        }\n\n        &::-moz-placeholder { /* Mozilla Firefox 19+ */\n          color: #ccc;\n        }\n\n        &:-ms-input-placeholder { /* Internet Explorer 10+ */\n          color: #ccc;\n        }\n\n      }\n\n      .j-editable-image {\n        height: 32px;\n        max-width: 100px !important;\n        cursor: pointer;\n\n        &:hover {\n          opacity: 0.8;\n        }\n\n        &:active {\n          opacity: 0.6;\n        }\n\n      }\n\n      /* --------------------------- 2020年5月18日 begin 默认span模式 ------------------------------ */\n\n      label {\n        height: 32px;\n\n        &.ant-checkbox-wrapper {\n          height: auto;\n        }\n      }\n\n      .j-td-span {\n        position: relative;\n        padding: 4px 11px;\n        border: 1px solid transparent;\n        display: inline-block;\n        width: 100%;\n        max-width: 100%;\n        height: 32px;\n        cursor: text;\n        transition: all 0.3s;\n        box-sizing: border-box;\n        font-size: 14px;\n        line-height: 1.5;\n        color: rgba(0, 0, 0, 0.65);\n        border-radius: 4px;\n        overflow: hidden;\n        white-space: nowrap;\n        text-overflow: ellipsis;\n\n        &:hover {\n          background-color: white;\n        }\n\n        &.disabled {\n          cursor: not-allowed;\n\n          &:hover {\n            color: rgba(0, 0, 0, 0.25);\n            background-color: #F5F5F5;\n          }\n        }\n\n      }\n\n      /* --------------------------- 2020年5月18日 end 默认span模式 ------------------------------ */\n\n      /* --------------------------- 2020年5月28日 begin 新增校验未通过的样式 ------------------------------ */\n\n      .j-check-failed.j-td-span {\n        background-color: rgba(255, 0, 0, 0.05);\n\n        &:hover {\n          background-color: rgba(255, 0, 0, 0.1);\n        }\n      }\n\n      .j-check-failed.j-td-span,\n      input.j-check-failed,\n      .j-check-failed /deep/ input,\n      .ant-select.j-check-failed /deep/ .ant-select-selection,\n      .ant-upload.j-check-failed /deep/ .ant-btn {\n        border-color: red;\n        box-shadow: 0 0 0 2px rgba(255, 0, 0, 0.2);\n      }\n\n      /* --------------------------- 2020年5月28日 end 新增校验未通过的样式 ------------------------------ */\n\n    }\n\n  }\n\n  .scroll-view {\n    overflow: auto;\n    overflow-y: scroll;\n  }\n\n  .thead, .thead .tr, .scroll-view {\n    @scrollBarSize: 6px;\n    /* 定义滚动条高宽及背景 高宽分别对应横竖滚动条的尺寸*/\n\n    &::-webkit-scrollbar {\n      width: @scrollBarSize;\n      height: @scrollBarSize;\n      background-color: transparent;\n    }\n\n    /* 定义滚动条轨道 */\n\n    &::-webkit-scrollbar-track {\n      background-color: #f0f0f0;\n    }\n\n    /* 定义滑块 */\n\n    &::-webkit-scrollbar-thumb {\n      background-color: #eee;\n      box-shadow: inset 0 0 6px rgba(0, 0, 0, 0.3);\n\n      &:hover {\n        background-color: #bbb;\n      }\n\n      &:active {\n        background-color: #888;\n      }\n    }\n\n  }\n\n  .thead .tr {\n\n    &::-webkit-scrollbar-track {\n      background-color: transparent;\n    }\n\n    /* IE模式下隐藏 */\n    -ms-overflow-style: none;\n    -ms-scroll-chaining: chained;\n    -ms-content-zooming: zoom;\n    -ms-scroll-rails: none;\n    -ms-content-zoom-limit-min: 100%;\n    -ms-content-zoom-limit-max: 500%;\n    -ms-scroll-snap-type: proximity;\n    -ms-scroll-snap-points-x: snapList(100%, 200%, 300%, 400%, 500%);\n  }\n\n}\n\n",{"version":3,"sources":["JEditableTable.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA8qFA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;;AAGA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA","file":"JEditableTable.vue","sourceRoot":"src/components/jeecg","sourcesContent":["<!-- JEditableTable -->\n<!-- @version 1.6.1 -->\n<!-- @author sjlei -->\n<template>\n  <a-spin :spinning=\"loading\">\n\n    <a-row type=\"flex\">\n      <a-col>\n        <slot name=\"buttonBefore\" :target=\"getVM()\"/>\n      </a-col>\n      <a-col>\n        <!-- 操作按钮 -->\n        <div v-if=\"actionButton\" class=\"action-button\">\n          <a-button type=\"primary\" icon=\"plus\" @click=\"handleClickAdd\" :disabled=\"disabled\">新增</a-button>\n          <span class=\"gap\"></span>\n          <template v-if=\"selectedRowIds.length>0\">\n            <a-popconfirm\n              :title=\"`确定要删除这 ${selectedRowIds.length} 项吗?`\"\n              @confirm=\"handleConfirmDelete\">\n              <a-button type=\"primary\" icon=\"minus\" :disabled=\"disabled\">删除</a-button>\n              <span class=\"gap\"></span>\n            </a-popconfirm>\n            <template v-if=\"showClearSelectButton\">\n              <a-button icon=\"delete\" @click=\"handleClickClearSelection\">清空选择</a-button>\n              <span class=\"gap\"></span>\n            </template>\n          </template>\n        </div>\n      </a-col>\n      <a-col>\n        <slot name=\"buttonAfter\" :target=\"getVM()\"/>\n      </a-col>\n    </a-row>\n\n    <slot name=\"actionButtonAfter\" :target=\"getVM()\"/>\n\n    <div :id=\"`${caseId}inputTable`\" class=\"input-table\">\n      <!-- 渲染表头 -->\n      <div class=\"thead\" ref=\"thead\">\n        <div class=\"tr\" :style=\"{width: this.realTrWidth}\">\n          <!-- 左侧固定td  -->\n          <div v-if=\"dragSort\" class=\"td td-ds\" :style=\"style.tdLeft\">\n            <span></span>\n          </div>\n          <div v-if=\"rowSelection\" class=\"td td-cb\" :style=\"style.tdLeft\">\n            <!--:indeterminate=\"true\"-->\n            <a-checkbox\n              :checked=\"getSelectAll\"\n              :indeterminate=\"getSelectIndeterminate\"\n              @change=\"handleChangeCheckedAll\"\n            />\n          </div>\n          <div v-if=\"rowNumber\" class=\"td td-num\" :style=\"style.tdLeft\">\n            <span>#</span>\n          </div>\n          <!-- 右侧动态生成td -->\n          <template v-for=\"col in columns\">\n            <div\n              v-show=\"col.type !== formTypes.hidden\"\n              class=\"td\"\n              :key=\"col.key\"\n              :style=\"buildTdStyle(col,true)\">\n\n              <span>{{ col.title }}</span>\n            </div>\n          </template>\n        </div>\n      </div>\n\n      <div class=\"scroll-view\" ref=\"scrollView\" :style=\"{'max-height':maxHeight+'px'}\">\n\n\n        <!-- 渲染主体 body -->\n        <div :id=\"`${caseId}tbody`\" class=\"tbody\" :style=\"tbodyStyle\">\n          <!-- 扩展高度 -->\n          <div class=\"tr-expand\" :style=\"`height:${getExpandHeight}px; z-index:${loading?'11':'9'};`\"></div>\n          <!-- 无数据时显示 -->\n          <div v-if=\"rows.length===0\" class=\"tr-nodata\">\n            <span>暂无数据</span>\n          </div>\n          <!-- v-model=\"rows\"-->\n          <draggable\n            :value=\"rows\"\n            handle=\".td-ds-icons\"\n            @start=\"handleDragMoveStart\"\n            @end=\"handleDragMoveEnd\"\n          >\n\n            <!-- 动态生成tr -->\n            <template v-for=\"(row,rowIndex) in rows\">\n              <!-- tr 只加载可见的和预加载的总共十条数据 -->\n              <div\n                v-if=\"\n                rowIndex >= parseInt(`${(scrollTop-rowHeight) / rowHeight}`) &&\n                  (parseInt(`${scrollTop / rowHeight}`) + 9) > rowIndex\n              \"\n                :id=\"`${caseId}tbody-tr-${rowIndex}`\"\n                :data-idx=\"rowIndex\"\n                class=\"tr\"\n                :class=\"selectedRowIds.indexOf(row.id) !== -1 ? 'tr-checked' : ''\"\n                :style=\"buildTrStyle(rowIndex)\"\n                :key=\"row.id\"\n                @click=\"handleClickTableRow\"\n              >\n                <!-- 左侧固定td  -->\n\n                <div v-if=\"dragSort\" class=\"td td-ds\" :style=\"style.tdLeft\" @dblclick=\"_handleRowInsertDown(rowIndex)\" >\n                  <a-dropdown :trigger=\"['click']\" :getPopupContainer=\"getParentContainer\">\n                    <div class=\"td-ds-icons\">\n                      <a-icon type=\"align-left\"/>\n                      <a-icon type=\"align-right\"/>\n                    </div>\n\n                    <a-menu slot=\"overlay\">\n                      <a-menu-item key=\"0\" :disabled=\"rowIndex===0\" @click=\"_handleRowMoveUp(rowIndex)\">向上移</a-menu-item>\n                      <a-menu-item key=\"1\" :disabled=\"rowIndex===(rows.length-1)\" @click=\"_handleRowMoveDown(rowIndex)\">向下移</a-menu-item>\n                      <a-menu-divider/>\n                      <a-menu-item key=\"3\" @click=\"_handleRowInsertDown(rowIndex)\">插入一行</a-menu-item>\n                    </a-menu>\n                  </a-dropdown>\n                </div>\n\n                <div v-if=\"rowSelection\" class=\"td td-cb\" :style=\"style.tdLeft\">\n                  <!-- 此 v-for 只是为了拼接 id 字符串 -->\n                  <template v-for=\"(id,i) in [`${row.id}`]\">\n                    <a-checkbox\n                      :id=\"id\"\n                      :key=\"i\"\n                      :checked=\"selectedRowIds.indexOf(id) !== -1\"\n                      @change=\"handleChangeLeftCheckbox\"/>\n                  </template>\n                </div>\n                <div v-if=\"rowNumber\" class=\"td td-num\" :style=\"style.tdLeft\">\n                  <span>{{ rowIndex+1 }}</span>\n                </div>\n                <!-- 右侧动态生成td -->\n                <div\n                  class=\"td\"\n                  v-for=\"col in columns\"\n                  v-show=\"col.type !== formTypes.hidden\"\n                  :key=\"col.key\"\n                  :style=\"buildTdStyle(col)\">\n\n                  <!-- 此 v-for 只是为了拼接 id 字符串 -->\n                  <template v-for=\"(id,i) in [`${col.key}${row.id}`]\">\n\n                    <!-- native input -->\n                    <label :key=\"i\" v-if=\"col.type === formTypes.input || col.type === formTypes.inputNumber\">\n                      <a-tooltip v-bind=\"buildTooltipProps(row, col, id)\">\n                        <input\n                          v-if=\"isEditRow(row, col)\"\n                          :id=\"id\"\n                          v-bind=\"buildProps(row,col)\"\n                          :data-input-number=\"col.type === formTypes.inputNumber\"\n                          :placeholder=\"replaceProps(col, col.placeholder)\"\n                          @blur=\"(e)=>{handleBlurCommono(e.target,rowIndex,row,col)}\"\n                          @input=\"(e)=>{handleInputCommono(e.target,rowIndex,row,col)}\"\n                        />\n                        <span\n                          v-else\n                          class=\"j-td-span no-edit\"\n                          :class=\"{disabled: buildProps(row,col).disabled}\"\n                          @click=\"handleEditRow(row, col)\"\n                        >{{ inputValues[rowIndex][col.key] }}</span>\n                      </a-tooltip>\n                    </label>\n                    <!-- checkbox -->\n                    <template v-else-if=\"col.type === formTypes.checkbox\">\n                      <a-checkbox\n                        :key=\"i\"\n                        :id=\"id\"\n                        v-bind=\"buildProps(row,col)\"\n                        :checked=\"checkboxValues[id]\"\n                        @change=\"(e)=>handleChangeCheckboxCommon(e,row,col)\"\n                      />\n                    </template>\n                    <!-- select -->\n                    <template v-else-if=\"col.type === formTypes.select\">\n                      <a-tooltip v-bind=\"buildTooltipProps(row, col, id)\">\n                        <a-select\n                          v-if=\"isEditRow(row, col)\"\n                          :id=\"id\"\n                          :key=\"i\"\n                          v-bind=\"buildProps(row,col)\"\n                          style=\"width: 100%;\"\n                          :value=\"selectValues[id]\"\n                          :options=\"col.options\"\n                          :getPopupContainer=\"getParentContainer\"\n                          :placeholder=\"replaceProps(col, col.placeholder)\"\n                          :filterOption=\"(i,o)=>handleSelectFilterOption(i,o,col)\"\n                          @change=\"(v)=>handleChangeSelectCommon(v,id,row,col)\"\n                          @search=\"(v)=>handleSearchSelect(v,id,row,col)\"\n                          @blur=\"(v)=>handleBlurSearch(v,id,row,col)\"\n                          allowClear\n                        />\n                        <span\n                          v-else\n                          class=\"j-td-span no-edit\"\n                          :class=\"{disabled: buildProps(row,col).disabled}\"\n                          @click.stop=\"handleEditRow(row, col)\"\n                        >{{ getSelectTranslateText(selectValues[id], row, col) }}</span>\n                      </a-tooltip>\n                    </template>\n                    <!-- date -->\n                    <template v-else-if=\"col.type === formTypes.date || col.type === formTypes.datetime\">\n                      <a-tooltip v-bind=\"buildTooltipProps(row, col, id)\">\n                        <j-date\n                          v-if=\"isEditRow(row, col)\"\n                          :id=\"id\"\n                          :key=\"i\"\n                          v-bind=\"buildProps(row,col)\"\n                          style=\"width: 100%;\"\n                          :value=\"jdateValues[id]\"\n                          :getCalendarContainer=\"getParentContainer\"\n                          :placeholder=\"replaceProps(col, col.placeholder)\"\n                          :trigger-change=\"true\"\n                          :showTime=\"col.type === formTypes.datetime\"\n                          :dateFormat=\"col.type === formTypes.date? 'YYYY-MM-DD':'YYYY-MM-DD HH:mm:ss'\"\n                          allowClear\n                          @change=\"(v)=>handleChangeJDateCommon(v,id,row,col,col.type === formTypes.datetime)\"\n                        />\n                        <span\n                          v-else\n                          class=\"j-td-span no-edit\"\n                          :class=\"{disabled: buildProps(row,col).disabled}\"\n                          @click=\"handleEditRow(row, col)\"\n                        >{{ jdateValues[id] }}</span>\n                      </a-tooltip>\n                    </template>\n                    <!-- input_pop -->\n                    <template v-else-if=\"col.type === formTypes.input_pop\">\n                      <a-tooltip v-bind=\"buildTooltipProps(row, col, id)\">\n                        <j-input-pop\n                          v-if=\"isEditRow(row, col)\"\n                          :id=\"id\"\n                          :key=\"i\"\n                          :width=\"300\"\n                          :height=\"210\"\n                          :pop-container=\"`${caseId}tbody`\"\n                          v-bind=\"buildProps(row,col)\"\n                          style=\"width: 100%;\"\n                          :value=\"jInputPopValues[id]\"\n                          :getCalendarContainer=\"getParentContainer\"\n                          :placeholder=\"replaceProps(col, col.placeholder)\"\n                          @change=\"(v)=>handleChangeJInputPopCommon(v,id,row,col)\"\n                        />\n                        <span\n                          v-else\n                          class=\"j-td-span no-edit\"\n                          :class=\"{disabled: buildProps(row,col).disabled}\"\n                          @click=\"handleEditRow(row, col)\"\n                        >{{ jInputPopValues[id] }}</span>\n                      </a-tooltip>\n                    </template>\n                    <!-- upload -->\n                    <div v-else-if=\"col.type === formTypes.upload\" :key=\"i\">\n                      <template v-if=\"uploadValues[id] != null\" v-for=\"(file,fileKey) of [(uploadValues[id]||{})]\">\n                        <a-input\n                          :key=\"fileKey\"\n                          :readOnly=\"true\"\n                          :value=\"file.name\"\n                        >\n\n                          <template slot=\"addonBefore\" style=\"width: 30px\">\n                            <a-tooltip v-if=\"file.status==='uploading'\" :title=\"`上传中(${Math.floor(file.percent)}%)`\">\n                              <a-icon type=\"loading\"/>\n                            </a-tooltip>\n                            <a-tooltip v-else-if=\"file.status==='done'\" title=\"上传完成\">\n                              <a-icon type=\"check-circle\" style=\"color:#00DB00;\"/>\n                            </a-tooltip>\n                            <a-tooltip v-else title=\"上传失败\">\n                              <a-icon type=\"exclamation-circle\" style=\"color:red;\"/>\n                            </a-tooltip>\n                          </template>\n\n                          <template v-if=\"col.allowDownload!==false || col.allowRemove!==false\" slot=\"addonAfter\" style=\"width: 30px\">\n                            <a-dropdown :trigger=\"['click']\" placement=\"bottomRight\" :getPopupContainer=\"getParentContainer\">\n                              <a-tooltip title=\"操作\" :getPopupContainer=\"getParentContainer\">\n                                <a-icon\n                                  v-if=\"file.status!=='uploading'\"\n                                  type=\"setting\"\n                                  style=\"cursor: pointer;\"/>\n                              </a-tooltip>\n\n                              <a-menu slot=\"overlay\">\n                                <a-menu-item v-if=\"col.allowDownload!==false\" @click=\"handleClickDownloadFile(id)\">\n                                  <span><a-icon type=\"download\"/>&nbsp;下载</span>\n                                </a-menu-item>\n                                <a-menu-item v-if=\"col.allowRemove!==false\" @click=\"handleClickDelFile(id)\">\n                                  <span><a-icon type=\"delete\"/>&nbsp;删除</span>\n                                </a-menu-item>\n                              </a-menu>\n                            </a-dropdown>\n                          </template>\n\n                        </a-input>\n                      </template>\n\n                      <div :hidden=\"uploadValues[id] != null\">\n                        <a-tooltip v-bind=\"buildTooltipProps(row, col, id)\">\n                          <a-upload\n                            name=\"file\"\n                            :data=\"{'isup':1}\"\n                            :multiple=\"false\"\n                            :action=\"col.action\"\n                            :headers=\"uploadGetHeaders(row,col)\"\n                            :showUploadList=\"false\"\n                            v-bind=\"buildProps(row,col)\"\n                            @change=\"(v)=>handleChangeUpload(v,id,row,col)\"\n                          >\n                            <a-button icon=\"upload\">{{ col.placeholder }}</a-button>\n                          </a-upload>\n                        </a-tooltip>\n                      </div>\n\n                    </div>\n\n                    <!-- update-begin-author:taoyan date:0827 for：popup -->\n                    <template v-else-if=\"col.type === formTypes.popup\">\n                      <a-tooltip v-bind=\"buildTooltipProps(row, col, id)\">\n                        <j-popup\n                          v-if=\"isEditRow(row, col)\"\n                          :id=\"id\"\n                          :key=\"i\"\n                          v-bind=\"buildProps(row,col)\"\n                          :placeholder=\"replaceProps(col, col.placeholder)\"\n                          style=\"width: 100%;\"\n                          :value=\"getPopupValue(id)\"\n                          :field=\"col.field || col.key\"\n                          :org-fields=\"col.orgFields\"\n                          :dest-fields=\"col.destFields\"\n                          :code=\"col.popupCode\"\n                          :groupId=\"caseId\"\n                          @input=\"(value,others)=>popupCallback(value,others,id,row,col,rowIndex)\"\n                        />\n                        <span\n                          v-else\n                          class=\"j-td-span no-edit\"\n                          :class=\"{disabled: buildProps(row,col).disabled}\"\n                          @click=\"handleEditRow(row, col)\"\n                        >{{ getPopupValue(id) }}</span>\n                      </a-tooltip>\n                    </template>\n                    <!-- update-end-author:taoyan date:0827 for：popup -->\n\n                    <!-- update-beign-author:taoyan date:0827 for：文件/图片逻辑新增 -->\n                    <div v-else-if=\"col.type === formTypes.file\" :key=\"i\">\n                      <template v-if=\"uploadValues[id] != null\" v-for=\"(file,fileKey) of [(uploadValues[id]||{})]\">\n                        <div :key=\"fileKey\" style=\"position: relative;\">\n                          <a-tooltip v-if=\"file.status==='uploading'\" :title=\"`上传中(${Math.floor(file.percent)}%)`\">\n                            <a-icon type=\"loading\" style=\"color:red;\"/>\n                            <span style=\"color:red;margin-left:5px\">{{  file.status }}</span>\n                          </a-tooltip>\n\n                          <a-tooltip v-else-if=\"file.status==='done'\" :title=\"file.name\">\n                            <a-icon type=\"paper-clip\" />\n                            <span style=\"margin-left:5px\">{{ getEllipsisWord(file.name,5) }}</span>\n                          </a-tooltip>\n\n                          <a-tooltip v-else :title=\"file.name\">\n                            <a-icon type=\"paper-clip\" style=\"color:red;\"/>\n                            <span style=\"color:red;margin-left:5px\">{{ getEllipsisWord(file.name,5) }}</span>\n                          </a-tooltip>\n\n                          <template style=\"width: 30px\">\n                            <a-dropdown :trigger=\"['click']\" placement=\"bottomRight\" :getPopupContainer=\"getParentContainer\" style=\"margin-left: 10px;\">\n                              <a-tooltip title=\"操作\" :getPopupContainer=\"getParentContainer\">\n                                <a-icon v-if=\"file.status!=='uploading'\" type=\"setting\" style=\"cursor: pointer;\"/>\n                              </a-tooltip>\n\n                              <a-menu slot=\"overlay\">\n                                <a-menu-item v-if=\"col.allowDownload!==false\" @click=\"handleClickDownFileByUrl(id)\">\n                                  <span><a-icon type=\"download\"/>&nbsp;下载</span>\n                                </a-menu-item>\n                                <a-menu-item @click=\"handleClickDelFile(id)\">\n                                  <span><a-icon type=\"delete\"/>&nbsp;删除</span>\n                                </a-menu-item>\n                                <a-menu-item @click=\"handleMoreOperation(id,col,col)\">\n                                  <span><a-icon type=\"bars\" /> 更多</span>\n                                </a-menu-item>\n                              </a-menu>\n                            </a-dropdown>\n                          </template>\n                        </div>\n                      </template>\n\n                      <div :hidden=\"uploadValues[id] != null\">\n                        <a-tooltip v-bind=\"buildTooltipProps(row, col, id)\">\n                          <a-upload\n                            name=\"file\"\n                            :data=\"{'isup':1}\"\n                            :multiple=\"false\"\n                            :action=\"getUploadAction(col.action)\"\n                            :headers=\"uploadGetHeaders(row,col)\"\n                            :showUploadList=\"false\"\n                            v-bind=\"buildProps(row,col)\"\n                            @change=\"(v)=>handleChangeUpload(v,id,row,col)\"\n                          >\n                            <a-button icon=\"upload\">上传文件</a-button>\n                          </a-upload>\n                        </a-tooltip>\n                      </div>\n\n                    </div>\n\n                    <div v-else-if=\"col.type === formTypes.image\" :key=\"i\">\n                      <template v-if=\"uploadValues[id] != null\" v-for=\"(file,fileKey) of [(uploadValues[id]||{})]\">\n                        <div :key=\"fileKey\" style=\"position: relative;\">\n                          <template v-if=\"!uploadValues[id] || !(uploadValues[id]['url'] || uploadValues[id]['path'] || uploadValues[id]['message'])\">\n                            <a-icon type=\"loading\"/>\n                          </template>\n                          <template v-else-if=\"uploadValues[id]['path']\">\n                            <img class=\"j-editable-image\" :src=\"getCellImageView(id)\" alt=\"无图片\" @click=\"handleMoreOperation(id,'img',col)\"/>\n                          </template>\n                          <template v-else>\n                            <a-icon type=\"exclamation-circle\" style=\"color: red;\" @click=\"handleClickShowImageError(id)\"/>\n                          </template>\n                          <template slot=\"addonBefore\" style=\"width: 30px\">\n                            <a-tooltip v-if=\"file.status==='uploading'\" :title=\"`上传中(${Math.floor(file.percent)}%)`\">\n                              <a-icon type=\"loading\"/>\n                            </a-tooltip>\n                            <a-tooltip v-else-if=\"file.status==='done'\" title=\"上传完成\">\n                              <a-icon type=\"check-circle\" style=\"color:#00DB00;\"/>\n                            </a-tooltip>\n                            <a-tooltip v-else title=\"上传失败\">\n                              <a-icon type=\"exclamation-circle\" style=\"color:red;\"/>\n                            </a-tooltip>\n                          </template>\n\n                          <template style=\"width: 30px\">\n                            <a-dropdown :trigger=\"['click']\" placement=\"bottomRight\" :getPopupContainer=\"getParentContainer\" style=\"margin-left: 10px;\">\n                              <a-tooltip title=\"操作\" :getPopupContainer=\"getParentContainer\">\n                                <a-icon\n                                  v-if=\"file.status!=='uploading'\"\n                                  type=\"setting\"\n                                  style=\"cursor: pointer;\"/>\n                              </a-tooltip>\n\n                              <a-menu slot=\"overlay\">\n                                <a-menu-item v-if=\"col.allowDownload!==false\" @click=\"handleClickDownFileByUrl(id)\">\n                                  <span><a-icon type=\"download\"/>&nbsp;下载</span>\n                                </a-menu-item>\n                                <a-menu-item @click=\"handleClickDelFile(id)\">\n                                  <span><a-icon type=\"delete\"/>&nbsp;删除</span>\n                                </a-menu-item>\n                                <a-menu-item @click=\"handleMoreOperation(id,'img',col)\">\n                                  <span><a-icon type=\"bars\" /> 更多</span>\n                                </a-menu-item>\n                              </a-menu>\n                            </a-dropdown>\n                          </template>\n\n                        </div>\n                      </template>\n\n                      <div :hidden=\"uploadValues[id] != null\">\n                        <a-tooltip v-bind=\"buildTooltipProps(row, col, id)\">\n                          <a-upload\n                            name=\"file\"\n                            :data=\"{'isup':1}\"\n                            :multiple=\"false\"\n                            :action=\"getUploadAction(col.action)\"\n                            :headers=\"uploadGetHeaders(row,col)\"\n                            :showUploadList=\"false\"\n                            v-bind=\"buildProps(row,col)\"\n                            @change=\"(v)=>handleChangeUpload(v,id,row,col)\"\n                          >\n                            <a-button icon=\"upload\">上传图片</a-button>\n                          </a-upload>\n                        </a-tooltip>\n                      </div>\n\n                    </div>\n                    <!-- update-end-author:taoyan date:0827 for：图片逻辑新增 -->\n\n                    <!-- radio-begin -->\n                    <template v-else-if=\"col.type === formTypes.radio\">\n                      <a-tooltip v-bind=\"buildTooltipProps(row, col, id)\">\n                        <a-radio-group\n                          :id=\"id\"\n                          :key=\"i\"\n                          v-bind=\"buildProps(row,col)\"\n                          :value=\"radioValues[id]\"\n                          @change=\"(e)=>handleRadioChange(e.target.value,id,row,col)\">\n                          <a-radio v-for=\"(item, key) in col.options\" :key=\"key\" :value=\"item.value\">{{ item.text }}</a-radio>\n                        </a-radio-group>\n                      </a-tooltip>\n                    </template>\n                    <!-- radio-end -->\n\n                    <!-- select多选 -begin -->\n                    <template v-else-if=\"col.type === formTypes.list_multi\">\n                      <a-tooltip v-bind=\"buildTooltipProps(row, col, id)\">\n                        <a-select\n                          v-if=\"isEditRow(row, col)\"\n                          :id=\"id\"\n                          :key=\"i\"\n                          mode=\"multiple\"\n                          :maxTagCount=\"1\"\n                          v-bind=\"buildProps(row,col)\"\n                          style=\"width: 100%;\"\n                          :value=\"multiSelectValues[id]\"\n                          :options=\"col.options\"\n                          :getPopupContainer=\"getParentContainer\"\n                          :placeholder=\"replaceProps(col, col.placeholder)\"\n                          @change=\"(v)=>handleMultiSelectChange(v,id,row,col)\"\n                          allowClear\n                        />\n                        <span\n                          v-else\n                          class=\"j-td-span no-edit\"\n                          :class=\"{disabled: buildProps(row,col).disabled}\"\n                          @click=\"handleEditRow(row, col)\"\n                        >{{ getSelectTranslateText(multiSelectValues[id], row, col) }} </span>\n                      </a-tooltip>\n                    </template>\n                    <!-- select多选 -end -->\n\n                    <!-- select搜索 -begin -->\n                    <template v-else-if=\"col.type === formTypes.sel_search\">\n                      <a-tooltip v-bind=\"buildTooltipProps(row, col, id)\">\n                        <a-select\n                          v-if=\"isEditRow(row, col)\"\n                          :id=\"id\"\n                          :key=\"i\"\n                          showSearch\n                          optionFilterProp=\"children\"\n                          :filterOption=\"filterOption\"\n                          v-bind=\"buildProps(row,col)\"\n                          style=\"width: 100%;\"\n                          :value=\"searchSelectValues[id]\"\n                          :options=\"col.options\"\n                          :getPopupContainer=\"getParentContainer\"\n                          :placeholder=\"replaceProps(col, col.placeholder)\"\n                          @change=\"(v)=>handleSearchSelectChange(v,id,row,col)\"\n                          allowClear\n                        />\n                        <span\n                          v-else\n                          class=\"j-td-span no-edit\"\n                          :class=\"{disabled: buildProps(row,col).disabled}\"\n                          @click=\"handleEditRow(row, col)\"\n                        >{{ getSelectTranslateText(searchSelectValues[id], row, col) }}</span>\n                      </a-tooltip>\n                    </template>\n                    <!-- select搜索 -end -->\n\n                    <div v-else-if=\"col.type === formTypes.slot\" :key=\"i\">\n                      <a-tooltip v-bind=\"buildTooltipProps(row, col, id)\">\n                        <slot\n                          :name=\"(col.slot || col.slotName) || col.key\"\n                          :index=\"rowIndex\"\n                          :text=\"slotValues[id]\"\n                          :value=\"slotValues[id]\"\n                          :column=\"col\"\n                          :rowId=\"getCleanId(row.id)\"\n                          :getValue=\"()=>_getValueForSlot(row.id)\"\n                          :caseId=\"caseId\"\n                          :allValues=\"_getAllValuesForSlot()\"\n                          :target=\"getVM()\"\n                          :handleChange=\"(v)=>handleChangeSlotCommon(v,id,row,col)\"\n                          :isNotPass=\"notPassedIds.includes(col.key+row.id)\"\n                        />\n                      </a-tooltip>\n                    </div>\n\n                    <!-- else (normal) -->\n                    <span v-else :key=\"i\" v-bind=\"buildProps(row,col)\">{{ inputValues[rowIndex][col.key] }}</span>\n                  </template>\n                </div>\n              </div>\n              <!-- -- tr end -- -->\n\n            </template>\n          </draggable>\n\n\n          <!-- 统计行 -->\n          <div\n            v-if=\"showStatisticsRow\"\n            class=\"tr\"\n            :style=\"{\n              ...buildTrStyle(rows.length),\n              height: '32px'\n            }\"\n          >\n            <div v-if=\"dragSort\" class=\"td td-ds\" :style=\"style.tdLeft\">\n            </div>\n            <div v-if=\"rowSelection\" class=\"td td-cb\" :style=\"style.tdLeft\">\n              统计\n            </div>\n            <div v-if=\"rowNumber\" class=\"td td-num\" :style=\"style.tdLeft\">\n              <span v-if=\"!rowSelection\">统计</span>\n            </div>\n\n            <!-- 右侧动态生成td -->\n            <template v-for=\"col in columns\">\n              <div\n                :key=\"col.key\"\n                class=\"td\"\n                v-show=\"col.type !== formTypes.hidden\"\n                :style=\"buildTdStyle(col)\"\n              >\n                <span\n                  v-show=\"col.type === formTypes.inputNumber\"\n                  style=\"padding: 0 5px;\"\n                >{{statisticsColumns[col.key]}}</span>\n              </div>\n            </template>\n\n          </div>\n\n        </div>\n      </div>\n      <j-file-pop ref=\"filePop\" @ok=\"handleFileSuccess\" :number=\"number\"></j-file-pop>\n    </div>\n  </a-spin>\n</template>\n\n<script>\n  import Vue from 'vue'\n  import Draggable from 'vuedraggable'\n  import { ACCESS_TOKEN } from '@/store/mutation-types'\n  import { FormTypes, VALIDATE_NO_PASSED } from '@/utils/JEditableTableUtil'\n  import { cloneObject, randomString, randomNumber, getEventPath } from '@/utils/util'\n  import JDate from '@/components/jeecg/JDate'\n  import { filterDictText, initDictOptions } from '@/components/dict/JDictSelectUtil'\n  import { getFileAccessHttpUrl } from '@/api/manage';\n  import JInputPop from '@/components/jeecg/minipop/JInputPop'\n  import JFilePop from '@/components/jeecg/minipop/JFilePop'\n\n  // 行高，需要在实例加载完成前用到\n  let rowHeight = 61\n\n  export default {\n    name: 'JEditableTable',\n    components: { JDate, Draggable, JInputPop, JFilePop },\n    provide() {\n      return {\n        parentIsJEditableTable: true,\n        getDestroyCleanGroupRequest: () => this.destroyCleanGroupRequest,\n      }\n    },\n    props: {\n      // 列信息\n      columns: {\n        type: Array,\n        required: true\n      },\n      // 数据源\n      dataSource: {\n        type: Array,\n        required: true,\n        default: () => []\n      },\n      // 是否显示操作按钮\n      actionButton: {\n        type: Boolean,\n        default: false\n      },\n      // 是否显示行号\n      rowNumber: {\n        type: Boolean,\n        default: false\n      },\n      // 是否可选择行\n      rowSelection: {\n        type: Boolean,\n        default: false\n      },\n      // 页面是否在加载中\n      loading: {\n        type: Boolean,\n        default: false\n      },\n      // 表格内容区域最大高度\n      maxHeight: {\n        type: Number,\n        default: 400\n      },\n      // 要禁用的行\n      disabledRows: {\n        type: Object,\n        default() {\n          return {}\n        }\n      },\n      // 是否禁用全部组件\n      disabled: {\n        type: Boolean,\n        default: false\n      },\n      // 是否可拖拽排序\n      dragSort: {\n        type: Boolean,\n        default: false\n      },\n      dragSortKey: {\n        type: String,\n        default: 'orderNum'\n      },\n      // 是否一直显示编辑框，如果为false则只有点击的时候才出现输入框\n      alwaysEdit: {\n        type: Boolean,\n        default: true\n      },\n    },\n    data() {\n      return {\n        // 是否首次运行\n        isFirst: true,\n        // 当前实例是否是行编辑\n        isJEditableTable: true,\n        // caseId，用于防止有多个实例的时候会冲突\n        caseId: `_jet-${randomString(6)}-`,\n        // 临时ID标识，凡是以该标识结尾的ID都是临时ID，不添加到数据库中\n        tempId: `_tid-${randomString(6)}`,\n        // 存储document element 对象\n        el: {\n          inputTable: null,\n          tbody: null\n        },\n        // 存储各个div的style\n        style: {\n          // 'max-height': '400px'\n          tbody: { left: '0px' },\n          // 左侧固定td的style\n          tdLeft: {},\n        },\n        // 表单的类型\n        formTypes: FormTypes,\n        // 行数据\n        rows: [],\n        // 行高，height + padding + border\n        rowHeight,\n        // 滚动条顶部距离\n        scrollTop: 0,\n        // 绑定 select 的值\n        selectValues: {},\n        // 绑定 checkbox 的值\n        checkboxValues: {},\n        // 绑定 jdate 的值\n        jdateValues: {},\n        // 绑定jinputpop\n        jInputPopValues:{},\n        // 绑定插槽数据\n        slotValues: {},\n        // file 信息\n        uploadValues: {},\n        //popup信息\n        popupValues: {},\n\n        radioValues: {},\n        metaCheckboxValues: {},\n        multiSelectValues: {},\n        searchSelectValues: {},\n        // 绑定左侧选择框已选择的id\n        selectedRowIds: [],\n        // 存储被删除行的id\n        deleteIds: [],\n        // 存储显示tooltip的信息\n        tooltips: {},\n        // 存储没有通过验证的inputId\n        notPassedIds: [],\n\n        // 当前是否正在拖拽排序\n        dragging: false,\n        // 是否有统计列\n        hasStatisticsColumn: false,\n        statisticsColumns: {},\n        // 只有在行编辑被销毁时才主动清空GroupRequest的内存\n        destroyCleanGroupRequest: false,\n        // 当前正在编辑的行的id\n        currentEditRows: {},\n        // 上次push数据的事件，用于判断是否点击过快\n        lastPushTimeMap: new Map(),\n        number:0,\n      }\n    },\n    created() {\n      this.inputValues = []\n      // 当前显示的tr\n      this.visibleTrEls = []\n      this.disabledRowIds = (this.disabledRowIds || [])\n      // 解决火狐浏览器下拖拽会打开新的Tab的问题\n      document.body.ondrop = (event) => {\n        if (this.dragging) {\n          event.preventDefault()\n          event.stopPropagation()\n        }\n      }\n    },\n    // 计算属性\n    computed: {\n      // expandHeight = rows.length * rowHeight\n      getExpandHeight() {\n        let length = this.rows.length * this.rowHeight\n        if (this.showStatisticsRow) {\n          length += 34\n        }\n        return length\n      },\n      // 是否显示统计行\n      showStatisticsRow() {\n        return this.hasStatisticsColumn && this.rows.length > 0\n      },\n      // 获取是否选择了部分\n      getSelectIndeterminate() {\n        return (this.selectedRowIds.length > 0 &&\n          this.selectedRowIds.length < this.rows.length)\n      },\n      // 获取是否选择了全部\n      getSelectAll() {\n        return (this.selectedRowIds.length === this.rows.length) && this.rows.length > 0\n      },\n      tbodyStyle() {\n        let style = Object.assign({}, this.style.tbody)\n        // style['max-height'] = `${this.maxHeight}px`\n        style['width'] = this.realTrWidth\n        return style\n      },\n      showClearSelectButton() {\n        let count = 0\n        for (let key in this.disabledRows) {\n          if (this.disabledRows.hasOwnProperty(key)) count++\n        }\n        return count > 0\n      },\n      accessToken() {\n        return Vue.ls.get(ACCESS_TOKEN)\n      },\n      realTrWidth() {\n        let splice = ' + '\n        let calcWidth = 'calc('\n        this.columns.forEach((column, i) => {\n          let { type, width } = column\n          // 隐藏字段不参与计算\n          if (type !== FormTypes.hidden) {\n            if (typeof width === 'number') {\n              calcWidth += width + 'px'\n            } else if (typeof width === 'string') {\n              calcWidth += width\n            } else {\n              calcWidth += '120px'\n            }\n            calcWidth += splice\n          }\n        })\n        if (calcWidth.endsWith(splice)) {\n          calcWidth = calcWidth.substring(0, calcWidth.length - splice.length)\n        }\n        calcWidth += ')'\n        // console.log('calcWidth: ', calcWidth)\n        return calcWidth\n      }\n    },\n    // 侦听器\n    watch: {\n      rows: {\n        immediate: true,\n        handler(val, old) {\n          // val.forEach(item => {\n          //   for (let inputValue of  this.inputValues) {\n          //     if (inputValue.id === item.id) {\n          //       item['dbFieldName'] = inputValue['dbFieldName']\n          //       break\n          //     }\n          //   }\n          // })\n          // console.log('watch.rows:', cloneObject({ val, old }))\n        }\n      },\n      dataSource: {\n        immediate: true,\n        handler: function (newValue) {\n          // 兼容IE\n          this.getElementPromise('tbody').then(() => {\n            this.initialize()\n            this._pushByDataSource(newValue)\n          })\n        }\n      },\n      columns: {\n        immediate: true,\n        handler(columns) {\n          // 兼容IE\n          this.getElementPromise('tbody').then(() => {\n            columns.forEach(column => {\n              if (column.type === FormTypes.select || column.type === FormTypes.list_multi || column.type === FormTypes.sel_search) {\n                // 兼容 旧版本 options\n                if (column.options instanceof Array) {\n                  column.options = column.options.map(item => {\n                    if (item) {\n                      return {\n                        ...item,\n                        text: item.text || item.title,\n                        title: item.text || item.title\n                      }\n                    }\n                    return {}\n                  })\n                }\n                if (column.dictCode) {\n                  this._loadDictConcatToOptions(column)\n                }\n              }\n            })\n          })\n        }\n      },\n      // 当selectRowIds改变时触发事件\n      selectedRowIds(newValue) {\n        this.$emit('selectRowChange', cloneObject(newValue).map(i => this.getCleanId(i)))\n      }\n    },\n    mounted() {\n      let vm = this\n      /** 监听滚动条事件 */\n      this.getElement('inputTable').onscroll = function (event) {\n        vm.syncScrollBar(event.target.scrollLeft)\n      }\n      this.getElement('tbody').onscroll = function (event) {\n        // vm.recalcTrHiddenItem(event.target.scrollTop)\n      }\n\n      let { thead, scrollView } = this.$refs\n      scrollView.onscroll = function (event) {\n\n        // console.log(event.target.scrollTop, ' - ', event.target.scrollLeft)\n\n        thead.scrollLeft = event.target.scrollLeft\n\n        vm.recalcTrHiddenItem(event.target.scrollTop)\n\n      }\n\n      // 添加事件监听\n      this.addEventListener()\n\n    },\n    methods: {\n\n      getElement(id, noCaseId = false) {\n        if (!this.el[id]) {\n          this.el[id] = document.getElementById((noCaseId ? '' : this.caseId) + id)\n        }\n        return this.el[id]\n      },\n\n      getElementPromise(id, noCaseId = false) {\n        return new Promise((resolve) => {\n          let timer = setInterval(() => {\n            let element = this.getElement(id, noCaseId)\n            if (element) {\n              clearInterval(timer)\n              resolve(element)\n            }\n          }, 10)\n        })\n      },\n\n      /** 初始化列表 */\n      initialize() {\n        this.visibleTrEls = []\n        // 判断是否是首次进入该方法，如果是就不清空行，防止删除了预添加的数据\n        if (!this.isFirst) {\n          // inputValues：用来存储input表单的值\n          // 数组里的每项都是一个对象，对象里每个key都是input的rowKey，值就是input的值，其中有个id的字段来区分\n          // 示例：\n          // [{\n          //    id: \"_jet-4sp0iu-15541771111770\"\n          //    dbDefaultVal: \"aaa\",\n          //    dbFieldName: \"bbb\",\n          //    dbFieldTxt: \"ccc\",\n          //    dbLength: 32\n          // }]\n          this.inputValues = []\n          this.rows = []\n          this.deleteIds = []\n          this.selectValues = {}\n          this.checkboxValues = {}\n          this.jdateValues = {}\n          this.jInputPopValues = {}\n          this.slotValues = {}\n          this.selectedRowIds = []\n          this.tooltips = {}\n          this.notPassedIds = []\n          this.uploadValues = []\n          this.popupValues = []\n          this.radioValues = []\n          this.multiSelectValues = []\n          this.searchSelectValues = []\n          this.scrollTop = 0\n          this.$nextTick(() => {\n            this.getElement('tbody').scrollTop = 0\n          })\n        } else {\n          this.isFirst = false\n        }\n      },\n\n      /** 同步滚动条状态 */\n      syncScrollBar(scrollLeft) {\n        // this.style.tbody.left = `${scrollLeft}px`\n        // this.getElement('tbody').scrollLeft = scrollLeft\n      },\n      /** 重置滚动条位置，参数留空则滚动到上次记录的位置 */\n      resetScrollTop(top) {\n        let { scrollView } = this.$refs\n        if (top != null && typeof top === 'number') {\n          scrollView.scrollTop = top\n        } else {\n          scrollView.scrollTop = this.scrollTop\n        }\n      },\n      /** 重新计算需要隐藏或显示的tr */\n      recalcTrHiddenItem(top) {\n        let diff = top - this.scrollTop\n        if (diff < 0) {\n          diff = this.scrollTop - top\n        }\n        // 只有在滚动了百分之三十的行高的距离时才进行更新\n        if (diff >= this.rowHeight * 0.3) {\n          this.scrollTop = top\n          // 更新form表单的值\n          this.$nextTick(() => {\n            this.updateFormValues()\n          })\n        }\n      },\n      /** 生成id */\n      generateId(rows) {\n        if (!(rows instanceof Array)) {\n          rows = this.rows || []\n        }\n        let timestamp = new Date().getTime()\n        return `${this.caseId}${timestamp}${rows.length}${randomNumber(6)}${this.tempId}`\n      },\n      /** push 一条数据 */\n      push(record, update = true, rows, insertIndex = null, setDefaultValue = true) {\n        return this._pushByDataSource([record], [insertIndex], update, rows, setDefaultValue)\n      },\n\n      /**\n       * push 数据\n       *\n       * @param dataSource 数据源\n       * @param insertIndexes 行插入位置，和dataSource的下标一一对应\n       * @param update 是否更新\n       * @param rows 若不传就使用 this.rows\n       * @param setDefaultValue 是否填充默认值\n       *\n       */\n      _pushByDataSource(dataSource, insertIndexes = null, update = true, rows = null, setDefaultValue = false) {\n        if (!(rows instanceof Array)) {\n          rows = [...this.rows] || []\n        }\n        let checkboxValues = { ...this.checkboxValues }\n        let selectValues = { ...this.selectValues }\n        let jdateValues = { ...this.jdateValues }\n        let jInputPopValues = { ...this.jInputPopValues }\n        let slotValues = { ...this.slotValues }\n        let uploadValues = { ...this.uploadValues }\n        let popupValues = { ...this.popupValues }\n        let radioValues = { ...this.radioValues }\n        let multiSelectValues = { ...this.multiSelectValues }\n        let searchSelectValues = { ...this.searchSelectValues }\n        // 禁用行的id\n        let disabledRowIds = (this.disabledRowIds || [])\n        dataSource.forEach((data, newValueIndex) => {\n          // 不能直接更改数据源的id\n          let dataId = data.id\n          // 判断源数据是否带有id\n          if (dataId == null || dataId === '') {\n            dataId = this.generateId(rows)\n          } else if(!this.hasCaseId(dataId)) {\n            dataId = this.caseId + dataId\n          }\n          let row = { id: dataId }\n          let value = { id: dataId }\n          let disabled = false\n          this.columns.forEach(column => {\n            let inputId = column.key + value.id\n            let sourceValue = (data[column.key] == null ? '' : data[column.key]).toString()\n\n            let defaultValue = null;\n            if (setDefaultValue) {\n              defaultValue = column.defaultValue || (column.defaultValue === 0 ? 0 : '')\n              if (defaultValue instanceof Array) {\n                defaultValue = defaultValue.join(',')\n              }\n\n              sourceValue = (typeof sourceValue === 'number' || sourceValue) ? sourceValue : defaultValue\n            }\n            let sourceValueIsEmpty = (sourceValue == null || sourceValue === '')\n\n            if (column.type === FormTypes.inputNumber) {\n              // 判断是否是排序字段，如果是就赋最大值\n              if (column.isOrder === true) {\n                value[column.key] = this.getInputNumberMaxValue(column) + 1\n              } else {\n                value[column.key] = sourceValue\n              }\n              // 判断是否是统计列\n              if (column.statistics) {\n                this.hasStatisticsColumn = true\n                if (!this.statisticsColumns[column.key]) {\n                  this.$set(this.statisticsColumns, column.key, 0)\n                }\n              }\n\n            } else if (column.type === FormTypes.checkbox) {\n              // 判断是否设定了customValue（自定义值）\n              if (column.customValue instanceof Array) {\n                let customValue = (column.customValue[0] || '').toString()\n                if (sourceValueIsEmpty && setDefaultValue) {\n                  sourceValue = column.defaultChecked ? customValue : sourceValue\n                }\n                checkboxValues[inputId] = (sourceValue === customValue)\n              } else {\n                if (sourceValueIsEmpty && setDefaultValue) {\n                  checkboxValues[inputId] = !!column.defaultChecked\n                } else {\n                  checkboxValues[inputId] = sourceValue\n                }\n              }\n\n            } else if (column.type === FormTypes.select) {\n              if (!sourceValueIsEmpty) {\n                // 判断是否是多选\n                if (typeof sourceValue === 'string' && (column.props || {})['mode'] === 'multiple') {\n                  sourceValue = sourceValue === '' ? [] : sourceValue.split(',')\n                }\n                selectValues[inputId] = sourceValue\n              } else {\n                selectValues[inputId] = undefined\n              }\n\n            } else if (column.type === FormTypes.date || column.type === FormTypes.datetime) {\n              jdateValues[inputId] = sourceValue\n\n            } else if (column.type === FormTypes.slot) {\n              slotValues[inputId] = sourceValue\n\n            } else if (column.type === FormTypes.popup) {\n              popupValues[inputId] = sourceValue\n            } else if (column.type === FormTypes.input_pop) {\n              jInputPopValues[inputId] = sourceValue\n            } else if (column.type === FormTypes.radio) {\n              radioValues[inputId] = sourceValue\n            } else if (column.type === FormTypes.sel_search) {\n              searchSelectValues[inputId] = sourceValue\n            } else if (column.type === FormTypes.list_multi) {\n              if (typeof sourceValue === 'string' && sourceValue.length > 0) {\n                multiSelectValues[inputId] = sourceValue.split(',')\n              } else {\n                multiSelectValues[inputId] = []\n              }\n            } else if (column.type === FormTypes.upload || column.type === FormTypes.file || column.type === FormTypes.image) {\n              if (sourceValue) {\n                let fileName = ''\n                if (sourceValue.indexOf(',') > 0) {\n                  let sourceValue2 = sourceValue.split(',')[0]\n                  fileName = sourceValue2.substring(sourceValue2.lastIndexOf('/') + 1)\n                } else {\n                  fileName = sourceValue.substring(sourceValue.lastIndexOf('/') + 1)\n                }\n                uploadValues[inputId] = {\n                  name: fileName,\n                  status: 'done',\n                  path: sourceValue\n                }\n              }\n            } else {\n              value[column.key] = sourceValue\n            }\n\n            // 解析disabledRows\n            for (let columnKey in this.disabledRows) {\n              // 判断是否有该属性\n              if (this.disabledRows.hasOwnProperty(columnKey) && data.hasOwnProperty(columnKey)) {\n                if (disabled !== true) {\n                  let temp = this.disabledRows[columnKey]\n                  // 禁用规则可以是一个数组\n                  if (temp instanceof Array) {\n                    disabled = temp.includes(data[columnKey])\n                  } else {\n                    disabled = (temp === data[columnKey])\n                  }\n                  if (disabled) {\n                    disabledRowIds.push(row.id)\n                  }\n                }\n              }\n            }\n          })\n          // 插入行而不是添加到最后\n          let added = false\n          if (insertIndexes instanceof Array) {\n            let insertIndex = insertIndexes[newValueIndex]\n            if (typeof insertIndex === 'number') {\n              added = true\n              rows.splice(insertIndex, 0, row)\n              this.inputValues.splice(insertIndex, 0, value)\n            }\n          }\n          //update-begin-author:lvdandan date:20201105 for:LOWCOD-987 【online】js增强的问题--数据对象带有id，且和现有数据一致时，替换患有数据\n          if(-1 !== rows.findIndex(item => item.id === row.id)){\n            added = true\n            this.inputValues = this.inputValues.map(item => item.id === row.id ? value : item)\n          }\n          //update-begin-author:lvdandan date:20201105 for:LOWCOD-987 【online】js增强的问题--数据对象带有id，且和现有数据一致时，替换患有数据\n          if (!added) {\n            rows.push(row)\n            this.inputValues.push(value)\n          }\n        })\n        // 启用了拖动排序，就重新计算排序编号\n        if (this.dragSort) {\n          this.inputValues.forEach((item, index) => {\n            item[this.dragSortKey] = (index + 1)\n          })\n        }\n        this.disabledRowIds = disabledRowIds\n        this.checkboxValues = checkboxValues\n        this.selectValues = selectValues\n        this.jdateValues = jdateValues\n        this.jInputPopValues = jInputPopValues\n        this.slotValues = slotValues\n        this.uploadValues = uploadValues\n        this.popupValues = popupValues\n        this.radioValues = radioValues\n        this.multiSelectValues = multiSelectValues\n        this.searchSelectValues = searchSelectValues\n        // 重新计算所有统计列\n        this.recalcAllStatisticsColumns()\n        // 更新到 dom\n        if (update) {\n          this.rows = rows\n\n          // 更新form表单的值\n          this.$nextTick(() => {\n            this.forceUpdateFormValues()\n          })\n        }\n        return rows\n      },\n\n      /** 获取某一数字输入框列中的最大的值 */\n      getInputNumberMaxValue(column) {\n        let maxNum = 0\n        this.inputValues.forEach((item, index) => {\n          let val = item[column.key], num\n          try {\n            num = parseInt(val)\n          } catch {\n            num = 0\n          }\n          // 把首次循环的结果当成最大值\n          if (index === 0) {\n            maxNum = num\n          } else {\n            maxNum = (num > maxNum) ? num : maxNum\n          }\n        })\n        return maxNum\n      },\n      /** 添加一行 */\n      add(num = 1, forceScrollToBottom = false) {\n        if (num < 1) return\n        // let timestamp = new Date().getTime()\n        let rows = this.rows\n        let row\n        for (let i = 0; i < num; i++) {\n          rows = this.push({}, false, rows)\n          row = rows[rows.length - 1]\n        }\n        this.rows = rows\n\n        this.$nextTick(() => {\n          this.updateFormValues()\n        })\n        // 触发add事件\n        this.$emit('added', {\n          row: (() => {\n            let r = Object.assign({}, row)\n            r.id = this.getCleanId(r.id)\n            return r\n          })(),\n          target: this\n        })\n        // 设置滚动条位置\n        let tbody = this.getElement('tbody')\n        let offsetHeight = tbody.offsetHeight\n        let realScrollTop = tbody.scrollTop + offsetHeight\n        if (forceScrollToBottom === false) {\n          // 只有滚动条在底部的时候才自动滚动\n          if (!((tbody.scrollHeight - realScrollTop) <= 10)) {\n            return\n          }\n        }\n        this.$nextTick(() => {\n          tbody.scrollTop = tbody.scrollHeight\n        })\n      },\n      /**\n       * 在指定位置添加一行\n       * @param insertIndex 添加位置下标\n       * @param num 添加的行数，默认1\n       */\n      insert(insertIndex, num = 1) {\n        if (this.checkTooFastClick('insert', 1500)) {\n          return\n        }\n        if (!insertIndex && num < 1) return\n        let rows = this.rows\n        let newRows = []\n        for (let i = 0; i < num; i++) {\n          let row = { id: this.generateId(rows) }\n          rows = this.push(row, false, rows, insertIndex)\n          newRows.push(row)\n        }\n        // 同步更改\n        this.rows = rows\n        this.$nextTick(() => {\n          this.recalcSortNumber()\n          this.forceUpdateFormValues()\n        })\n        // 触发 insert 事件\n        this.$emit('inserted', {\n          rows: newRows.map(row => {\n            let r = cloneObject(row)\n            r.id = this.getCleanId(r.id)\n            return r\n          }),\n          num, insertIndex,\n          target: this\n        })\n      },\n      /** 删除被选中的行 */\n      removeSelectedRows() {\n        this.removeRows(this.selectedRowIds)\n        this.selectedRowIds = []\n      },\n      /** 删除一行或多行 */\n      removeRows(id) {\n        let ids = id\n        if (!(id instanceof Array)) {\n          if (typeof id === 'string') {\n            ids = [id]\n          } else {\n            throw  `JEditableTable.removeRows() 函数需要的参数可以是string或Array类型，但提供的却是${typeof id}`\n          }\n        }\n\n        let rows = cloneObject(this.rows)\n        ids.forEach(removeId => {\n          removeId = this.getCleanId(removeId)\n          // 找到每个id对应的真实index并删除\n          const findAndDelete = (arr) => {\n            for (let i = 0; i < arr.length; i++) {\n              let currentId = this.getCleanId(arr[i].id)\n              if (currentId === removeId) {\n                arr.splice(i, 1)\n                return true\n              }\n            }\n          }\n          // 找到rows对应的index，并删除\n          if (findAndDelete(rows)) {\n            // 找到values对应的index，并删除\n            findAndDelete(this.inputValues)\n            // 将caseId去除\n            let id = this.getCleanId(removeId)\n            this.deleteIds.push(id)\n          }\n        })\n        this.rows = rows\n        this.$emit('deleted', this.getDeleteIds(), this)\n        this.$nextTick(() => {\n          // 更新formValues\n          this.updateFormValues()\n          // 重新计算统计\n          this.recalcAllStatisticsColumns()\n        })\n        return true\n      },\n\n      /** 获取表格表单里的值（异步版） */\n      getValuesAsync(options = {}, callback) {\n        let { validate, rowIds, deleteTempId } = options\n        if (typeof validate !== 'boolean') validate = true\n        if (!(rowIds instanceof Array)) rowIds = null\n        // 是否删除临时ID，默认为 false\n        if (typeof deleteTempId !== 'boolean') deleteTempId = false\n        // console.log('options:', { validate, rowIds })\n\n        let asyncCount = 0\n        let error = 0\n        let inputValues = cloneObject(this.inputValues)\n        let tooltips = Object.assign({}, this.tooltips)\n        let notPassedIds = cloneObject(this.notPassedIds)\n        // 用于存储合并后的值\n        let values = []\n        // 遍历inputValues来获取每行的值\n        for (let value of inputValues) {\n          let rowIdsFlag = false\n          // 如果带有rowIds，那么就只存这几行的数据\n          if (rowIds == null) {\n            rowIdsFlag = true\n          } else {\n            for (let rowId of rowIds) {\n              if (this.getCleanId(rowId) === this.getCleanId(value.id)) {\n                rowIdsFlag = true\n                break\n              }\n            }\n          }\n\n          if (!rowIdsFlag) continue\n\n          this.columns.forEach(column => {\n            let inputId = column.key + value.id\n            if (column.type === FormTypes.checkbox) {\n              let checked = this.checkboxValues[inputId]\n              if (column.customValue instanceof Array) {\n                value[column.key] = checked ? column.customValue[0] : column.customValue[1]\n              } else {\n                value[column.key] = checked\n              }\n\n            } else if (column.type === FormTypes.select) {\n              let selected = this.selectValues[inputId]\n              if (selected instanceof Array) {\n                value[column.key] = cloneObject(selected)\n              } else {\n                value[column.key] = selected\n              }\n\n            } else if (column.type === FormTypes.date || column.type === FormTypes.datetime) {\n              value[column.key] = this.jdateValues[inputId]\n\n            } else if (column.type === FormTypes.input_pop) {\n              value[column.key] = this.jInputPopValues[inputId]\n\n            } else if (column.type === FormTypes.upload) {\n              value[column.key] = cloneObject(this.uploadValues[inputId] || null)\n\n            } else if (column.type === FormTypes.image || column.type === FormTypes.file) {\n              let currUploadObj = cloneObject(this.uploadValues[inputId] || null)\n              if (currUploadObj) {\n                value[column.key] = currUploadObj['path'] || null\n              }\n\n            } else if (column.type === FormTypes.popup) {\n              if (!value[column.key]) {\n                value[column.key] = this.popupValues[inputId] || null\n              }\n            } else if (column.type === FormTypes.radio) {\n              value[column.key] = this.radioValues[inputId]\n            } else if (column.type === FormTypes.sel_search) {\n              value[column.key] = this.searchSelectValues[inputId]\n            } else if (column.type === FormTypes.list_multi) {\n              if (!this.multiSelectValues[inputId] || this.multiSelectValues[inputId].length === 0) {\n                value[column.key] = ''\n              } else {\n                value[column.key] = this.multiSelectValues[inputId].join(',')\n              }\n            } else if (column.type === FormTypes.slot) {\n              value[column.key] = this.slotValues[inputId]\n            }\n\n\n            // 检查表单验证\n            if (validate === true) {\n              const handleValidateOneInput = (results) => {\n                tooltips[inputId] = results[0]\n                if (tooltips[inputId].passed === false) {\n                  error++\n                  // if (error++ === 0) {\n                  // let element = document.getElementById(inputId)\n                  // while (element.className !== 'tr') {\n                  //   element = element.parentElement\n                  // }\n                  // this.jumpToId(inputId, element)\n                  // }\n                }\n                tooltips[inputId].visible = false\n                notPassedIds = results[1]\n              }\n              asyncCount++\n              let results = this.validateOneInputAsync(value[column.key], value, column, notPassedIds, false, 'getValues', (results) => {\n                handleValidateOneInput(results)\n                asyncCount--\n              })\n              handleValidateOneInput(results)\n            }\n          })\n          // 删除 tempId\n          if (deleteTempId && this.isTempId(value.id)) {\n            delete value.id\n          } else {\n            value.id = this.getCleanId(value.id)\n          }\n\n          values.push(value)\n        }\n\n        if (validate === true) {\n          this.tooltips = tooltips\n          this.notPassedIds = notPassedIds\n        }\n\n        const timer = setInterval(() => {\n          if (asyncCount === 0) {\n            clearInterval(timer)\n            if (typeof callback === 'function') {\n              callback({ error, values })\n            }\n          }\n        }, 10)\n\n        return { error, values }\n      },\n\n      /** 获取表格表单里的值（同步版） */\n      getValuesSync(options = {}) {\n        return this.getValuesAsync(options)\n      },\n\n      /** 获取表格表单里的值 */\n      getValues(callback, validate = true, rowIds) {\n        this.getValuesAsync({ validate, rowIds }, ({ error, values }) => {\n          if (typeof callback === 'function') {\n            callback(error, values)\n          }\n        })\n      },\n      /** getValues的Promise版 */\n      getValuesPromise(validate = true, rowIds, deleteTempId) {\n        return new Promise((resolve, reject) => {\n          this.getValuesAsync({ validate, rowIds, deleteTempId }, ({ error, values }) => {\n            if (error === 0) {\n              resolve(values)\n            } else {\n              reject(VALIDATE_NO_PASSED)\n            }\n          })\n        })\n      },\n      /** 获取被删除项的id */\n      getDeleteIds() {\n        return cloneObject(this.deleteIds)\n      },\n      /** 获取所有的数据，包括values、deleteIds */\n      getAll(validate, deleteTempId) {\n        return new Promise((resolve, reject) => {\n          let deleteIds = this.getDeleteIds()\n          this.getValuesPromise(validate, null, deleteTempId).then((values) => {\n            resolve({ values, deleteIds })\n          }).catch(error => {\n            reject(error)\n          })\n        })\n      },\n      /** Sync 获取所有的数据，包括values、deleteIds */\n      getAllSync(validate, rowIds, deleteTempId) {\n        let result = this.getValuesSync({ validate, rowIds, deleteTempId })\n        result.deleteIds = this.getDeleteIds()\n        return result\n      },\n      // slot 获取值\n      _getValueForSlot(rowId) {\n        return this.getValuesSync({ rowIds: [rowId] }).values[0]\n      },\n      _getAllValuesForSlot() {\n        return cloneObject({\n          inputValues: this.inputValues,\n          selectValues: this.selectValues,\n          checkboxValues: this.checkboxValues,\n          jdateValues: this.jdateValues,\n          jInputPopValues: this.jInputPopValues,\n          slotValues: this.slotValues,\n          uploadValues: this.uploadValues,\n          popupValues: this.popupValues,\n          radioValues: this.radioValues,\n          multiSelectValues: this.multiSelectValues,\n          searchSelectValues: this.searchSelectValues,\n        })\n      },\n      /** 设置某行某列的值 */\n      setValues(values) {\n\n        values.forEach(item => {\n          let { rowKey, values: newValues } = item\n          rowKey = this.getCleanId(rowKey)\n          for (let newValueKey in newValues) {\n            if (newValues.hasOwnProperty(newValueKey)) {\n              let edited = false // 已被修改\n              for (let column of this.columns) {\n                if (column.key === newValueKey) {\n                  let newValue = newValues[newValueKey]\n                  this.inputValues.forEach(value => {\n                    // 在inputValues中找到了该字段\n                    if (rowKey === this.getCleanId(value.id)) {\n                      if (value.hasOwnProperty(newValueKey)) {\n                        edited = true\n                        value[newValueKey] = newValue\n                      }\n                    }\n                  })\n                  if (!edited) {\n                    let modelKey = `${newValueKey}${this.caseId}${rowKey}`\n                    if (column.type === FormTypes.select) {\n                      if (newValue !== 0 && !newValue) {\n                        edited = this.setOneValue(this.selectValues, modelKey, undefined)\n                      } else {\n                        edited = this.setOneValue(this.selectValues, modelKey, newValue)\n                      }\n                    } else if (column.type === FormTypes.checkbox) {\n                      // checkbox 特殊处理 CustomValue\n                      let key = this.valuesHasOwnProperty(this.checkboxValues, modelKey)\n                      // 找到对应的column\n                      let sourceValue\n                      // 判断是否设定了customValue（自定义值）\n                      if (column.customValue instanceof Array) {\n                        let customValue = (column.customValue[0] || '').toString()\n                        sourceValue = (newValue === customValue)\n                      } else {\n                        sourceValue = !!newValue\n                      }\n                      this.$set(this.checkboxValues, key, sourceValue)\n                      edited = true\n                    } else if (column.type === FormTypes.date || column.type === FormTypes.datetime) {\n                      edited = this.setOneValue(this.jdateValues, modelKey, newValue)\n                    } else if (column.type === FormTypes.input_pop) {\n                      edited = this.setOneValue(this.jInputPopValues, modelKey, newValue)\n                    } else if (column.type === FormTypes.slot) {\n                      edited = this.setOneValue(this.slotValues, modelKey, newValue)\n                    } else if (column.type === FormTypes.upload || column.type === FormTypes.image || column.type === FormTypes.file) {\n                      edited = this.setOneValue(this.uploadValues, modelKey, newValue)\n                    } else if (column.type === FormTypes.popup) {\n                      edited = this.setOneValue(this.popupValues, modelKey, newValue)\n                    } else if (column.type === FormTypes.radio) {\n                      edited = this.setOneValue(this.radioValues, modelKey, newValue)\n                    } else if (column.type === FormTypes.list_multi) {\n                      edited = this.setOneValue(this.multiSelectValues, modelKey, newValue, true)\n                    } else if (column.type === FormTypes.sel_search) {\n                      edited = this.setOneValue(this.searchSelectValues, modelKey, newValue)\n                    } else {\n                      edited = false\n                    }\n                  }\n                  if (edited) {\n                    this.elemValueChange(column.type, {[newValueKey]: newValue}, column, newValue)\n                  }\n                }\n              }\n              if (!edited) {\n                console.warn(`JEditableTable.setValues：没有找到\"${newValueKey}\"列`)\n              }\n            }\n          }\n        })\n        // 强制更新formValues\n        this.forceUpdateFormValues()\n      },\n      /**\n       * 设置单个组件的值\n       * @param valuesObject 组件存储值的对象\n       * @param modelKey 组件存储值的对象里的key\n       * @param value 新值\n       * @param isMultiple 是否多选，如果是就会对 value 进行一个 split(',') 的操作\n       */\n      setOneValue(valuesObject, modelKey, value, isMultiple = false) {\n        let key = this.valuesHasOwnProperty(valuesObject, modelKey)\n        if (key) {\n          // 处理多选数组\n          if (isMultiple && !Array.isArray(value)) {\n            value = (value || '').toString().trim()\n            value = value === '' ? [] : value.split(',')\n          }\n          this.$set(valuesObject, key, value)\n          return true\n        }\n        return false\n      },\n      valuesHasOwnProperty(values, ownProperty) {\n        let key = ownProperty\n        if (values.hasOwnProperty(key)) {\n          return key\n        }\n        if (values.hasOwnProperty(key + this.tempId)) {\n          return key + this.tempId\n        }\n        return null\n      },\n\n      /** 跳转到指定位置 */\n      // jumpToId(id, element) {\n      //   if (element == null) {\n      //     element = document.getElementById(id)\n      //   }\n      //   if (element != null) {\n      //     console.log(this.getElement('tbody').scrollTop, element.offsetTop)\n      //     this.getElement('tbody').scrollTop = element.offsetTop\n      //     console.log(this.getElement('tbody').scrollTop, element.offsetTop)\n      //   }\n      // },\n\n      /**\n       * 验证单个表单，异步版\n       *\n       * @param value 校验的值\n       * @param row 校验的行\n       * @param column 校验的列\n       * @param notPassedIds 没有通过校验的 id\n       * @param update 是否更新到vue中\n       * @param validType 校验触发的方式（input、blur等）\n       * @param callback\n       */\n      validateOneInputAsync(value, row, column, notPassedIds, update = false, validType = 'input', callback) {\n        let tooltips = Object.assign({}, this.tooltips)\n        // let notPassedIds = cloneObject(this.notPassedIds)\n        let inputId = column.key + row.id\n        tooltips[inputId] = tooltips[inputId] ? tooltips[inputId] : {}\n\n        let [passed, message] = this.validateValue(column, value)\n\n        const nextThen = res => {\n          let [passed, message] = res\n          // !(passed == null && tooltips[inputId].visible != null)\n          if (passed != null) {\n            tooltips[inputId].visible = !passed\n            tooltips[inputId].passed = passed\n            let index = notPassedIds.indexOf(inputId)\n            if (!passed) {\n              tooltips[inputId].title = this.replaceProps(column, message)\n              if (index === -1) notPassedIds.push(inputId)\n            } else {\n              if (index !== -1) notPassedIds.splice(index, 1)\n            }\n          }\n          // 是否更新到data\n          if (update) {\n            this.tooltips = tooltips\n            this.notPassedIds = notPassedIds\n          }\n\n          if (typeof callback === 'function') {\n            callback([tooltips[inputId], notPassedIds])\n          }\n\n        }\n\n        if (typeof passed === 'function') {\n          let executed = false\n          passed(validType, value, { id: this.getCleanId(row.id) }, { ...column }, (flag, msg) => {\n            if (executed) return\n            executed = true\n            if (typeof msg === 'string') {\n              message = msg\n            }\n            if (flag == null) {\n              nextThen([true, message])\n            } else {\n              nextThen([!!flag, message])\n            }\n          }, this)\n        } else {\n          nextThen([passed, message])\n        }\n\n        return [tooltips[inputId], notPassedIds]\n      },\n\n      /** 验证单个表单 */\n      validateOneInput(value, row, column, notPassedIds, update = false, validType = 'input') {\n        return this.validateOneInputAsync(value, row, column, notPassedIds, update, validType)\n      },\n      /** 通过规则验证值是否正确 */\n      validateValue(column, value) {\n        let rules = column.validateRules\n        let passed = true, message = ''\n        // 判断有没有验证规则或验证规则格式正不正确，若条件不符合则默认通过\n        if (rules instanceof Array) {\n          for (let rule of rules) {\n            // 当前值是否为空\n            let isNull = (value == null || value === '')\n            // 验证规则：非空\n            if (rule.required === true && isNull) {\n              passed = false\n            } else // 使用 else-if 是为了防止一个 rule 中出现两个规则\n            // 验证规则：唯一校验\n            if (rule.unique === true || rule.pattern === 'only') {\n              let { values } = this.getValuesSync({ validate: false })\n              let findCount = 0\n              for (let val of values) {\n                if (val[column.key] === value) {\n                  if (++findCount >= 2) {\n                    passed = false\n                    break\n                  }\n                }\n              }\n            } else\n            // 验证规则：正则表达式\n            if (!!rule.pattern && !isNull) {\n\n              // 兼容 online 的规则\n              let foo = [\n                { title: '6到16位数字', value: 'n6-16', pattern: /^\\d{6,18}$/ },\n                { title: '6到16位任意字符', value: '*6-16', pattern: /^.{6,16}$/ },\n                { title: '6到18位字母', value: 's6-18', pattern: /^[a-z|A-Z]{6,18}$/ },\n                { title: '网址', value: 'url', pattern: /^(?:([A-Za-z]+):)?(\\/{0,3})([0-9.\\-A-Za-z]+)(?::(\\d+))?(?:\\/([^?#]*))?(?:\\?([^#]*))?(?:#(.*))?$/ },\n                { title: '电子邮件', value: 'e', pattern: /^([\\w]+\\.*)([\\w]+)@[\\w]+\\.\\w{3}(\\.\\w{2}|)$/ },\n                { title: '手机号码', value: 'm', pattern: /^1[3456789]\\d{9}$/ },\n                { title: '邮政编码', value: 'p', pattern: /^[1-9]\\d{5}$/ },\n                { title: '字母', value: 's', pattern: /^[A-Z|a-z]+$/ },\n                { title: '数字', value: 'n', pattern: /^-?\\d+(\\.?\\d+|\\d?)$/ },\n                { title: '整数', value: 'z', pattern: /^-?\\d+$/ },\n                { title: '非空', value: '*', pattern: /^.+$/ },\n                { title: '金额', value: 'money', pattern: /^(([1-9][0-9]*)|([0]\\.\\d{0,2}|[1-9][0-9]*\\.\\d{0,2}))$/ },\n              ]\n              let flag = false\n              for (let item of foo) {\n                if (rule.pattern === item.value && item.pattern) {\n                  passed = new RegExp(item.pattern).test(value)\n                  flag = true\n                  break\n                }\n              }\n              if (!flag) passed = new RegExp(rule.pattern).test(value)\n            } else\n            // 校验规则：自定义函数校验\n            if (typeof rule.handler === 'function') {\n              return [rule.handler, rule.message]\n            }\n            // 如果没有通过验证，则跳出循环。如果通过了验证，则继续验证下一条规则\n            if (!passed) {\n              message = rule.message\n              break\n            }\n          }\n        }\n        return [passed, message]\n      },\n\n      /** 动态更新表单的值 */\n      updateFormValues() {\n        let trs = this.getElement('tbody').getElementsByClassName('tr')\n        let trEls = []\n        for (let tr of trs) {\n          trEls.push(tr)\n        }\n        // 获取新增的 tr\n        let newTrEls = trEls\n        if (this.visibleTrEls.length > 0) {\n          newTrEls = []\n          for (let tr of trEls) {\n            let isNewest = true\n            for (let vtr of this.visibleTrEls) {\n              if (vtr.id === tr.id) {\n                isNewest = false\n                break\n              }\n            }\n            if (isNewest) {\n              newTrEls.push(tr)\n            }\n          }\n        }\n        this.visibleTrEls = trEls\n        // 向新增的tr中赋值\n        newTrEls.forEach(tr => {\n          let { idx } = tr.dataset\n          let value = this.inputValues[idx]\n          for (let key in value) {\n            if (value.hasOwnProperty(key)) {\n              let elid = `${key}${value.id}`\n              let el = document.getElementById(elid)\n              if (el) {\n                el.value = value[key]\n              }\n            }\n          }\n        })\n      },\n      /** 强制更新FormValues */\n      forceUpdateFormValues() {\n        this.visibleTrEls = []\n        this.$forceUpdate()\n        this.$nextTick(() => this.updateFormValues())\n      },\n\n      // 重新计算所有统计列\n      recalcAllStatisticsColumns() {\n        if (this.hasStatisticsColumn) {\n          Object.keys(this.statisticsColumns).forEach(key => this.recalcOneStatisticsColumn(key))\n        }\n      },\n      // 重新计算单个统计列\n      recalcOneStatisticsColumn(key) {\n        if (this.hasStatisticsColumn) {\n          if (this.statisticsColumns.hasOwnProperty(key)) {\n            // 计算合计值\n            let count = 0\n            this.inputValues.forEach(item => {\n              let value = item[key]\n              if (value && count !== '-') {\n                try {\n                  count += Number.parseInt(value)\n                } catch (e) {\n                  count = '-'\n                }\n              }\n            })\n            this.statisticsColumns[key] = count\n          }\n        }\n      },\n\n      /** 获取某个统计字段的值 */\n      getStatisticsValue(key) {\n        if (this.hasStatisticsColumn) {\n          if (this.statisticsColumns.hasOwnProperty(key)) {\n            return this.statisticsColumns[key]\n          }\n        }\n        return null\n      },\n\n      /** 全选或取消全选 */\n      handleChangeCheckedAll() {\n        let selectedRowIds = []\n        if (!this.getSelectAll) {\n          this.rows.forEach(row => {\n            if ((this.disabledRowIds || []).indexOf(row.id) === -1) {\n              selectedRowIds.push(row.id)\n            }\n          })\n        }\n        this.selectedRowIds = selectedRowIds\n      },\n      /** 左侧行选择框change事件 */\n      handleChangeLeftCheckbox(event) {\n        let { id } = event.target\n\n        if ((this.disabledRowIds || []).indexOf(id) !== -1) {\n          return\n        }\n\n        let index = this.selectedRowIds.indexOf(id)\n        if (index !== -1) {\n          this.selectedRowIds.splice(index, 1)\n        } else {\n          this.selectedRowIds.push(id)\n        }\n\n      },\n      handleClickAdd() {\n        this.add()\n      },\n      handleConfirmDelete() {\n        this.removeSelectedRows()\n      },\n      handleClickClearSelection() {\n        this.clearSelection()\n      },\n      clearSelection() {\n        this.selectedRowIds = []\n      },\n      /** 用于搜索下拉框中的内容 */\n      handleSelectFilterOption(input, option, column) {\n        if (column.allowSearch === true || column.allowInput === true) {\n          return option.componentOptions.children[0].text.toLowerCase().indexOf(input.toLowerCase()) >= 0\n        }\n        return true\n      },\n      /** select 搜索时的事件，用于动态添加options */\n      handleSearchSelect(value, id, row, col) {\n        if (col.allowSearch !== true && col.allowInput === true) {\n          // 是否找到了对应的项，找不到则添加这一项\n          let flag = false\n          for (let option of col.options) {\n            if (option.value.toLocaleString() === value.toLocaleString()) {\n              flag = true\n              break\n            }\n          }\n          // !!value ：不添加空值\n          if (!flag && !!value) {\n            // searchAdd 是否是通过搜索添加的\n            col.options.push({ title: value, value: value, searchAdd: true })\n          }\n\n        }\n      },\n      // blur 失去焦点\n      handleBlurSearch(value, id, row, col) {\n        if (col.allowInput === true) {\n          // 删除无用的因搜索（用户输入）而创建的项\n          if (typeof value === 'string') {\n            let indexs = []\n            col.options.forEach((option, index) => {\n              if (option.value.toLocaleString() === value.toLocaleString()) {\n                delete option.searchAdd\n              } else if (option.searchAdd === true) {\n                indexs.push(index)\n              }\n            })\n            // 翻转删除数组中的项\n            for (let index of indexs.reverse()) {\n              col.options.splice(index, 1)\n            }\n          }\n\n        }\n        // 做单个表单验证\n        this.validateOneInput(value, row, col, this.notPassedIds, true, 'blur')\n      },\n\n      /** 触发已拖动事件 */\n      emitDragged(oldIndex, newIndex) {\n        this.$emit('dragged', { oldIndex, newIndex, target: this })\n      },\n\n      handleDragMoveStart(event) {\n        this.dragging = true\n        this.$refs.scrollView.style.overflow = 'hidden'\n      },\n\n      /** 拖动结束，交换inputValue中的值 */\n      handleDragMoveEnd(event) {\n        this.dragging = false\n        this.$refs.scrollView.style.overflow = 'auto'\n\n        let { oldIndex, newIndex, item: { dataset: { idx: dataIdx } } } = event\n\n        // 由于动态显示隐藏行导致index有误差，需要算出真实的index\n        let diff = Number.parseInt(dataIdx) - oldIndex\n        oldIndex += diff\n        newIndex += diff\n\n        this.rowResort(oldIndex, newIndex)\n        this.emitDragged(oldIndex, newIndex)\n      },\n\n      /** 行重新排序 */\n      rowResort(oldIndex, newIndex) {\n        const sort = (array) => {\n          // 存储旧数据，并删除旧项目\n          let temp = array[oldIndex]\n          array.splice(oldIndex, 1)\n          // 向新项目里添加旧数据\n          array.splice(newIndex, 0, temp)\n        }\n\n        sort(this.rows)\n        sort(this.inputValues)\n\n        this.recalcSortNumber()\n\n        this.forceUpdateFormValues()\n      },\n\n      /** 重新计算排序字段的数值 */\n      recalcSortNumber() {\n        if (this.dragSort) {\n          // 重置排序字段\n          this.inputValues.forEach((val, idx) => val[this.dragSortKey] = (idx + 1))\n        }\n      },\n\n      /** 当前行向上移一位 */\n      _handleRowMoveUp(rowIndex) {\n        if (rowIndex > 0) {\n          let newIndex = rowIndex - 1\n          this.rowResort(rowIndex, newIndex)\n          this.emitDragged(rowIndex, newIndex)\n        }\n      },\n\n      /** 当前行向下移一位 */\n      _handleRowMoveDown(rowIndex) {\n        if (rowIndex < (this.rows.length - 1)) {\n          let newIndex = rowIndex + 1\n          this.rowResort(rowIndex, newIndex)\n          this.emitDragged(rowIndex, newIndex)\n        }\n      },\n\n      /** 在当前行下面插入一行 */\n      _handleRowInsertDown(rowIndex) {\n        let insertIndex = (rowIndex + 1)\n        this.insert(insertIndex)\n      },\n\n      /* --- common function begin --- */\n\n      /** input事件 */\n      handleInputCommono(target, index, row, column) {\n        let oldValue = this.inputValues[index][column.key] || ''\n        let { value, dataset, selectionStart } = target\n        let type = FormTypes.input\n        let change = true\n        if (`${dataset.inputNumber}` === 'true') {\n          type = FormTypes.inputNumber\n          // 判断输入的值是否匹配数字正则表达式，不匹配就还原\n          if (!/^-?\\d+\\.?\\d*$/.test(value) && (value !== '' && value !== '-')) {\n            change = false\n            value = oldValue\n            target.value = value\n            if (typeof selectionStart === 'number') {\n              target.selectionStart = selectionStart - 1\n              target.selectionEnd = selectionStart - 1\n            }\n          }\n        }\n        // 存储输入的值\n        this.inputValues[index][column.key] = value\n        // 做单个表单验证\n        this.validateOneInput(value, row, column, this.notPassedIds, true, 'input')\n\n        if (type === FormTypes.inputNumber) {\n          this.recalcOneStatisticsColumn(column.key)\n        }\n\n        // 触发valueChange 事件\n        if (change) {\n          this.elemValueChange(type, row, column, value)\n        }\n      },\n      /** slot Change */\n      handleChangeSlotCommon(value, id, row, column) {\n        this.slotValues = this.bindValuesChange(value, id, 'slotValues')\n        // 做单个表单验证\n        this.validateOneInput(value, row, column, this.notPassedIds, true, 'change')\n        // 触发valueChange 事件\n        this.elemValueChange(FormTypes.slot, row, column, value)\n      },\n      handleBlurCommono(target, index, row, column) {\n        let { value, dataset } = target\n        if (dataset && `${dataset.inputNumber}` === 'true') {\n          // 判断输入的值是否匹配数字正则表达式，不匹配就置空\n          if (!/^-?\\d+\\.?\\d*$/.test(value)) {\n            value = ''\n          } else {\n            value = Number.parseFloat(value)\n          }\n          target.value = value\n        }\n        //update--begin--autor:lvdandan-----date:20201126------for：LOWCOD-1088 JEditableTable输入校验提示框位置偏移 #2005\n        setTimeout(()=>{\n          // 做单个表单验证\n          this.validateOneInput(value, row, column, this.notPassedIds, true, 'blur')\n        }, 100)\n        //update--end--autor:lvdandan-----date:20201126------for：LOWCOD-1088 JEditableTable输入校验提示框位置偏移 #2005\n      },\n      handleChangeCheckboxCommon(event, row, column) {\n        let { id, checked } = event.target\n        this.checkboxValues = this.bindValuesChange(checked, id, 'checkboxValues')\n\n        // 触发valueChange 事件\n        this.elemValueChange(FormTypes.checkbox, row, column, checked)\n      },\n      handleChangeSelectCommon(value, id, row, column) {\n        this.selectValues = this.bindValuesChange(value, id, 'selectValues')\n        // 做单个表单验证\n        this.validateOneInput(value, row, column, this.notPassedIds, true, 'change')\n\n        // 触发valueChange 事件\n        this.elemValueChange(FormTypes.select, row, column, value)\n      },\n      handleChangeJDateCommon(value, id, row, column, showTime) {\n        this.jdateValues = this.bindValuesChange(value, id, 'jdateValues')\n        this.validateOneInput(value, row, column, this.notPassedIds, true, 'change')\n\n        // 触发valueChange 事件\n        if (showTime) {\n          this.elemValueChange(FormTypes.datetime, row, column, value)\n        } else {\n          this.elemValueChange(FormTypes.date, row, column, value)\n        }\n      },\n      handleChangeJInputPopCommon(value, id, row, column){\n        this.jInputPopValues = this.bindValuesChange(value, id, 'jInputPopValues')\n        // 做单个表单验证\n        this.validateOneInput(value, row, column, this.notPassedIds, true, 'change')\n        // 触发valueChange 事件\n        this.elemValueChange(FormTypes.input_pop, row, column, value)\n      },\n      handleChangeUpload(info, id, row, column) {\n        let { file } = info\n        let value = {\n          name: file.name,\n          type: file.type,\n          size: file.size,\n          status: file.status,\n          percent: file.percent\n        }\n        if (column.responseName && file.response) {\n          value['responseName'] = file.response[column.responseName]\n        }\n        if (file.status === 'done') {\n          value['path'] = file.response[column.responseName]\n        } else if (file.status === 'error') {\n          value['message'] = file.response.message || '未知错误'\n        }\n        this.uploadValues = this.bindValuesChange(value, id, 'uploadValues')\n\n        // 触发valueChange 事件\n        this.elemValueChange(column.type, row, column, value)\n      },\n      handleMoreOperation(id,flag,column){\n        //update-begin-author:wangshuai date:20201021 for:LOWCOD-969 判断传过来的字段是否存在number，用于控制上传文件\n        if(column.number){\n          this.number = column.number;\n        }else{\n          this.number = 0;\n        }\n        //update-end-author:wangshuai date:20201021 for:LOWCOD-969 判断传过来的字段是否存在number，用于控制上传文件\n        if(column && column.fieldExtendJson){\n          let json = JSON.parse(column.fieldExtendJson);\n          this.number = json.uploadnum?json.uploadnum:0;\n        }\n        //console.log(\"this.uploadValues[id]\",this.uploadValues[id])\n        let path = ''\n        if(this.uploadValues && this.uploadValues[id]){\n          path = this.uploadValues[id].path\n        }\n        this.$refs.filePop.show(id,path,flag)\n      },\n      handleFileSuccess(obj){\n        if(obj.id){\n          this.uploadValues = this.bindValuesChange(obj, obj.id, 'uploadValues')\n        }\n      },\n      handleClickTableRow(event) {\n        let {target} = event\n        if (target.className === 'td' || target.className === 'tr') {\n          // 清空编辑状态\n          this.currentEditRows = {}\n        }\n      },\n      // 点击后编辑当前行\n      handleEditRow(row, col) {\n        if (this.alwaysEdit) {\n          return\n        }\n        // 将点击的组件置为可编辑并还原其他组件的编辑状态\n        this.currentEditRows = {\n          [row.id]: {\n            [col.key]: true\n          }\n        }\n        if (col.type === FormTypes.input || col.type === FormTypes.inputNumber) {\n          this.$nextTick(() => {\n            this.forceUpdateFormValues()\n            // 自动获取焦点\n            let el = document.getElementById(`${col.key}${row.id}`)\n            if (el) {\n              el.focus()\n            }\n          })\n        }\n      },\n      /** 记录用到数据绑定的组件的值 */\n      bindValuesChange(value, id, key) {\n        this.$set(this[key], id, value)\n        return this[key]\n      },\n\n      /** value 触发valueChange事件 */\n      elemValueChange(type, rowSource, columnSource, value) {\n        let column = Object.assign({}, columnSource)\n        // 将caseId去除\n        let row = Object.assign({}, rowSource)\n        row.id = this.getCleanId(row.id)\n        // 获取整行的数据\n        let { values } = this.getValuesSync({ validate: false, rowIds: [row.id] })\n        if (values.length > 0) {\n          Object.assign(row, values[0])\n        }\n        this.$emit('valueChange', { type, row, column, value, target: this })\n      },\n\n      /** 获取干净的ID（不包含任何杂质的ID） */\n      getCleanId(id) {\n        id = this.removeCaseId(id)\n        id = this.removeTempId(id)\n        return id\n      },\n\n      /** 判断某个ID是否包含了caseId */\n      hasCaseId(id) {\n        return id && id.startsWith(this.caseId)\n      },\n\n      /** 将caseId去除 */\n      removeCaseId(id) {\n        if (this.hasCaseId(id)) {\n          return id.substring(this.caseId.length, id.length)\n        }\n        return id\n      },\n\n      // 判断 id 是否是临时Id\n      isTempId(id) {\n        return (id || '').endsWith(this.tempId)\n      },\n\n      /** 将tempId去除 */\n      removeTempId(id) {\n        if (this.isTempId(id)) {\n          return id.substring(0, id.length - this.tempId.length)\n        }\n        return id;\n      },\n\n      handleClickDelFile(id) {\n        this.uploadValues[id] = null\n      },\n      handleClickDownloadFile(id) {\n        let { path } = this.uploadValues[id] || {}\n        if (path) {\n          let url = getFileAccessHttpUrl(path)\n          window.open(url)\n        }\n      },\n      handleClickDownFileByUrl(id){\n        let { url,path } = this.uploadValues[id] || {}\n        if (!url || url.length===0) {\n          if(path && path.length>0){\n            url = getFileAccessHttpUrl(path.split(',')[0])\n          }\n        }\n        if(url){\n          window.open(url)\n        }\n      },\n      handleClickShowImageError(id) {\n        let currUploadObj = this.uploadValues[id] || null\n        if (currUploadObj && currUploadObj['message']) {\n          this.$error({ title: '上传出错', content: '错误信息：' + currUploadObj['message'], maskClosable: true })\n        }\n      },\n\n      /** 加载数据字典并合并到 options */\n      _loadDictConcatToOptions(column) {\n        initDictOptions(column.dictCode).then((res) => {\n          if (res.success) {\n            let newOptions = (column.options || [])// .concat(res.result)\n            res.result.forEach(item => {\n              // 过滤重复数据\n              for (let option of newOptions) if (option.value === item.value) return\n              newOptions.push(item)\n            })\n            this.$set(column, 'options', newOptions)\n          } else {\n            console.group(`JEditableTable 查询字典(${column.dictCode})发生异常`)\n            console.log(res.message)\n            console.groupEnd()\n          }\n        })\n      },\n\n      /* --- common function end --- */\n\n      /* --- 以下是辅助方法，多用于动态构造页面中的数据 --- */\n\n      /** 辅助方法：打印日志 */\n      log() {\n        if (this.$attrs.logger) {\n          console.log.apply(null, arguments)\n        }\n      },\n\n      getVM() {\n        return this\n      },\n\n      /** 辅助方法：动态构造Tooltip的Props，防止出现不消失的情况 */\n      buildTooltipProps(row, col, id) {\n        let {notPassedIds, tooltips} = this\n        let props = {\n          title: (tooltips[id] || {}).title,\n          placement: 'top',\n          autoAdjustOverflow: true,\n          getPopupContainer: this.getParentContainer,\n          class: {\n            'j-check-failed': false\n          },\n        }\n        let isCheckFailed = notPassedIds.includes(id)\n        if (isCheckFailed) {\n          props.class['j-check-failed'] = true\n        } else {\n          props['visible'] = false\n        }\n        return props\n      },\n\n      /** 辅助方法：指定a-select 和 j-data 的父容器 */\n      getParentContainer(node) {\n        let element = (() => {\n          // nodeType 8\t: Comment\t: 注释\n          if (this.$el && this.$el.nodeType !== 8) {\n            return this.$el\n          }\n          let doc = document.getElementById(this.caseId + 'inputTable')\n          if (doc != null) {\n            return doc\n          }\n          return node.parentNode.parentNode.parentNode.parentNode.parentNode.parentNode\n        })()\n\n        // 递归判断是否带有 overflow: hidden；的父元素\n        const ifParent = (child) => {\n          let currentOverflow = null\n          if (child['currentStyle']) {\n            currentOverflow = child['currentStyle']['overflow']\n          } else if (window.getComputedStyle) {\n            currentOverflow = window.getComputedStyle(child)['overflow']\n          }\n          if (currentOverflow != null) {\n            if (currentOverflow === 'hidden') {\n              // 找到了带有 hidden 的标签，判断它的父级是否还有 hidden，直到遇到完全没有 hidden 或 body 的时候才停止递归\n              let temp = ifParent(child.parentNode)\n              return temp != null ? temp : child.parentNode\n            } else\n            // 当前标签没有 hidden ，如果有父级并且父级不是 body 的话就继续递归判断父级\n            if (child.parentNode && child.parentNode.tagName.toLocaleLowerCase() !== 'body') {\n              return ifParent(child.parentNode)\n            } else {\n              // 直到 body 都没有遇到有 hidden 的标签\n              return null\n            }\n          } else {\n            return child\n          }\n        }\n\n        let temp = ifParent(element)\n        return (temp != null) ? temp : element\n      },\n\n      /** 辅助方法：替换${...}变量 */\n      replaceProps(col, value) {\n        if (value && typeof value === 'string') {\n          value = value.replace(/\\${title}/g, col.title)\n          value = value.replace(/\\${key}/g, col.key)\n          value = value.replace(/\\${defaultValue}/g, col.defaultValue)\n        }\n        return value\n      },\n\n      /** view辅助方法：构建 tr style */\n      buildTrStyle(index) {\n        return {\n          'top': `${rowHeight * index}px`\n        }\n      },\n      /** view辅助方法：构建 td style */\n      buildTdStyle(col,isTitle) {\n        const isEmptyWidth = (column) => (column.type === FormTypes.hidden || column.width === '0px' || column.width === '0' || column.width === 0)\n\n        let style = {}\n        // 计算宽度\n        if (col.width) {\n          style['width'] = col.width\n        } else if (this.columns) {\n          style['width'] = `${(100 - 4 * 2) / (this.columns.filter(column => !isEmptyWidth(column))).length}%`\n        } else {\n          style['width'] = '120px'\n        }\n        //update-begin-author:lvdandan date:20201116 for:LOWCOD-984 默认风格功能测试附表样式问题 日期时间控件长度太大\n        //是否为标题，如果是时间控件设为200，时间控件的标题设为240 时间\n        if(col.type === FormTypes.datetime){\n          if(true === isTitle){\n            style['width'] = '240px'\n          }else{\n            style['width'] = '200px'\n          }\n        }\n        //update-end-author:lvdandan date:20201116 for:LOWCOD-984 默认风格功能测试附表样式问题 日期时间控件长度太大\n\n        // checkbox 居中显示\n        let isCheckbox = col.type === FormTypes.checkbox\n        if (isCheckbox) {\n          style['align-items'] = 'center'\n          style['text-align'] = 'center'\n          style['padding-left'] = '0'\n          style['padding-right'] = '0'\n        }\n        if (isEmptyWidth(col)) {\n          style['padding-left'] = '0'\n          style['padding-right'] = '0'\n        }\n        return style\n      },\n      /** view辅助方法：构造props */\n      buildProps(row, col) {\n        let props = {}\n        // 解析props\n        if (typeof col.props === 'object') {\n          for (let prop in col.props) {\n            if (col.props.hasOwnProperty(prop)) {\n              props[prop] = this.replaceProps(col, col.props[prop])\n            }\n          }\n        }\n        // 判断select是否允许输入\n        if (col.type === FormTypes.select && (col.allowInput === true || col.allowSearch === true)) {\n          props['showSearch'] = true\n        }\n\n        // 判断是否是禁用的列\n        props['disabled'] = (typeof col['disabled'] === 'boolean' ? col['disabled'] : props['disabled'])\n\n        // 判断是否为禁用的行\n        if (props['disabled'] !== true) {\n          props['disabled'] = ((this.disabledRowIds || []).indexOf(row.id) !== -1)\n        }\n\n        // 判断是否禁用全部组件\n        if (this.disabled === true) {\n          props['disabled'] = true\n        }\n\n        return props\n      },\n\n      /** 辅助方法：防止过快点击，如果点击过快的话就返回 true */\n      checkTooFastClick(key = 'default', ms = 300) {\n        let nowTime = Date.now()\n        let lastTime = this.lastPushTimeMap.get(key)\n        if (!lastTime) {\n          lastTime = nowTime\n          this.lastPushTimeMap.set(key, nowTime)\n          return false\n        }\n        let diffTime = nowTime - lastTime\n        if (diffTime <= ms) {\n          this.$message.warn('你点击的太快了，请慢点点击!')\n          return true\n        }\n        this.lastPushTimeMap.set(key, nowTime)\n        return false\n      },\n\n      /** upload 辅助方法：获取 headers */\n      uploadGetHeaders(row, column) {\n        let headers = {}\n        if (column.token === true) {\n          headers['X-Access-Token'] = this.accessToken\n        }\n        return headers\n      },\n      /** 上传请求地址 */\n      getUploadAction(value) {\n        if (!value) {\n          return window._CONFIG['domianURL'] + '/sys/common/upload'\n        } else {\n          return value\n        }\n      },\n      /** 预览图片地址 */\n      getCellImageView(id) {\n        let currUploadObj = this.uploadValues[id] || null\n        if (currUploadObj) {\n          if(currUploadObj['url']){\n            return currUploadObj['url'];\n          }else if(currUploadObj['path']){\n            let readpath = currUploadObj['path'].split(',')[0]\n            return getFileAccessHttpUrl(readpath)\n          }\n        }\n        return ''\n      },\n      /** popup回调 */\n      popupCallback(value, others, id, row, column, index) {\n        // 存储输入的值\n        let popupValue = value\n        if (others) {\n          let rowKey = this.getCleanId(row.id)\n          let setValueItem = {rowKey, values: {}}\n          Object.keys(others).forEach(key => {\n            // 当前列直接赋值，其他列通过setValues赋值\n            if (key === column.key) {\n              popupValue = others[key]\n            } else {\n              setValueItem.values[key] = others[key]\n            }\n          })\n          if (Object.keys(setValueItem).length > 0) {\n            this.setValues([setValueItem])\n          }\n        }\n        this.setOneValue(this.popupValues, id, popupValue)\n        // 做单个表单验证\n        this.validateOneInput(value, row, column, this.notPassedIds, true, 'change')\n        // 触发valueChange 事件\n        this.elemValueChange('input', row, column, value)\n      },\n      /** popup输入框回显 */\n      getPopupValue(id) {\n        return this.popupValues[id]\n      },\n      handleRadioChange(value, id, row, column) {\n        this.radioValues = this.bindValuesChange(value, id, 'radioValues')\n        // 做单个表单验证\n        this.validateOneInput(value, row, column, this.notPassedIds, true, 'change')\n        // 触发valueChange 事件\n        this.elemValueChange(FormTypes.radio, row, column, value)\n      },\n      handleMultiSelectChange(value, id, row, column) {\n        this.multiSelectValues = this.bindValuesChange(value, id, 'multiSelectValues')\n        // 做单个表单验证\n        this.validateOneInput(value, row, column, this.notPassedIds, true, 'change')\n        // 触发valueChange 事件\n        this.elemValueChange(FormTypes.list_multi, row, column, value)\n      },\n      handleSearchSelectChange(value, id, row, column) {\n        this.searchSelectValues = this.bindValuesChange(value, id, 'searchSelectValues')\n        this.validateOneInput(value, row, column, this.notPassedIds, true, 'change')\n        this.elemValueChange(FormTypes.sel_search, row, column, value)\n      },\n      filterOption(input, option) {\n        return option.componentOptions.children[0].text.toLowerCase().indexOf(input.toLowerCase()) >= 0\n      },\n      getEllipsisWord(content, len){\n        if(!content || content.length === 0){\n          return ''\n        }\n        if(content.length>len){\n          return content.substr(0,len)\n        }\n        return content;\n      },\n\n      /* --------------------------- 2020年5月18日 默认span模式 ------------------------------ */\n\n      /** 获取Select等组件翻译后的文本 */\n      getSelectTranslateText(value, row, col) {\n        // 翻译支持单选和多选（数组、逗号分割）\n        return filterDictText(col.options, value)\n      },\n\n      // 判定当前行是否是正在编辑的\n      isEditRow(row, col) {\n        if (this.alwaysEdit) {\n          return true\n        }\n        let current = this.currentEditRows[row.id]\n        return !!(current && current[col.key] === true)\n      },\n\n      /* ---- 事件监听 ---- */\n\n      // 鼠标弹起事件，用于清空输入状态\n      handleMouseup(event) {\n        if (this.alwaysEdit || Object.keys(this.currentEditRows).length === 0) {\n          return\n        }\n        // console.log(this.caseId + 'handleMouseup: ', event)\n        let {target} = event\n        if (!target){\n          return\n        }\n        let className = target.className || ''\n        if (typeof className === 'string') {\n          // 点击的标签是span\n          if (className.includes('j-td-span') && className.includes('no-edit')) {\n            return\n          }\n          // 点击的标签是下拉\n          if (className.includes('ant-select-dropdown-menu-item')) {\n            return\n          }\n        }\n\n        // 事件冒泡路径\n        let path = getEventPath(event)\n        for (let p of path) {\n          // 如果点击的是 tr 就不处理（tr单独处理）\n          if ((p.id || '').startsWith(`${this.caseId}tbody-tr`)) {\n            return\n          }\n          let pClassName = p.className || ''\n          pClassName = typeof pClassName === 'string' ? pClassName : pClassName.toString()\n\n          /* --- 特殊处理以下组件，点击以下标签时不清空编辑状态 --- */\n\n          // 点击的标签是JInputPop\n          if (pClassName.includes('j-input-pop')) {\n            return\n          }\n          // 点击的标签是JPopup的弹出层\n          if (pClassName.includes('j-popup-modal')) {\n            return\n          }\n          // 点击的标签是日期选择器的弹出层\n          if (pClassName.includes('j-date-picker') || pClassName.includes('ant-calendar-picker-container')) {\n            return\n          }\n\n        }\n        // 清空编辑状态\n        this.currentEditRows = {}\n      },\n\n      // 添加事件监听\n      addEventListener() {\n        window.addEventListener('mouseup', this.handleMouseup)\n      },\n      // 移除事件监听\n      removeEventListener() {\n        window.removeEventListener('mouseup', this.handleMouseup)\n      },\n\n      /* --------------------------- 2020年5月18日 默认span模式 ------------------------------ */\n\n\n    },\n    beforeDestroy() {\n      this.removeEventListener()\n      this.destroyCleanGroupRequest = true\n    },\n  }\n</script>\n\n<style lang=\"less\" scoped>\n\n  .action-button {\n    margin-bottom: 8px;\n\n    .gap {\n      padding-left: 8px;\n    }\n\n  }\n\n  /* 设定边框参数 */\n  @borderColor: #e8e8e8;\n  @border: 1px solid @borderColor;\n  /* tr & td 之间的间距 */\n  @spacing: 8px;\n\n  .input-table {\n    max-width: 100%;\n    overflow-x: hidden;\n    overflow-y: hidden;\n    position: relative;\n    border: @border;\n\n    .thead, .tbody {\n\n      .tr, .td {\n        display: flex;\n      }\n\n      .td {\n\n        /*border-right: 1px solid red;*/\n        /*color: white;*/\n        /*background-color: black;*/\n        /*margin-right: @spacing !important;*/\n\n        padding-left: @spacing;\n        flex-direction: column;\n\n        &.td-cb, &.td-num {\n          width: 45px;\n          min-width: 45px;\n          max-width: 50px;\n          margin-right: 0;\n          padding-left: 0;\n          padding-right: 0;\n          justify-content: center;\n          align-items: center;\n        }\n\n        &.td-ds {\n          width: 30px;\n          min-width: 30px;\n          max-width: 35px;\n          margin-right: 0;\n          padding-left: 0;\n          padding-right: 0;\n          justify-content: center;\n          align-items: center;\n\n          .td-ds-icons {\n            position: relative;\n            cursor: move;\n            width: 100%;\n            /*padding: 25% 0;*/\n            height: 100%;\n\n            .anticon-align-left,\n            .anticon-align-right {\n              position: absolute;\n              top: 30%;\n            }\n\n            .anticon-align-left {\n              left: 25%;\n            }\n\n            .anticon-align-right {\n              right: 25%;\n            }\n          }\n\n\n        }\n\n      }\n\n    }\n\n    .thead {\n      overflow-y: scroll;\n      overflow-x: hidden;\n      border-bottom: @border;\n\n      /** 隐藏thead的滑块   */\n\n      &::-webkit-scrollbar-thumb {\n        box-shadow: none !important;\n        background-color: transparent !important;\n      }\n\n      .tr {\n        min-width: 100%;\n        overflow-y: scroll;\n      }\n\n      .td {\n        /*flex: 1;*/\n        padding: 8px @spacing;\n        justify-content: center;\n      }\n\n    }\n\n    .tbody {\n      position: relative;\n      top: 0;\n      left: 0;\n      overflow-x: hidden;\n      overflow-y: hidden;\n      min-height: 61px;\n      /*max-height: 400px;*/\n      min-width: 100%;\n\n      .tr-nodata {\n        color: #999;\n        line-height: 61px;\n        text-align: center;\n      }\n\n      .tr {\n        /*line-height: 50px;*/\n\n        border-bottom: @border;\n        transition: background-color 300ms;\n        width: 100%;\n        position: absolute;\n        left: 0;\n        z-index: 10;\n\n        &.tr-checked {\n          background-color: #fafafa;\n        }\n\n        &:hover {\n          background-color: #E6F7FF;\n        }\n\n      }\n\n      .tr-expand {\n        position: relative;\n        z-index: 9;\n        background-color: white;\n      }\n\n      .td {\n        /*flex: 1;*/\n        padding: 14px @spacing 14px 0;\n        justify-content: center;\n\n        &:last-child {\n          padding-right: @spacing;\n        }\n\n        input {\n          font-variant: tabular-nums;\n          box-sizing: border-box;\n          margin: 0;\n          list-style: none;\n          position: relative;\n          display: inline-block;\n          padding: 4px 11px;\n          width: 100%;\n          height: 32px;\n          font-size: 14px;\n          line-height: 1.5;\n          color: rgba(0, 0, 0, 0.65);\n          background-color: #fff;\n          border: 1px solid #d9d9d9;\n          border-radius: 4px;\n          transition: all 0.3s;\n          outline: none;\n\n          &:hover {\n            border-color: #4D90FE\n          }\n\n          &:focus {\n            border-color: #40a9ff;\n            box-shadow: 0 0 0 2px rgba(24, 144, 255, 0.2);\n            border-right-width: 1px !important;\n          }\n\n          &:disabled {\n            color: rgba(0, 0, 0, 0.25);\n            background: #f5f5f5;\n            cursor: not-allowed;\n          }\n\n          /* 设置placeholder的颜色 */\n\n          &::-webkit-input-placeholder { /* WebKit browsers */\n            color: #ccc;\n          }\n\n          &:-moz-placeholder { /* Mozilla Firefox 4 to 18 */\n            color: #ccc;\n          }\n\n          &::-moz-placeholder { /* Mozilla Firefox 19+ */\n            color: #ccc;\n          }\n\n          &:-ms-input-placeholder { /* Internet Explorer 10+ */\n            color: #ccc;\n          }\n\n        }\n\n        .j-editable-image {\n          height: 32px;\n          max-width: 100px !important;\n          cursor: pointer;\n\n          &:hover {\n            opacity: 0.8;\n          }\n\n          &:active {\n            opacity: 0.6;\n          }\n\n        }\n\n        /* --------------------------- 2020年5月18日 begin 默认span模式 ------------------------------ */\n\n        label {\n          height: 32px;\n\n          &.ant-checkbox-wrapper {\n            height: auto;\n          }\n        }\n\n        .j-td-span {\n          position: relative;\n          padding: 4px 11px;\n          border: 1px solid transparent;\n          display: inline-block;\n          width: 100%;\n          max-width: 100%;\n          height: 32px;\n          cursor: text;\n          transition: all 0.3s;\n          box-sizing: border-box;\n          font-size: 14px;\n          line-height: 1.5;\n          color: rgba(0, 0, 0, 0.65);\n          border-radius: 4px;\n          overflow: hidden;\n          white-space: nowrap;\n          text-overflow: ellipsis;\n\n          &:hover {\n            background-color: white;\n          }\n\n          &.disabled {\n            cursor: not-allowed;\n\n            &:hover {\n              color: rgba(0, 0, 0, 0.25);\n              background-color: #F5F5F5;\n            }\n          }\n\n        }\n\n        /* --------------------------- 2020年5月18日 end 默认span模式 ------------------------------ */\n\n        /* --------------------------- 2020年5月28日 begin 新增校验未通过的样式 ------------------------------ */\n\n        .j-check-failed.j-td-span {\n          background-color: rgba(255, 0, 0, 0.05);\n\n          &:hover {\n            background-color: rgba(255, 0, 0, 0.1);\n          }\n        }\n\n        .j-check-failed.j-td-span,\n        input.j-check-failed,\n        .j-check-failed /deep/ input,\n        .ant-select.j-check-failed /deep/ .ant-select-selection,\n        .ant-upload.j-check-failed /deep/ .ant-btn {\n          border-color: red;\n          box-shadow: 0 0 0 2px rgba(255, 0, 0, 0.2);\n        }\n\n        /* --------------------------- 2020年5月28日 end 新增校验未通过的样式 ------------------------------ */\n\n      }\n\n    }\n\n    .scroll-view {\n      overflow: auto;\n      overflow-y: scroll;\n    }\n\n    .thead, .thead .tr, .scroll-view {\n      @scrollBarSize: 6px;\n      /* 定义滚动条高宽及背景 高宽分别对应横竖滚动条的尺寸*/\n\n      &::-webkit-scrollbar {\n        width: @scrollBarSize;\n        height: @scrollBarSize;\n        background-color: transparent;\n      }\n\n      /* 定义滚动条轨道 */\n\n      &::-webkit-scrollbar-track {\n        background-color: #f0f0f0;\n      }\n\n      /* 定义滑块 */\n\n      &::-webkit-scrollbar-thumb {\n        background-color: #eee;\n        box-shadow: inset 0 0 6px rgba(0, 0, 0, 0.3);\n\n        &:hover {\n          background-color: #bbb;\n        }\n\n        &:active {\n          background-color: #888;\n        }\n      }\n\n    }\n\n    .thead .tr {\n\n      &::-webkit-scrollbar-track {\n        background-color: transparent;\n      }\n\n      /* IE模式下隐藏 */\n      -ms-overflow-style: none;\n      -ms-scroll-chaining: chained;\n      -ms-content-zooming: zoom;\n      -ms-scroll-rails: none;\n      -ms-content-zoom-limit-min: 100%;\n      -ms-content-zoom-limit-max: 500%;\n      -ms-scroll-snap-type: proximity;\n      -ms-scroll-snap-points-x: snapList(100%, 200%, 300%, 400%, 500%);\n    }\n\n  }\n\n</style>\n"]}]}