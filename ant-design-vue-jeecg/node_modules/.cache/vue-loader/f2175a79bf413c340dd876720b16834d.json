{"remainingRequest":"D:\\activiti\\project01\\jeecg-boot-activiti-master\\ant-design-vue-jeecg\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\activiti\\project01\\jeecg-boot-activiti-master\\ant-design-vue-jeecg\\src\\components\\jeecg\\modal\\JPopupOnlReport.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\activiti\\project01\\jeecg-boot-activiti-master\\ant-design-vue-jeecg\\src\\components\\jeecg\\modal\\JPopupOnlReport.vue","mtime":1611914356000},{"path":"D:\\activiti\\project01\\jeecg-boot-activiti-master\\ant-design-vue-jeecg\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1621061384845},{"path":"D:\\activiti\\project01\\jeecg-boot-activiti-master\\ant-design-vue-jeecg\\node_modules\\babel-loader\\lib\\index.js","mtime":1621061377995},{"path":"D:\\activiti\\project01\\jeecg-boot-activiti-master\\ant-design-vue-jeecg\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1621061384845},{"path":"D:\\activiti\\project01\\jeecg-boot-activiti-master\\ant-design-vue-jeecg\\node_modules\\vue-loader\\lib\\index.js","mtime":1621061372054}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport { getAction } from '@/api/manage'\nimport {filterObj} from '@/utils/util'\nimport { filterMultiDictText } from '@/components/dict/JDictSelectUtil'\nimport { httpGroupRequest } from '@/api/GroupRequest.js'\n\nconst MODAL_WIDTH = 1200;\nexport default {\n  name: 'JPopupOnlReport',\n  props: ['multi', 'code', 'groupId', 'param'],\n  components:{\n  },\n  data(){\n    return {\n      visible:false,\n      title:\"\",\n      confirmLoading:false,\n      queryInfo:[],\n      toggleSearchStatus:false,\n      queryParam:{\n\n      },\n      dictOptions: {},\n      url: {\n        getColumns: '/online/cgreport/api/getRpColumns/',\n        getData: '/online/cgreport/api/getData/',\n        getQueryInfo: '/online/cgreport/api/getQueryInfo/'\n      },\n      table: {\n        loading: true,\n        // 表头\n        columns: [],\n        //数据集\n        dataSource: [],\n        // 选择器\n        selectedRowKeys: [],\n        selectionRows: [],\n        // 分页参数\n        pagination: {\n          current: 1,\n          pageSize: 10,\n          pageSizeOptions: ['10', '20', '30'],\n          showTotal: (total, range) => {\n            return range[0] + '-' + range[1] + ' 共' + total + '条'\n          },\n          showQuickJumper: true,\n          showSizeChanger: true,\n          total: 0\n        }\n      },\n      cgRpConfigId:\"\",\n      modalWidth:MODAL_WIDTH,\n      tableScroll:{x:MODAL_WIDTH-100},\n      dynamicParam:{}\n\n    }\n  },\n  mounted() {\n    //this.loadColumnsInfo()\n  },\n  watch: {\n    code() {\n      this.loadColumnsInfo()\n    },\n    param:{\n      deep:true,\n      handler(){\n        this.dynamicParamHandler()\n        this.loadData();\n      },\n    }\n  },\n  computed:{\n    showSearchFlag(){\n      return this.queryInfo && this.queryInfo.length>0\n    }\n  },\n  methods:{\n    loadColumnsInfo(){\n      let url = `${this.url.getColumns}${this.code}`\n      //缓存key\n      let groupIdKey\n      if (this.groupId) {\n        groupIdKey = this.groupId + url\n      }\n      httpGroupRequest(() => getAction(url), groupIdKey).then(res => {\n        if(res.success){\n          this.initDictOptionData(res.result.dictOptions);\n          this.cgRpConfigId = res.result.cgRpConfigId\n          this.title = res.result.cgRpConfigName\n          let currColumns = res.result.columns\n          for(let a=0;a<currColumns.length;a++){\n            if(currColumns[a].customRender){\n              let dictCode = currColumns[a].customRender;\n              currColumns[a].customRender=(text)=>{\n                return filterMultiDictText(this.dictOptions[dictCode], text+\"\");\n              }\n            }\n          }\n          this.table.columns = [...currColumns]\n          this.initQueryInfo()\n        }\n      })\n    },\n    initQueryInfo() {\n      let url = `${this.url.getQueryInfo}${this.cgRpConfigId}`\n      //缓存key\n      let groupIdKey\n      if (this.groupId) {\n        groupIdKey = this.groupId + url\n      }\n      httpGroupRequest(() => getAction(url), groupIdKey).then((res) => {\n        // console.log(\"获取查询条件\", res);\n        if (res.success) {\n          this.dynamicParamHandler(res.result)\n          this.queryInfo = res.result\n          //查询条件加载后再请求数据\n          this.loadData(1)\n        } else {\n          this.$message.warning(res.message)\n        }\n      })\n    },\n    //处理动态参数\n    dynamicParamHandler(arr){\n      if(arr && arr.length>0){\n        //第一次加载查询条件前 初始化queryParam为空对象\n        let queryTemp = {}\n        for(let item of arr){\n          if(item.mode==='single'){\n            queryTemp[item.field] = ''\n          }\n        }\n        this.queryParam = {...queryTemp}\n      }\n      let dynamicTemp = {}\n      if(this.param){\n        Object.keys(this.param).map(key=>{\n          let str = this.param[key]\n          if(key in this.queryParam){\n            if(str && str.startsWith(\"'\") && str.endsWith(\"'\")){\n              str = str.substring(1,str.length-1)\n            }\n            //如果查询条件包含参数 设置值\n            this.queryParam[key]=str\n          }\n          dynamicTemp[key] = this.param[key]\n        })\n      }\n      this.dynamicParam = {...dynamicTemp}\n    },\n    loadData(arg) {\n      if (arg == 1) {\n        this.table.pagination.current = 1\n      }\n      let params = this.getQueryParams();//查询条件\n      this.table.loading = true\n      let url = `${this.url.getData}${this.cgRpConfigId}`\n      //缓存key\n      let groupIdKey\n      if (this.groupId) {\n        groupIdKey = this.groupId + url + JSON.stringify(params)\n      }\n      httpGroupRequest(() => getAction(url, params), groupIdKey).then(res => {\n        this.table.loading = false\n        // console.log(\"daa\",res)\n        let data = res.result\n        if (data) {\n          this.table.pagination.total = Number(data.total)\n          this.table.dataSource = data.records\n        } else {\n          this.table.pagination.total = 0\n          this.table.dataSource = []\n        }\n      })\n    },\n    getQueryParams() {\n      let paramTarget = {}\n      if(this.dynamicParam){\n        //处理自定义参数\n       Object.keys(this.dynamicParam).map(key=>{\n         paramTarget['self_'+key] = this.dynamicParam[key]\n       })\n      }\n      let param = Object.assign(paramTarget, this.queryParam, this.sorter);\n      param.pageNo = this.table.pagination.current;\n      param.pageSize = this.table.pagination.pageSize;\n      return filterObj(param);\n    },\n    handleChangeInTableSelect(selectedRowKeys, selectionRows) {\n      //update-begin-author:taoyan date:2020902 for:【issue】开源online的几个问题 LOWCOD-844\n      if(!selectedRowKeys || selectedRowKeys.length==0){\n        this.table.selectionRows = []\n      }else if(selectedRowKeys.length == selectionRows.length){\n        this.table.selectionRows = selectionRows\n      }else{\n        //当两者长度不一的时候 需要判断\n        let keys = this.table.selectedRowKeys\n        let rows = this.table.selectionRows;\n        //这个循环 添加新的记录\n        for(let i=0;i<selectionRows.length;i++){\n          let combineKey = this.combineRowKey(selectionRows[i])\n          if(keys.indexOf(combineKey)<0){\n            //如果 原来的key 不包含当前记录 push\n            rows.push(selectionRows[i])\n          }\n        }\n        //这个循环 移除取消选中的数据\n        this.table.selectionRows = rows.filter(item=>{\n          let combineKey = this.combineRowKey(item)\n          return selectedRowKeys.indexOf(combineKey)>=0\n        })\n      }\n      //update-end-author:taoyan date:2020902 for:【issue】开源online的几个问题 LOWCOD-844\n      this.table.selectedRowKeys = selectedRowKeys\n    },\n    handleChangeInTable(pagination, filters, sorter) {\n      //分页、排序、筛选变化时触发\n      if (Object.keys(sorter).length > 0) {\n        this.sorter.column = sorter.field\n        this.sorter.order = 'ascend' == sorter.order ? 'asc' : 'desc'\n      }\n      this.table.pagination = pagination\n      this.loadData()\n    },\n    handleCancel() {\n      this.close()\n    },\n    handleSubmit() {\n      if(!this.multi){\n        if(this.table.selectionRows && this.table.selectionRows.length>1){\n          this.$message.warning(\"请选择一条记录\")\n          return false\n        }\n      }\n      if(!this.table.selectionRows || this.table.selectionRows.length==0){\n        this.$message.warning(\"请选择一条记录\")\n        return false\n      }\n      this.$emit('ok', this.table.selectionRows);\n      this.close()\n    },\n    close() {\n      this.$emit('close');\n      this.visible = false;\n      this.onClearSelected()\n    },\n    show(){\n      this.visible = true\n      this.loadColumnsInfo()\n    },\n    handleToggleSearch(){\n      this.toggleSearchStatus = !this.toggleSearchStatus;\n    },\n    searchByquery(){\n      this.loadData(1);\n    },\n    onlyReload(){\n      this.loadData();\n    },\n    searchReset(){\n      Object.keys(this.queryParam).forEach(key=>{\n        this.queryParam[key]=\"\"\n      })\n      this.loadData(1);\n    },\n    onClearSelected(){\n      this.table.selectedRowKeys = []\n      this.table.selectionRows = []\n    },\n    combineRowKey(record){\n      let res = ''\n       Object.keys(record).forEach(key=>{\n         res+=record[key]\n       })\n      if(res.length>50){\n        res = res.substring(0,50)\n      }\n      return res\n    },\n\n    clickThenCheck(record){\n      return {\n        on: {\n          click: () => {\n            let rowKey = this.combineRowKey(record)\n            if(!this.table.selectedRowKeys || this.table.selectedRowKeys.length==0){\n              let arr1=[],arr2=[]\n              arr1.push(record)\n              arr2.push(rowKey)\n              this.table.selectedRowKeys=arr2\n              this.table.selectionRows=arr1\n            }else{\n              if(this.table.selectedRowKeys.indexOf(rowKey)<0){\n                this.table.selectedRowKeys.push(rowKey)\n                this.table.selectionRows.push(record)\n              }else{\n                let rowKey_index = this.table.selectedRowKeys.indexOf(rowKey)\n                this.table.selectedRowKeys.splice(rowKey_index,1);\n                this.table.selectionRows.splice(rowKey_index,1);\n              }\n            }\n          }\n        }\n      }\n    },\n    //防止字典中有垃圾数据\n    initDictOptionData(dictOptions){\n      let obj = { }\n      Object.keys(dictOptions).map(k=>{\n        obj[k] = dictOptions[k].filter(item=>{\n          return item!=null\n        });\n      });\n      this.dictOptions  = obj\n    }\n\n  }\n}\n",{"version":3,"sources":["JPopupOnlReport.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAwfile":"JPopupOnlReport.vue","sourceRoot":"src/components/jeecg/modal","sourcesContent":["<template>\n  <j-modal\n    :title=\"title\"\n    :width=\"modalWidth\"\n    :visible=\"visible\"\n    :confirmLoading=\"confirmLoading\"\n    switchFullscreen\n    wrapClassName=\"j-popup-modal\"\n    @ok=\"handleSubmit\"\n    @cancel=\"handleCancel\"\n    cancelText=\"关闭\">\n\n    <div class=\"table-page-search-wrapper\">\n      <a-form layout=\"inline\" @keyup.enter.native=\"searchByquery\">\n        <a-row :gutter=\"24\" v-if=\"showSearchFlag\">\n          <template v-for=\"(item,index) in queryInfo\">\n            <template v-if=\" item.hidden==='1' \">\n              <a-col :md=\"8\" :sm=\"24\" :key=\" 'query'+index \" v-show=\"toggleSearchStatus\">\n                <online-query-form-item :queryParam=\"queryParam\" :item=\"item\" :dictOptions=\"dictOptions\"></online-query-form-item>\n              </a-col>\n            </template>\n            <template v-else>\n              <a-col :md=\"8\" :sm=\"24\" :key=\" 'query'+index \">\n                <online-query-form-item :queryParam=\"queryParam\" :item=\"item\" :dictOptions=\"dictOptions\"></online-query-form-item>\n              </a-col>\n            </template>\n          </template>\n\n          <a-col :md=\"8\" :sm=\"8\">\n            <span style=\"float: left;overflow: hidden;\" class=\"table-page-search-submitButtons\">\n              <a-button type=\"primary\" @click=\"searchByquery\" icon=\"search\">查询</a-button>\n              <a-button type=\"primary\" @click=\"searchReset\" icon=\"reload\" style=\"margin-left: 8px\">重置</a-button>\n              <a @click=\"handleToggleSearch\" style=\"margin-left: 8px\">\n                {{ toggleSearchStatus ? '收起' : '展开' }}\n                <a-icon :type=\"toggleSearchStatus ? 'up' : 'down'\"/>\n              </a>\n            </span>\n          </a-col>\n\n        </a-row>\n      </a-form>\n    </div>\n\n    <div class=\"ant-alert ant-alert-info\" style=\"margin-bottom: 16px;\">\n      <i class=\"anticon anticon-info-circle ant-alert-icon\"></i>\n      已选择&nbsp;<a style=\"font-weight: 600\">{{ table.selectedRowKeys.length }}</a>项&nbsp;&nbsp;\n      <a style=\"margin-left: 24px\" @click=\"onClearSelected\">清空</a>\n\n      <a v-if=\"!showSearchFlag\" style=\"margin-left: 24px\" @click=\"onlyReload\">刷新</a>\n    </div>\n\n    <a-table\n      ref=\"table\"\n      size=\"middle\"\n      bordered\n      :rowKey=\"combineRowKey\"\n      :columns=\"table.columns\"\n      :dataSource=\"table.dataSource\"\n      :pagination=\"table.pagination\"\n      :loading=\"table.loading\"\n      :rowSelection=\"{fixed:true,selectedRowKeys: table.selectedRowKeys, onChange: handleChangeInTableSelect}\"\n      @change=\"handleChangeInTable\"\n      style=\"min-height: 300px\"\n      :scroll=\"tableScroll\"\n      :customRow=\"clickThenCheck\">\n    </a-table>\n\n\n  </j-modal>\n</template>\n\n<script>\n  import { getAction } from '@/api/manage'\n  import {filterObj} from '@/utils/util'\n  import { filterMultiDictText } from '@/components/dict/JDictSelectUtil'\n  import { httpGroupRequest } from '@/api/GroupRequest.js'\n\n  const MODAL_WIDTH = 1200;\n  export default {\n    name: 'JPopupOnlReport',\n    props: ['multi', 'code', 'groupId', 'param'],\n    components:{\n    },\n    data(){\n      return {\n        visible:false,\n        title:\"\",\n        confirmLoading:false,\n        queryInfo:[],\n        toggleSearchStatus:false,\n        queryParam:{\n\n        },\n        dictOptions: {},\n        url: {\n          getColumns: '/online/cgreport/api/getRpColumns/',\n          getData: '/online/cgreport/api/getData/',\n          getQueryInfo: '/online/cgreport/api/getQueryInfo/'\n        },\n        table: {\n          loading: true,\n          // 表头\n          columns: [],\n          //数据集\n          dataSource: [],\n          // 选择器\n          selectedRowKeys: [],\n          selectionRows: [],\n          // 分页参数\n          pagination: {\n            current: 1,\n            pageSize: 10,\n            pageSizeOptions: ['10', '20', '30'],\n            showTotal: (total, range) => {\n              return range[0] + '-' + range[1] + ' 共' + total + '条'\n            },\n            showQuickJumper: true,\n            showSizeChanger: true,\n            total: 0\n          }\n        },\n        cgRpConfigId:\"\",\n        modalWidth:MODAL_WIDTH,\n        tableScroll:{x:MODAL_WIDTH-100},\n        dynamicParam:{}\n\n      }\n    },\n    mounted() {\n      //this.loadColumnsInfo()\n    },\n    watch: {\n      code() {\n        this.loadColumnsInfo()\n      },\n      param:{\n        deep:true,\n        handler(){\n          this.dynamicParamHandler()\n          this.loadData();\n        },\n      }\n    },\n    computed:{\n      showSearchFlag(){\n        return this.queryInfo && this.queryInfo.length>0\n      }\n    },\n    methods:{\n      loadColumnsInfo(){\n        let url = `${this.url.getColumns}${this.code}`\n        //缓存key\n        let groupIdKey\n        if (this.groupId) {\n          groupIdKey = this.groupId + url\n        }\n        httpGroupRequest(() => getAction(url), groupIdKey).then(res => {\n          if(res.success){\n            this.initDictOptionData(res.result.dictOptions);\n            this.cgRpConfigId = res.result.cgRpConfigId\n            this.title = res.result.cgRpConfigName\n            let currColumns = res.result.columns\n            for(let a=0;a<currColumns.length;a++){\n              if(currColumns[a].customRender){\n                let dictCode = currColumns[a].customRender;\n                currColumns[a].customRender=(text)=>{\n                  return filterMultiDictText(this.dictOptions[dictCode], text+\"\");\n                }\n              }\n            }\n            this.table.columns = [...currColumns]\n            this.initQueryInfo()\n          }\n        })\n      },\n      initQueryInfo() {\n        let url = `${this.url.getQueryInfo}${this.cgRpConfigId}`\n        //缓存key\n        let groupIdKey\n        if (this.groupId) {\n          groupIdKey = this.groupId + url\n        }\n        httpGroupRequest(() => getAction(url), groupIdKey).then((res) => {\n          // console.log(\"获取查询条件\", res);\n          if (res.success) {\n            this.dynamicParamHandler(res.result)\n            this.queryInfo = res.result\n            //查询条件加载后再请求数据\n            this.loadData(1)\n          } else {\n            this.$message.warning(res.message)\n          }\n        })\n      },\n      //处理动态参数\n      dynamicParamHandler(arr){\n        if(arr && arr.length>0){\n          //第一次加载查询条件前 初始化queryParam为空对象\n          let queryTemp = {}\n          for(let item of arr){\n            if(item.mode==='single'){\n              queryTemp[item.field] = ''\n            }\n          }\n          this.queryParam = {...queryTemp}\n        }\n        let dynamicTemp = {}\n        if(this.param){\n          Object.keys(this.param).map(key=>{\n            let str = this.param[key]\n            if(key in this.queryParam){\n              if(str && str.startsWith(\"'\") && str.endsWith(\"'\")){\n                str = str.substring(1,str.length-1)\n              }\n              //如果查询条件包含参数 设置值\n              this.queryParam[key]=str\n            }\n            dynamicTemp[key] = this.param[key]\n          })\n        }\n        this.dynamicParam = {...dynamicTemp}\n      },\n      loadData(arg) {\n        if (arg == 1) {\n          this.table.pagination.current = 1\n        }\n        let params = this.getQueryParams();//查询条件\n        this.table.loading = true\n        let url = `${this.url.getData}${this.cgRpConfigId}`\n        //缓存key\n        let groupIdKey\n        if (this.groupId) {\n          groupIdKey = this.groupId + url + JSON.stringify(params)\n        }\n        httpGroupRequest(() => getAction(url, params), groupIdKey).then(res => {\n          this.table.loading = false\n          // console.log(\"daa\",res)\n          let data = res.result\n          if (data) {\n            this.table.pagination.total = Number(data.total)\n            this.table.dataSource = data.records\n          } else {\n            this.table.pagination.total = 0\n            this.table.dataSource = []\n          }\n        })\n      },\n      getQueryParams() {\n        let paramTarget = {}\n        if(this.dynamicParam){\n          //处理自定义参数\n         Object.keys(this.dynamicParam).map(key=>{\n           paramTarget['self_'+key] = this.dynamicParam[key]\n         })\n        }\n        let param = Object.assign(paramTarget, this.queryParam, this.sorter);\n        param.pageNo = this.table.pagination.current;\n        param.pageSize = this.table.pagination.pageSize;\n        return filterObj(param);\n      },\n      handleChangeInTableSelect(selectedRowKeys, selectionRows) {\n        //update-begin-author:taoyan date:2020902 for:【issue】开源online的几个问题 LOWCOD-844\n        if(!selectedRowKeys || selectedRowKeys.length==0){\n          this.table.selectionRows = []\n        }else if(selectedRowKeys.length == selectionRows.length){\n          this.table.selectionRows = selectionRows\n        }else{\n          //当两者长度不一的时候 需要判断\n          let keys = this.table.selectedRowKeys\n          let rows = this.table.selectionRows;\n          //这个循环 添加新的记录\n          for(let i=0;i<selectionRows.length;i++){\n            let combineKey = this.combineRowKey(selectionRows[i])\n            if(keys.indexOf(combineKey)<0){\n              //如果 原来的key 不包含当前记录 push\n              rows.push(selectionRows[i])\n            }\n          }\n          //这个循环 移除取消选中的数据\n          this.table.selectionRows = rows.filter(item=>{\n            let combineKey = this.combineRowKey(item)\n            return selectedRowKeys.indexOf(combineKey)>=0\n          })\n        }\n        //update-end-author:taoyan date:2020902 for:【issue】开源online的几个问题 LOWCOD-844\n        this.table.selectedRowKeys = selectedRowKeys\n      },\n      handleChangeInTable(pagination, filters, sorter) {\n        //分页、排序、筛选变化时触发\n        if (Object.keys(sorter).length > 0) {\n          this.sorter.column = sorter.field\n          this.sorter.order = 'ascend' == sorter.order ? 'asc' : 'desc'\n        }\n        this.table.pagination = pagination\n        this.loadData()\n      },\n      handleCancel() {\n        this.close()\n      },\n      handleSubmit() {\n        if(!this.multi){\n          if(this.table.selectionRows && this.table.selectionRows.length>1){\n            this.$message.warning(\"请选择一条记录\")\n            return false\n          }\n        }\n        if(!this.table.selectionRows || this.table.selectionRows.length==0){\n          this.$message.warning(\"请选择一条记录\")\n          return false\n        }\n        this.$emit('ok', this.table.selectionRows);\n        this.close()\n      },\n      close() {\n        this.$emit('close');\n        this.visible = false;\n        this.onClearSelected()\n      },\n      show(){\n        this.visible = true\n        this.loadColumnsInfo()\n      },\n      handleToggleSearch(){\n        this.toggleSearchStatus = !this.toggleSearchStatus;\n      },\n      searchByquery(){\n        this.loadData(1);\n      },\n      onlyReload(){\n        this.loadData();\n      },\n      searchReset(){\n        Object.keys(this.queryParam).forEach(key=>{\n          this.queryParam[key]=\"\"\n        })\n        this.loadData(1);\n      },\n      onClearSelected(){\n        this.table.selectedRowKeys = []\n        this.table.selectionRows = []\n      },\n      combineRowKey(record){\n        let res = ''\n         Object.keys(record).forEach(key=>{\n           res+=record[key]\n         })\n        if(res.length>50){\n          res = res.substring(0,50)\n        }\n        return res\n      },\n\n      clickThenCheck(record){\n        return {\n          on: {\n            click: () => {\n              let rowKey = this.combineRowKey(record)\n              if(!this.table.selectedRowKeys || this.table.selectedRowKeys.length==0){\n                let arr1=[],arr2=[]\n                arr1.push(record)\n                arr2.push(rowKey)\n                this.table.selectedRowKeys=arr2\n                this.table.selectionRows=arr1\n              }else{\n                if(this.table.selectedRowKeys.indexOf(rowKey)<0){\n                  this.table.selectedRowKeys.push(rowKey)\n                  this.table.selectionRows.push(record)\n                }else{\n                  let rowKey_index = this.table.selectedRowKeys.indexOf(rowKey)\n                  this.table.selectedRowKeys.splice(rowKey_index,1);\n                  this.table.selectionRows.splice(rowKey_index,1);\n                }\n              }\n            }\n          }\n        }\n      },\n      //防止字典中有垃圾数据\n      initDictOptionData(dictOptions){\n        let obj = { }\n        Object.keys(dictOptions).map(k=>{\n          obj[k] = dictOptions[k].filter(item=>{\n            return item!=null\n          });\n        });\n        this.dictOptions  = obj\n      }\n\n    }\n  }\n</script>\n\n<style scoped>\n\n</style>"]}]}