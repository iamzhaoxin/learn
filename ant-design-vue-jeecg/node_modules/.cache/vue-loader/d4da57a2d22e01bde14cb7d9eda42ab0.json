{"remainingRequest":"D:\\activiti\\project01\\jeecg-boot-activiti-master\\ant-design-vue-jeecg\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\activiti\\project01\\jeecg-boot-activiti-master\\ant-design-vue-jeecg\\src\\views\\jeecg\\JVxeDemo\\layout-demo\\Template5.vue?vue&type=style&index=0&lang=less&","dependencies":[{"path":"D:\\activiti\\project01\\jeecg-boot-activiti-master\\ant-design-vue-jeecg\\src\\views\\jeecg\\JVxeDemo\\layout-demo\\Template5.vue","mtime":1611914356000},{"path":"D:\\activiti\\project01\\jeecg-boot-activiti-master\\ant-design-vue-jeecg\\node_modules\\css-loader\\index.js","mtime":1620887942039},{"path":"D:\\activiti\\project01\\jeecg-boot-activiti-master\\ant-design-vue-jeecg\\node_modules\\vue-loader\\lib\\loaders\\stylePostLoader.js","mtime":1621061372054},{"path":"D:\\activiti\\project01\\jeecg-boot-activiti-master\\ant-design-vue-jeecg\\node_modules\\postcss-loader\\src\\index.js","mtime":1617935823297},{"path":"D:\\activiti\\project01\\jeecg-boot-activiti-master\\ant-design-vue-jeecg\\node_modules\\less-loader\\dist\\cjs.js","mtime":1621061389135},{"path":"D:\\activiti\\project01\\jeecg-boot-activiti-master\\ant-design-vue-jeecg\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1621061384845},{"path":"D:\\activiti\\project01\\jeecg-boot-activiti-master\\ant-design-vue-jeecg\\node_modules\\vue-loader\\lib\\index.js","mtime":1621061372054}],"contextDependencies":[],"result":["\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n/** 隐藏文件小图标 */\n.template-5-tree.ant-tree {\n  li span.ant-tree-switcher.ant-tree-switcher-noop {\n    display: none;\n  }\n}\n",{"version":3,"sources":["Template5.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAyNA;AACA;AACA;AACA;AACA;AACA","file":"Template5.vue","sourceRoot":"src/views/jeecg/JVxeDemo/layout-demo","sourcesContent":["<template>\n  <a-card :bordered=\"false\">\n\n    <a-row :gutter=\"8\">\n      <a-col :span=\"6\">\n        <!-- 加上 show-line 属性后，展开收起图标自动变成 +- 样式 -->\n        <a-tree\n          class=\"template-5-tree\"\n          :tree-data=\"treeData\"\n          show-icon\n          show-line\n          :expandedKeys=\"treeExpandedKeys\"\n          :selectedKeys=\"[pagination.current]\"\n          @expand=\"handleTreeExpand\"\n          @select=\"handleTreeSelect\"\n        >\n          <!-- 自定义子节点图标 -->\n          <a-icon slot=\"myIcon\" type=\"unordered-list\" style=\"color:#0c8fcf;\"/>\n        </a-tree>\n      </a-col>\n      <a-col :span=\"18\">\n        <j-vxe-table\n          row-number\n          row-selection\n          :height=\"750\"\n          :loading=\"loading\"\n          :columns=\"columns\"\n          :dataSource=\"dataSource\"\n          :pagination=\"pagination\"\n          @pageChange=\"handleTablePageChange\"\n        />\n      </a-col>\n    </a-row>\n\n\n  </a-card>\n</template>\n\n<script>\n  import { getAction } from '@api/manage'\n  import { JVXETypes } from '@/components/jeecg/JVxeTable'\n\n  // 【多种布局模板】左侧为树，右侧为行编辑\n  export default {\n    name: 'Template5',\n    data() {\n      return {\n        // 是否正在加载\n        loading: false,\n        // 分页器参数\n        pagination: {\n          // 当前页码\n          current: 1,\n          // 每页的条数\n          pageSize: 50,\n          // 可切换的条数\n          pageSizeOptions: ['50'],\n          // 数据总数（目前并不知道真实的总数，所以先填写0，在后台查出来后再赋值）\n          total: 0,\n        },\n        // 选择的行\n        selectedRows: [],\n        // 数据源，控制表格的数据\n        dataSource: [],\n        // 列配置，控制表格显示的列\n        columns: [\n          {key: 'num', title: '序号', width: '80px'},\n          {\n            // 字段key，跟后台数据的字段名匹配\n            key: 'ship_name',\n            // 列的标题\n            title: '船名',\n            // 列的宽度\n            width: '180px',\n            // 如果加上了该属性，就代表当前单元格是可编辑的，type就是表单的类型，input就是简单的输入框\n            type: JVXETypes.input\n          },\n          {key: 'call', title: '呼叫', width: '80px', type: JVXETypes.input},\n          {key: 'len', title: '长', width: '80px', type: JVXETypes.input},\n          {key: 'ton', title: '吨', width: '120px', type: JVXETypes.input},\n          {key: 'payer', title: '付款方', width: '120px', type: JVXETypes.input},\n          {key: 'count', title: '数', width: '40px'},\n          {\n            key: 'company',\n            title: '公司',\n            // 最小宽度，与宽度不同的是，这个不是固定的宽度，如果表格有多余的空间，会平均分配给设置了 minWidth 的列\n            // 如果要做占满表格的列可以这么写\n            minWidth: '180px',\n            type: JVXETypes.input\n          },\n          {key: 'trend', title: '动向', width: '120px', type: JVXETypes.input},\n        ],\n        // 树的数据，这里模拟分页固定数据，实际情况应该是后台查出来的数据\n        treeData: [\n          // 第1级数据\n          {\n            title: '1-10页',\n            key: '1-10',\n            // 第2级数据\n            children: [\n              {title: '第 1 页', key: 1, slots: {icon: 'myIcon'}},\n              {title: '第 2 页', key: 2, slots: {icon: 'myIcon'}},\n              {\n                title: '第 3 页',\n                key: 3,\n                slots: {icon: 'myIcon'},\n                // 第3级数据\n                children: [\n                  {title: '第 333 页', key: 333, slots: {icon: 'myIcon'}},\n                  {title: '第 444 页', key: 444, slots: {icon: 'myIcon'}},\n                  {title: '第 555 页', key: 555, slots: {icon: 'myIcon'}},\n                  // 第4第5级以此类推，加上 children 属性即可\n                ],\n              },\n              {title: '第 4 页', key: 4, slots: {icon: 'myIcon'}},\n              {title: '第 5 页', key: 5, slots: {icon: 'myIcon'}},\n              {title: '第 6 页', key: 6, slots: {icon: 'myIcon'}},\n              {title: '第 7 页', key: 7, slots: {icon: 'myIcon'}},\n              {title: '第 8 页', key: 8, slots: {icon: 'myIcon'}},\n              {title: '第 9 页', key: 9, slots: {icon: 'myIcon'}},\n              {title: '第 10 页', key: 10, slots: {icon: 'myIcon'}},\n            ],\n            slots: {icon: 'myIcon'},\n          },\n          {\n            title: '11-20页',\n            key: '11-20',\n            children: [\n              {title: '第 11 页', key: 11, slots: {icon: 'myIcon'}},\n              {title: '第 12 页', key: 12, slots: {icon: 'myIcon'}},\n              {title: '第 13 页', key: 13, slots: {icon: 'myIcon'}},\n              {title: '第 14 页', key: 14, slots: {icon: 'myIcon'}},\n              {title: '第 15 页', key: 15, slots: {icon: 'myIcon'}},\n              {title: '第 16 页', key: 16, slots: {icon: 'myIcon'}},\n              {title: '第 17 页', key: 17, slots: {icon: 'myIcon'}},\n              {title: '第 18 页', key: 18, slots: {icon: 'myIcon'}},\n              {title: '第 19 页', key: 19, slots: {icon: 'myIcon'}},\n              {title: '第 20 页', key: 20, slots: {icon: 'myIcon'}},\n            ],\n            slots: {icon: 'myIcon'},\n          },\n        ],\n        // 树展开的列，默认 1-10\n        treeExpandedKeys: ['1-10'],\n        // 查询url地址\n        url: {\n          getData: '/mock/vxe/getData',\n        },\n      }\n    },\n    created() {\n      this.loadData()\n    },\n    methods: {\n\n      // 加载行编辑的数据\n      loadData() {\n        // 封装查询条件\n        let formData = {\n          pageNo: this.pagination.current,\n          pageSize: this.pagination.pageSize\n        }\n        // 调用查询数据接口\n        this.loading = true\n        getAction(this.url.getData, formData).then(res => {\n          if (res.success) {\n            // 后台查询回来的 total，数据总数量\n            this.pagination.total = res.result.total\n            // 将查询的数据赋值给 dataSource\n            this.dataSource = res.result.records\n            // 重置选择\n            this.selectedRows = []\n          } else {\n            this.$error({title: '主表查询失败', content: res.message})\n          }\n        }).finally(() => {\n          // 这里是无论成功或失败都会执行的方法，在这里关闭loading\n          this.loading = false\n        })\n      },\n\n      handleTablePageChange(event) {\n        // 重新赋值\n        this.pagination.current = event.current\n        this.pagination.pageSize = event.pageSize\n        // 查询数据\n        this.loadData()\n        // 判断树展开的key\n        if (event.current <= 10) {\n          this.treeExpandedKeys = ['1-10']\n        } else {\n          this.treeExpandedKeys = ['11-20']\n        }\n      },\n\n      // 树被选择触发的事件\n      handleTreeSelect(selectedKeys) {\n        let key = selectedKeys[0]\n        if (typeof key === 'string') {\n          // 控制树展开为当前选择的列\n          this.treeExpandedKeys = selectedKeys\n        } else {\n          this.pagination.current = key\n          this.loadData()\n        }\n      },\n\n      // 树被选择触发的事件\n      handleTreeExpand(expandedKeys) {\n        this.treeExpandedKeys = expandedKeys\n      },\n\n    },\n  }\n</script>\n\n<style lang=\"less\">\n  /** 隐藏文件小图标 */\n  .template-5-tree.ant-tree {\n    li span.ant-tree-switcher.ant-tree-switcher-noop {\n      display: none;\n    }\n  }\n</style>"]}]}