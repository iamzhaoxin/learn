{"remainingRequest":"D:\\activiti\\project01\\jeecg-boot-activiti-master\\ant-design-vue-jeecg\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\activiti\\project01\\jeecg-boot-activiti-master\\ant-design-vue-jeecg\\src\\components\\jeecg\\JMarkdownEditor\\index.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\activiti\\project01\\jeecg-boot-activiti-master\\ant-design-vue-jeecg\\src\\components\\jeecg\\JMarkdownEditor\\index.vue","mtime":1611914356000},{"path":"D:\\activiti\\project01\\jeecg-boot-activiti-master\\ant-design-vue-jeecg\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1621061384845},{"path":"D:\\activiti\\project01\\jeecg-boot-activiti-master\\ant-design-vue-jeecg\\node_modules\\babel-loader\\lib\\index.js","mtime":1621061377995},{"path":"D:\\activiti\\project01\\jeecg-boot-activiti-master\\ant-design-vue-jeecg\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1621061384845},{"path":"D:\\activiti\\project01\\jeecg-boot-activiti-master\\ant-design-vue-jeecg\\node_modules\\vue-loader\\lib\\index.js","mtime":1621061372054}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport 'codemirror/lib/codemirror.css'\nimport '@toast-ui/editor/dist/toastui-editor.css';\nimport '@toast-ui/editor/dist/i18n/zh-cn';\n\nimport Editor from '@toast-ui/editor';\nimport defaultOptions from './default-options'\nimport JUpload from '@/components/jeecg/JUpload'\nimport { getFileAccessHttpUrl } from '@/api/manage'\n\nexport default {\n  name: 'JMarkdownEditor',\n  components: {\n    JUpload,\n  },\n  props: {\n    value: {\n      type: String,\n      default: ''\n    },\n    id: {\n      type: String,\n      required: false,\n      default() {\n        return 'markdown-editor-' + +new Date() + ((Math.random() * 1000).toFixed(0) + '')\n      }\n    },\n    options: {\n      type: Object,\n      default() {\n        return defaultOptions\n      }\n    },\n    mode: {\n      type: String,\n      default: 'markdown'\n    },\n    height: {\n      type: String,\n      required: false,\n      default: '300px'\n    },\n    language: {\n      type: String,\n      required: false,\n      default: 'zh-CN'\n    }\n  },\n  data() {\n    return {\n      editor: null,\n      isShow:false,\n      activeIndex:\"1\",\n      dialogVisible:false,\n      index:\"1\",\n      fileList:[],\n      remark:\"\",\n      imageName:\"\",\n      imageUrl:\"\",\n      networkPic:\"\"\n    }\n  },\n  computed: {\n    editorOptions() {\n      const options = Object.assign({}, defaultOptions, this.options)\n      options.initialEditType = this.mode\n      options.height = this.height\n      options.language = this.language\n      return options\n    }\n  },\n  watch: {\n    value(newValue, preValue) {\n      if (newValue !== preValue && newValue !== this.editor.getMarkdown()) {\n        this.editor.setMarkdown(newValue)\n      }\n    },\n    language(val) {\n      this.destroyEditor()\n      this.initEditor()\n    },\n    height(newValue) {\n      this.editor.height(newValue)\n    },\n    mode(newValue) {\n      this.editor.changeMode(newValue)\n    }\n  },\n  mounted() {\n    this.initEditor()\n  },\n  destroyed() {\n    this.destroyEditor()\n  },\n  methods: {\n    initEditor() {\n      this.editor = new Editor({\n        el: document.getElementById(this.id),\n        ...this.editorOptions\n      })\n      if (this.value) {\n        this.editor.setMarkdown(this.value)\n      }\n      this.editor.on('change', () => {\n        this.$emit('change', this.editor.getMarkdown())\n      })\n      //--begin 添加自定义上传按钮\n      /*\n       * 添加自定义按钮\n       */\n      //获取编辑器上的功能条\n      let toolbar = this.editor.getUI().getToolbar();\n      let fileDom = this.$refs.files;\n      //添加图片点击事件\n      this.editor.eventManager.addEventType('isShowClickEvent');\n      this.editor.eventManager.listen('isShowClickEvent', () => {\n        this.isShow = true\n        this.dialogVisible = true\n      });\n      //addImageBlobHook图片上传、剪切、拖拽都会走此方法\n      // 删除默认监听事件\n      this.editor.eventManager.removeEventHandler('addImageBlobHook')\n      // 添加自定义监听事件\n      this.editor.eventManager.listen('addImageBlobHook', (blob, callback) => {\n        this.upload(blob, url => {\n          callback(url)\n        })\n      })\n      // 添加自定义按钮 第二个参数代表位置，不传默认放在最后\n      toolbar.insertItem(15,{\n        type: 'button',\n        options:{\n          name: 'customize',\n          className: 'tui-image tui-toolbar-icons',\n          event: 'isShowClickEvent',\n          tooltip: '上传图片',\n        }\n        //\n      });\n      //--end 添加自定义上传按钮\n    },\n    destroyEditor() {\n      if (!this.editor) return\n      this.editor.off('change')\n      this.editor.remove()\n    },\n    setMarkdown(value) {\n      this.editor.setMarkdown(value)\n    },\n    getMarkdown() {\n      return this.editor.getMarkdown()\n    },\n    setHtml(value) {\n      this.editor.setHtml(value)\n    },\n    getHtml() {\n      return this.editor.getHtml()\n    },\n    handleOk(){\n      if(this.index=='1'){\n        this.imageUrl = getFileAccessHttpUrl(this.fileList)\n        if(this.remark){\n          this.addImgToMd(this.imageUrl,this.remark)\n        }else{\n          this.addImgToMd(this.imageUrl,\"\")\n        }\n      }else{\n        if(this.remark){\n          this.addImgToMd(this.networkPic,this.remark)\n        }else{\n          this.addImgToMd(this.networkPic,\"\")\n        }\n      }\n      this.index=\"1\"\n      this.fileList=[]\n      this.imageName=\"\";\n      this.imageUrl=\"\";\n      this.remark=\"\"\n      this.networkPic=\"\"\n      this.dialogVisible=false\n      this.isShow=false;\n    },\n    handleClose(done) {\n      done();\n    },\n    handleChange(val){\n      this.fileList=[]\n      this.remark=\"\"\n      this.imageName=\"\"\n      this.imageUrl=\"\"\n      this.networkPic=\"\"\n      this.index=val\n    },\n    //添加图片到markdown\n    addImgToMd(data,name) {\n      let editor = this.editor.getCodeMirror();\n      let editorHtml = this.editor.getCurrentModeEditor();\n      let isMarkdownMode = this.editor.isMarkdownMode();\n      if (isMarkdownMode) {\n        editor.replaceSelection(`![${name}](${data})`);\n      } else {\n        let range = editorHtml.getRange();\n        let img = document.createElement('img');\n        img.src = `${data}`;\n        img.alt = name;\n        range.insertNode(img);\n      }\n    },\n  },\n  model: {\n    prop: 'value',\n    event: 'change'\n  }\n}\n",{"version":3,"sources":["index.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;AA4BA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"index.vue","sourceRoot":"src/components/jeecg/JMarkdownEditor","sourcesContent":["<template>\n  <div>\n    <div class=\"j-markdown-editor\" :id=\"id\"/>\n    <div v-if=\"isShow\">\n      <j-modal\n        title=\"图片上传\"\n        :visible.sync=\"dialogVisible\"\n        width=\"30%\"\n        :before-close=\"handleClose\"\n        @ok=\"handleOk\">\n        <a-tabs default-active-key=\"1\" @change=\"handleChange\">\n          <a-tab-pane tab=\"本地图片上传\" key=\"1\" :forceRender=\"true\">\n            <j-upload v-model=\"fileList\" :number=\"1\"></j-upload>\n            <div style=\"margin-top: 20px\">\n              <a-input v-model=\"remark\" placeholder=\"请填写备注\"></a-input>\n            </div>\n          </a-tab-pane>\n          <a-tab-pane tab=\"网络图片地址\" key=\"2\" :forceRender=\"true\">\n            <a-input v-model=\"networkPic\" placeholder=\"请填写网络图片地址\"></a-input>\n            <a-input style=\"margin-top: 20px\" v-model=\"remark\" placeholder=\"请填写备注\"></a-input>\n          </a-tab-pane>\n        </a-tabs>\n      </j-modal>\n    </div>\n  </div>\n</template>\n\n<script>\nimport 'codemirror/lib/codemirror.css'\nimport '@toast-ui/editor/dist/toastui-editor.css';\nimport '@toast-ui/editor/dist/i18n/zh-cn';\n\nimport Editor from '@toast-ui/editor';\nimport defaultOptions from './default-options'\nimport JUpload from '@/components/jeecg/JUpload'\nimport { getFileAccessHttpUrl } from '@/api/manage'\n\nexport default {\n  name: 'JMarkdownEditor',\n  components: {\n    JUpload,\n  },\n  props: {\n    value: {\n      type: String,\n      default: ''\n    },\n    id: {\n      type: String,\n      required: false,\n      default() {\n        return 'markdown-editor-' + +new Date() + ((Math.random() * 1000).toFixed(0) + '')\n      }\n    },\n    options: {\n      type: Object,\n      default() {\n        return defaultOptions\n      }\n    },\n    mode: {\n      type: String,\n      default: 'markdown'\n    },\n    height: {\n      type: String,\n      required: false,\n      default: '300px'\n    },\n    language: {\n      type: String,\n      required: false,\n      default: 'zh-CN'\n    }\n  },\n  data() {\n    return {\n      editor: null,\n      isShow:false,\n      activeIndex:\"1\",\n      dialogVisible:false,\n      index:\"1\",\n      fileList:[],\n      remark:\"\",\n      imageName:\"\",\n      imageUrl:\"\",\n      networkPic:\"\"\n    }\n  },\n  computed: {\n    editorOptions() {\n      const options = Object.assign({}, defaultOptions, this.options)\n      options.initialEditType = this.mode\n      options.height = this.height\n      options.language = this.language\n      return options\n    }\n  },\n  watch: {\n    value(newValue, preValue) {\n      if (newValue !== preValue && newValue !== this.editor.getMarkdown()) {\n        this.editor.setMarkdown(newValue)\n      }\n    },\n    language(val) {\n      this.destroyEditor()\n      this.initEditor()\n    },\n    height(newValue) {\n      this.editor.height(newValue)\n    },\n    mode(newValue) {\n      this.editor.changeMode(newValue)\n    }\n  },\n  mounted() {\n    this.initEditor()\n  },\n  destroyed() {\n    this.destroyEditor()\n  },\n  methods: {\n    initEditor() {\n      this.editor = new Editor({\n        el: document.getElementById(this.id),\n        ...this.editorOptions\n      })\n      if (this.value) {\n        this.editor.setMarkdown(this.value)\n      }\n      this.editor.on('change', () => {\n        this.$emit('change', this.editor.getMarkdown())\n      })\n      //--begin 添加自定义上传按钮\n      /*\n       * 添加自定义按钮\n       */\n      //获取编辑器上的功能条\n      let toolbar = this.editor.getUI().getToolbar();\n      let fileDom = this.$refs.files;\n      //添加图片点击事件\n      this.editor.eventManager.addEventType('isShowClickEvent');\n      this.editor.eventManager.listen('isShowClickEvent', () => {\n        this.isShow = true\n        this.dialogVisible = true\n      });\n      //addImageBlobHook图片上传、剪切、拖拽都会走此方法\n      // 删除默认监听事件\n      this.editor.eventManager.removeEventHandler('addImageBlobHook')\n      // 添加自定义监听事件\n      this.editor.eventManager.listen('addImageBlobHook', (blob, callback) => {\n        this.upload(blob, url => {\n          callback(url)\n        })\n      })\n      // 添加自定义按钮 第二个参数代表位置，不传默认放在最后\n      toolbar.insertItem(15,{\n        type: 'button',\n        options:{\n          name: 'customize',\n          className: 'tui-image tui-toolbar-icons',\n          event: 'isShowClickEvent',\n          tooltip: '上传图片',\n        }\n        //\n      });\n      //--end 添加自定义上传按钮\n    },\n    destroyEditor() {\n      if (!this.editor) return\n      this.editor.off('change')\n      this.editor.remove()\n    },\n    setMarkdown(value) {\n      this.editor.setMarkdown(value)\n    },\n    getMarkdown() {\n      return this.editor.getMarkdown()\n    },\n    setHtml(value) {\n      this.editor.setHtml(value)\n    },\n    getHtml() {\n      return this.editor.getHtml()\n    },\n    handleOk(){\n      if(this.index=='1'){\n        this.imageUrl = getFileAccessHttpUrl(this.fileList)\n        if(this.remark){\n          this.addImgToMd(this.imageUrl,this.remark)\n        }else{\n          this.addImgToMd(this.imageUrl,\"\")\n        }\n      }else{\n        if(this.remark){\n          this.addImgToMd(this.networkPic,this.remark)\n        }else{\n          this.addImgToMd(this.networkPic,\"\")\n        }\n      }\n      this.index=\"1\"\n      this.fileList=[]\n      this.imageName=\"\";\n      this.imageUrl=\"\";\n      this.remark=\"\"\n      this.networkPic=\"\"\n      this.dialogVisible=false\n      this.isShow=false;\n    },\n    handleClose(done) {\n      done();\n    },\n    handleChange(val){\n      this.fileList=[]\n      this.remark=\"\"\n      this.imageName=\"\"\n      this.imageUrl=\"\"\n      this.networkPic=\"\"\n      this.index=val\n    },\n    //添加图片到markdown\n    addImgToMd(data,name) {\n      let editor = this.editor.getCodeMirror();\n      let editorHtml = this.editor.getCurrentModeEditor();\n      let isMarkdownMode = this.editor.isMarkdownMode();\n      if (isMarkdownMode) {\n        editor.replaceSelection(`![${name}](${data})`);\n      } else {\n        let range = editorHtml.getRange();\n        let img = document.createElement('img');\n        img.src = `${data}`;\n        img.alt = name;\n        range.insertNode(img);\n      }\n    },\n  },\n  model: {\n    prop: 'value',\n    event: 'change'\n  }\n}\n</script>\n<style scoped lang=\"less\">\n\n  .j-markdown-editor {\n    /deep/ .tui-editor-defaultUI {\n      .te-mode-switch,\n      .tui-scrollsync\n      {\n        line-height: 1.5;\n      }\n    }\n  }\n\n</style>"]}]}