{"remainingRequest":"D:\\activiti\\project01\\jeecg-boot-activiti-master\\ant-design-vue-jeecg\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\activiti\\project01\\jeecg-boot-activiti-master\\ant-design-vue-jeecg\\src\\extends\\BEcharts\\BEcharts.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\activiti\\project01\\jeecg-boot-activiti-master\\ant-design-vue-jeecg\\src\\extends\\BEcharts\\BEcharts.vue","mtime":1611914356000},{"path":"D:\\activiti\\project01\\jeecg-boot-activiti-master\\ant-design-vue-jeecg\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1621061384845},{"path":"D:\\activiti\\project01\\jeecg-boot-activiti-master\\ant-design-vue-jeecg\\node_modules\\babel-loader\\lib\\index.js","mtime":1621061377995},{"path":"D:\\activiti\\project01\\jeecg-boot-activiti-master\\ant-design-vue-jeecg\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1621061384845},{"path":"D:\\activiti\\project01\\jeecg-boot-activiti-master\\ant-design-vue-jeecg\\node_modules\\vue-loader\\lib\\index.js","mtime":1621061372054}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n\nimport * as echart from 'echarts';\nimport ResizeListener from 'element-resize-detector';\n  export default {\n    props: {\n      option: {\n        type: Object,\n        default: {}\n      },\n      /* 主题 default light dark*/\n      theme: {\n        type: String,\n        default: 'light'\n      }\n    },\n    data() {\n      return {\n        chart: null\n      };\n    },\n    watch:{\n      option(){\n        this.updateChartView();\n      }\n    },\n    mounted() {\n      const _this = this;\n      this.chart = echart.init(this.$el, this.theme);\n      this.updateChartView();\n      this.chart.on('click',(params)=>{\n        _this.$emit('click',params);\n      })\n      window.addEventListener('resize', this.handleWindowResize);\n      this.addChartResizeListener();\n    },\n    beforeDestroy() {\n      window.removeEventListener('resize', this.handleWindowResize);\n    },\n    methods: {\n      /**\n       * 更新echart视图\n       */\n      updateChartView() {\n        if (!this.chart) return;\n        let option = this.option;\n        this.chart.setOption(option, true);\n      },\n      /**\n       * 对chart元素尺寸进行监听，当发生变化时同步更新echart视图\n       */\n      addChartResizeListener() {\n        const instance = ResizeListener({\n          strategy: 'scroll',\n          callOnAdd: true\n        });\n\n        instance.listenTo(this.$el, () => {\n          if (!this.chart) return;\n          this.chart.resize();\n        });\n      },\n      /**\n       * 当窗口缩放时，echart动态调整自身大小\n       */\n      handleWindowResize() {\n        if (!this.chart) return;\n        this.chart.resize();\n      }\n    }\n  };\n",{"version":3,"sources":["BEcharts.vue"],"names":[],"mappings":";;;;;;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"BEcharts.vue","sourceRoot":"src/extends/BEcharts","sourcesContent":["<template>\n    <div class=\"b-echarts\">\n    </div>\n</template>\n\n<script>\n  import * as echart from 'echarts';\n  import ResizeListener from 'element-resize-detector';\n    export default {\n      props: {\n        option: {\n          type: Object,\n          default: {}\n        },\n        /* 主题 default light dark*/\n        theme: {\n          type: String,\n          default: 'light'\n        }\n      },\n      data() {\n        return {\n          chart: null\n        };\n      },\n      watch:{\n        option(){\n          this.updateChartView();\n        }\n      },\n      mounted() {\n        const _this = this;\n        this.chart = echart.init(this.$el, this.theme);\n        this.updateChartView();\n        this.chart.on('click',(params)=>{\n          _this.$emit('click',params);\n        })\n        window.addEventListener('resize', this.handleWindowResize);\n        this.addChartResizeListener();\n      },\n      beforeDestroy() {\n        window.removeEventListener('resize', this.handleWindowResize);\n      },\n      methods: {\n        /**\n         * 更新echart视图\n         */\n        updateChartView() {\n          if (!this.chart) return;\n          let option = this.option;\n          this.chart.setOption(option, true);\n        },\n        /**\n         * 对chart元素尺寸进行监听，当发生变化时同步更新echart视图\n         */\n        addChartResizeListener() {\n          const instance = ResizeListener({\n            strategy: 'scroll',\n            callOnAdd: true\n          });\n\n          instance.listenTo(this.$el, () => {\n            if (!this.chart) return;\n            this.chart.resize();\n          });\n        },\n        /**\n         * 当窗口缩放时，echart动态调整自身大小\n         */\n        handleWindowResize() {\n          if (!this.chart) return;\n          this.chart.resize();\n        }\n      }\n    };\n</script>\n<style scoped lang=\"less\">\n  .b-echarts{\n    width: 100%;\n    height: 100%;\n  }\n</style>"]}]}