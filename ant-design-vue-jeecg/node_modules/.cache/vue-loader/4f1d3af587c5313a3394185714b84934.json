{"remainingRequest":"D:\\activiti\\project01\\jeecg-boot-activiti-master\\ant-design-vue-jeecg\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\activiti\\project01\\jeecg-boot-activiti-master\\ant-design-vue-jeecg\\src\\views\\user\\alteration\\Step1.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\activiti\\project01\\jeecg-boot-activiti-master\\ant-design-vue-jeecg\\src\\views\\user\\alteration\\Step1.vue","mtime":1611914356000},{"path":"D:\\activiti\\project01\\jeecg-boot-activiti-master\\ant-design-vue-jeecg\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1621061384845},{"path":"D:\\activiti\\project01\\jeecg-boot-activiti-master\\ant-design-vue-jeecg\\node_modules\\babel-loader\\lib\\index.js","mtime":1621061377995},{"path":"D:\\activiti\\project01\\jeecg-boot-activiti-master\\ant-design-vue-jeecg\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1621061384845},{"path":"D:\\activiti\\project01\\jeecg-boot-activiti-master\\ant-design-vue-jeecg\\node_modules\\vue-loader\\lib\\index.js","mtime":1621061372054}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport { getAction,postAction } from '@/api/manage'\nimport { checkOnlyUser } from '@/api/api'\n\nexport default {\n  name: \"Step1\",\n  data() {\n    return {\n      form: this.$form.createForm(this),\n      inputCodeContent: \"\",\n      inputCodeNull: true,\n      verifiedCode: \"\",\n      validatorRules: {\n        username: {rules: [{required: false}, {validator: this.validateInputUsername}]},\n        inputCode: {rules: [{required: true, message: '请输入验证码!'}]},\n      },\n      randCodeImage:'',\n      requestCodeSuccess:true,\n      currdatetime:''\n\n    }\n  },\n  created(){\n    this.handleChangeCheckCode();\n  },\n  methods: {\n    handleChangeCheckCode(){\n      this.currdatetime = new Date().getTime();\n      getAction(`/sys/randomImage/${this.currdatetime}`).then(res=>{\n        if(res.success){\n          this.randCodeImage = res.result\n          this.requestCodeSuccess=true\n        }else{\n          this.$message.error(res.message)\n          this.requestCodeSuccess=false\n        }\n      }).catch(()=>{\n        this.requestCodeSuccess=false\n      })\n    },\n    nextStep() {\n      let that = this\n      this.form.validateFields((err, values) => {\n        if (!err) {\n          let isPhone = false;\n          var params = {}\n          var reg = /^[1-9]\\d*$|^0$/;\n          var username = values.username;\n          if (reg.test(username) == true) {\n            params.phone = username;\n            isPhone = true\n          } else {\n            params.username = username;\n          }\n          that.validateInputCode().then(()=>{\n            getAction(\"/sys/user/querySysUser\", params).then((res) => {\n              if (res.success) {\n                var userList = {\n                  username: res.result.username,\n                  phone: res.result.phone,\n                  isPhone: isPhone\n                };\n                setTimeout(function () {\n                  that.$emit('nextStep', userList)\n                })\n              }\n            });\n          })\n        }\n      })\n\n    },\n    validateInputCode() {\n      return new Promise((resolve,reject)=>{\n        postAction(\"/sys/checkCaptcha\",{\n          captcha:this.inputCodeContent,\n          checkKey:this.currdatetime\n        }).then(res=>{\n          if(res.success){\n            resolve();\n          }else{\n            this.$message.error(res.message)\n            reject();\n          }\n        });\n      })\n    },\n    inputCodeChange(e) {\n      this.inputCodeContent = e.target.value;\n      console.log(this.inputCodeContent)\n      if (!e.target.value || 0 == e.target.value) {\n        this.inputCodeNull = true\n      } else {\n        this.inputCodeContent = this.inputCodeContent.toLowerCase()\n        this.inputCodeNull = false\n      }\n    },\n    generateCode(value) {\n      this.verifiedCode = value.toLowerCase();\n      console.log(this.verifiedCode);\n    },\n    validateInputUsername(rule, value, callback) {\n      console.log(value);\n      var reg = /^[0-9]+.?[0-9]*/;\n      if (!value) {\n        callback(\"请输入用户名和手机号！\");\n      }\n\n      //判断用户输入账号还是手机号码\n      if (reg.test(value)) {\n        var params = {\n          phone: value,\n        };\n        checkOnlyUser(params).then((res) => {\n          if (res.success) {\n            callback(\"用户名不存在!\")\n          } else {\n            callback()\n          }\n        })\n      } else {\n        var params = {\n          username: value,\n        };\n        checkOnlyUser(params).then((res) => {\n          if (res.success) {\n            callback(\"用户名不存在!\")\n          } else {\n            callback()\n          }\n        })\n      }\n    },\n\n  }\n}\n",{"version":3,"sources":["Step1.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA2CA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA","file":"Step1.vue","sourceRoot":"src/views/user/alteration","sourcesContent":["<template>\n  <div class=\"main\">\n\n    <a-form style=\"max-width: 500px; margin: 40px auto 0;\" :form=\"form\" @keyup.enter.native=\"nextStep\">\n      <a-form-item>\n        <a-input\n          v-decorator=\"['username',validatorRules.username]\"\n          size=\"large\"\n          type=\"text\"\n          autocomplete=\"false\"\n          placeholder=\"请输入用户账号或手机号\">\n          <a-icon slot=\"prefix\" type=\"lock\" :style=\"{ color: 'rgba(0,0,0,.25)' }\"/>\n        </a-input>\n      </a-form-item>\n      <a-row :gutter=\"0\">\n        <a-col :span=\"14\">\n          <a-form-item>\n            <a-input\n              v-decorator=\"['inputCode',validatorRules.inputCode]\"\n              size=\"large\"\n              type=\"text\"\n              @change=\"inputCodeChange\"\n              placeholder=\"请输入验证码\">\n              <a-icon slot=\"prefix\" v-if=\" inputCodeContent==verifiedCode \" type=\"smile\"\n                      :style=\"{ color: 'rgba(0,0,0,.25)' }\"/>\n              <a-icon slot=\"prefix\" v-else type=\"frown\" :style=\"{ color: 'rgba(0,0,0,.25)' }\"/>\n            </a-input>\n          </a-form-item>\n        </a-col>\n        <a-col :span=\"10\" style=\"text-align: right\">\n          <img v-if=\"requestCodeSuccess\" style=\"margin-top: 2px;\" :src=\"randCodeImage\" @click=\"handleChangeCheckCode\"/>\n          <img v-else style=\"margin-top: 2px;\" src=\"../../../assets/checkcode.png\" @click=\"handleChangeCheckCode\"/>\n        </a-col>\n      </a-row>\n      <a-form-item :wrapperCol=\"{span: 19, offset: 5}\">\n        <router-link style=\"float: left;line-height: 40px;\" :to=\"{ name: 'login' }\">使用已有账户登录</router-link>\n        <a-button type=\"primary\" @click=\"nextStep\">下一步</a-button>\n      </a-form-item>\n    </a-form>\n  </div>\n</template>\n\n<script>\n  import { getAction,postAction } from '@/api/manage'\n  import { checkOnlyUser } from '@/api/api'\n\n  export default {\n    name: \"Step1\",\n    data() {\n      return {\n        form: this.$form.createForm(this),\n        inputCodeContent: \"\",\n        inputCodeNull: true,\n        verifiedCode: \"\",\n        validatorRules: {\n          username: {rules: [{required: false}, {validator: this.validateInputUsername}]},\n          inputCode: {rules: [{required: true, message: '请输入验证码!'}]},\n        },\n        randCodeImage:'',\n        requestCodeSuccess:true,\n        currdatetime:''\n\n      }\n    },\n    created(){\n      this.handleChangeCheckCode();\n    },\n    methods: {\n      handleChangeCheckCode(){\n        this.currdatetime = new Date().getTime();\n        getAction(`/sys/randomImage/${this.currdatetime}`).then(res=>{\n          if(res.success){\n            this.randCodeImage = res.result\n            this.requestCodeSuccess=true\n          }else{\n            this.$message.error(res.message)\n            this.requestCodeSuccess=false\n          }\n        }).catch(()=>{\n          this.requestCodeSuccess=false\n        })\n      },\n      nextStep() {\n        let that = this\n        this.form.validateFields((err, values) => {\n          if (!err) {\n            let isPhone = false;\n            var params = {}\n            var reg = /^[1-9]\\d*$|^0$/;\n            var username = values.username;\n            if (reg.test(username) == true) {\n              params.phone = username;\n              isPhone = true\n            } else {\n              params.username = username;\n            }\n            that.validateInputCode().then(()=>{\n              getAction(\"/sys/user/querySysUser\", params).then((res) => {\n                if (res.success) {\n                  var userList = {\n                    username: res.result.username,\n                    phone: res.result.phone,\n                    isPhone: isPhone\n                  };\n                  setTimeout(function () {\n                    that.$emit('nextStep', userList)\n                  })\n                }\n              });\n            })\n          }\n        })\n\n      },\n      validateInputCode() {\n        return new Promise((resolve,reject)=>{\n          postAction(\"/sys/checkCaptcha\",{\n            captcha:this.inputCodeContent,\n            checkKey:this.currdatetime\n          }).then(res=>{\n            if(res.success){\n              resolve();\n            }else{\n              this.$message.error(res.message)\n              reject();\n            }\n          });\n        })\n      },\n      inputCodeChange(e) {\n        this.inputCodeContent = e.target.value;\n        console.log(this.inputCodeContent)\n        if (!e.target.value || 0 == e.target.value) {\n          this.inputCodeNull = true\n        } else {\n          this.inputCodeContent = this.inputCodeContent.toLowerCase()\n          this.inputCodeNull = false\n        }\n      },\n      generateCode(value) {\n        this.verifiedCode = value.toLowerCase();\n        console.log(this.verifiedCode);\n      },\n      validateInputUsername(rule, value, callback) {\n        console.log(value);\n        var reg = /^[0-9]+.?[0-9]*/;\n        if (!value) {\n          callback(\"请输入用户名和手机号！\");\n        }\n\n        //判断用户输入账号还是手机号码\n        if (reg.test(value)) {\n          var params = {\n            phone: value,\n          };\n          checkOnlyUser(params).then((res) => {\n            if (res.success) {\n              callback(\"用户名不存在!\")\n            } else {\n              callback()\n            }\n          })\n        } else {\n          var params = {\n            username: value,\n          };\n          checkOnlyUser(params).then((res) => {\n            if (res.success) {\n              callback(\"用户名不存在!\")\n            } else {\n              callback()\n            }\n          })\n        }\n      },\n\n    }\n  }\n</script>\n\n<style scoped>\n\n</style>"]}]}