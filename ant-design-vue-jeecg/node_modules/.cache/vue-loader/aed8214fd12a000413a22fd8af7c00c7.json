{"remainingRequest":"D:\\activiti\\project01\\jeecg-boot-activiti-master\\ant-design-vue-jeecg\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\activiti\\project01\\jeecg-boot-activiti-master\\ant-design-vue-jeecg\\src\\views\\system\\modules\\SysPositionModal.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\activiti\\project01\\jeecg-boot-activiti-master\\ant-design-vue-jeecg\\src\\views\\system\\modules\\SysPositionModal.vue","mtime":1611914356000},{"path":"D:\\activiti\\project01\\jeecg-boot-activiti-master\\ant-design-vue-jeecg\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1621061384845},{"path":"D:\\activiti\\project01\\jeecg-boot-activiti-master\\ant-design-vue-jeecg\\node_modules\\babel-loader\\lib\\index.js","mtime":1621061377995},{"path":"D:\\activiti\\project01\\jeecg-boot-activiti-master\\ant-design-vue-jeecg\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1621061384845},{"path":"D:\\activiti\\project01\\jeecg-boot-activiti-master\\ant-design-vue-jeecg\\node_modules\\vue-loader\\lib\\index.js","mtime":1621061372054}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport pick from 'lodash.pick'\nimport { httpAction } from '@/api/manage'\nimport { duplicateCheck } from '@/api/api'\nimport JDictSelectTag from '@/components/dict/JDictSelectTag'\n\nlet validatorCodeTimer = null\n\nexport default {\n  name: 'SysPositionModal',\n  components: { JDictSelectTag },\n  data() {\n    return {\n      title: '操作',\n      visible: false,\n      model: {},\n      labelCol: {\n        xs: { span: 24 },\n        sm: { span: 5 },\n      },\n      wrapperCol: {\n        xs: { span: 24 },\n        sm: { span: 16 },\n      },\n      confirmLoading: false,\n      form: this.$form.createForm(this),\n      validatorRules: {\n        code: {\n          rules: [\n            { required: true, message: '请输入职务编码' },\n            {\n              validator: (rule, value, callback) => {\n                // 函数消抖的简单实现，防止一段时间内发送多次请求\n                if (validatorCodeTimer) {\n                  // 停止上次开启的定时器\n                  clearTimeout(validatorCodeTimer)\n                }\n                validatorCodeTimer = setTimeout(() => {\n                  duplicateCheck({\n                    tableName: 'sys_position',\n                    fieldName: 'code',\n                    fieldVal: value,\n                    dataId: this.model.id\n                  }).then((res) => {\n                    if (res.success) {\n                      callback()\n                    } else {\n                      callback(res.message)\n                    }\n                  }).catch(console.error)\n                }, 300)\n              }\n            }\n          ]\n        },\n        name: { rules: [{ required: true, message: '请输入职务名称' }] },\n        postRank: { rules: [{ required: true, message: '请选择职级' }] },\n      },\n      url: {\n        add: '/sys/position/add',\n        edit: '/sys/position/edit',\n      },\n      readOnly:false\n    }\n  },\n  created() {\n  },\n  methods: {\n    add() {\n      this.edit({})\n    },\n    edit(record) {\n      this.form.resetFields()\n      this.model = Object.assign({}, record)\n      this.visible = true\n      if(record.id){\n        this.readOnly=true\n      }else{\n        this.readOnly=false\n      }\n      this.$nextTick(() => {\n        this.form.setFieldsValue(pick(this.model,\n          'code',\n          'name',\n          'postRank',\n          // 'companyId'\n        ))\n      })\n    },\n    close() {\n      this.$emit('close')\n      this.visible = false\n    },\n    handleOk() {\n      const that = this\n      // 触发表单验证\n      this.form.validateFields((err, values) => {\n        if (!err) {\n          that.confirmLoading = true\n          let httpurl = ''\n          let method = ''\n          if (!this.model.id) {\n            httpurl += this.url.add\n            method = 'post'\n          } else {\n            httpurl += this.url.edit\n            method = 'put'\n          }\n\n          let formData = Object.assign(this.model, values)\n          httpAction(httpurl, formData, method).then((res) => {\n            if (res.success) {\n              that.$message.success(res.message)\n              that.$emit('ok')\n            } else {\n              that.$message.warning(res.message)\n            }\n          }).finally(() => {\n            that.confirmLoading = false\n            that.close()\n          })\n        }\n      })\n    },\n    handleCancel() {\n      this.close()\n    },\n\n\n  }\n}\n",{"version":3,"sources":["SysPositionModal.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAmfile":"SysPositionModal.vue","sourceRoot":"src/views/system/modules","sourcesContent":["<template>\n  <a-modal\n    :title=\"title\"\n    :width=\"800\"\n    :visible=\"visible\"\n    :maskClosable=\"false\"\n    :confirmLoading=\"confirmLoading\"\n    @ok=\"handleOk\"\n    @cancel=\"handleCancel\"\n    cancelText=\"关闭\">\n\n    <a-spin :spinning=\"confirmLoading\">\n      <a-form :form=\"form\">\n\n        <a-form-item\n          :labelCol=\"labelCol\"\n          :wrapperCol=\"wrapperCol\"\n          label=\"职务编码\">\n          <a-input placeholder=\"请输入职务编码\" v-decorator=\"['code', validatorRules.code]\" :read-only=\"readOnly\"/>\n        </a-form-item>\n        <a-form-item\n          :labelCol=\"labelCol\"\n          :wrapperCol=\"wrapperCol\"\n          label=\"职务名称\">\n          <a-input placeholder=\"请输入职务名称\" v-decorator=\"['name', validatorRules.name]\"/>\n        </a-form-item>\n        <a-form-item\n          :labelCol=\"labelCol\"\n          :wrapperCol=\"wrapperCol\"\n          label=\"职级\"\n        >\n          <j-dict-select-tag\n            placeholder=\"请选择职级\"\n            :triggerChange=\"true\"\n            dictCode=\"position_rank\"\n            v-decorator=\"['postRank', validatorRules.postRank]\"\n          />\n        </a-form-item>\n        <!--<a-form-item-->\n        <!--  :labelCol=\"labelCol\"-->\n        <!--  :wrapperCol=\"wrapperCol\"-->\n        <!--  label=\"公司id\">-->\n        <!--  <a-input placeholder=\"请输入公司id\" v-decorator=\"['companyId', {}]\"/>-->\n        <!--</a-form-item>-->\n\n      </a-form>\n    </a-spin>\n  </a-modal>\n</template>\n\n<script>\n  import pick from 'lodash.pick'\n  import { httpAction } from '@/api/manage'\n  import { duplicateCheck } from '@/api/api'\n  import JDictSelectTag from '@/components/dict/JDictSelectTag'\n\n  let validatorCodeTimer = null\n\n  export default {\n    name: 'SysPositionModal',\n    components: { JDictSelectTag },\n    data() {\n      return {\n        title: '操作',\n        visible: false,\n        model: {},\n        labelCol: {\n          xs: { span: 24 },\n          sm: { span: 5 },\n        },\n        wrapperCol: {\n          xs: { span: 24 },\n          sm: { span: 16 },\n        },\n        confirmLoading: false,\n        form: this.$form.createForm(this),\n        validatorRules: {\n          code: {\n            rules: [\n              { required: true, message: '请输入职务编码' },\n              {\n                validator: (rule, value, callback) => {\n                  // 函数消抖的简单实现，防止一段时间内发送多次请求\n                  if (validatorCodeTimer) {\n                    // 停止上次开启的定时器\n                    clearTimeout(validatorCodeTimer)\n                  }\n                  validatorCodeTimer = setTimeout(() => {\n                    duplicateCheck({\n                      tableName: 'sys_position',\n                      fieldName: 'code',\n                      fieldVal: value,\n                      dataId: this.model.id\n                    }).then((res) => {\n                      if (res.success) {\n                        callback()\n                      } else {\n                        callback(res.message)\n                      }\n                    }).catch(console.error)\n                  }, 300)\n                }\n              }\n            ]\n          },\n          name: { rules: [{ required: true, message: '请输入职务名称' }] },\n          postRank: { rules: [{ required: true, message: '请选择职级' }] },\n        },\n        url: {\n          add: '/sys/position/add',\n          edit: '/sys/position/edit',\n        },\n        readOnly:false\n      }\n    },\n    created() {\n    },\n    methods: {\n      add() {\n        this.edit({})\n      },\n      edit(record) {\n        this.form.resetFields()\n        this.model = Object.assign({}, record)\n        this.visible = true\n        if(record.id){\n          this.readOnly=true\n        }else{\n          this.readOnly=false\n        }\n        this.$nextTick(() => {\n          this.form.setFieldsValue(pick(this.model,\n            'code',\n            'name',\n            'postRank',\n            // 'companyId'\n          ))\n        })\n      },\n      close() {\n        this.$emit('close')\n        this.visible = false\n      },\n      handleOk() {\n        const that = this\n        // 触发表单验证\n        this.form.validateFields((err, values) => {\n          if (!err) {\n            that.confirmLoading = true\n            let httpurl = ''\n            let method = ''\n            if (!this.model.id) {\n              httpurl += this.url.add\n              method = 'post'\n            } else {\n              httpurl += this.url.edit\n              method = 'put'\n            }\n\n            let formData = Object.assign(this.model, values)\n            httpAction(httpurl, formData, method).then((res) => {\n              if (res.success) {\n                that.$message.success(res.message)\n                that.$emit('ok')\n              } else {\n                that.$message.warning(res.message)\n              }\n            }).finally(() => {\n              that.confirmLoading = false\n              that.close()\n            })\n          }\n        })\n      },\n      handleCancel() {\n        this.close()\n      },\n\n\n    }\n  }\n</script>\n\n<style lang=\"less\" scoped>\n\n</style>\n"]}]}