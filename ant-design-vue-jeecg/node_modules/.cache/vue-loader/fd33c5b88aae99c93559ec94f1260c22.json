{"remainingRequest":"D:\\activiti\\project01\\jeecg-boot-activiti-master\\ant-design-vue-jeecg\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\activiti\\project01\\jeecg-boot-activiti-master\\ant-design-vue-jeecg\\src\\components\\dict\\JSearchSelectTag.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\activiti\\project01\\jeecg-boot-activiti-master\\ant-design-vue-jeecg\\src\\components\\dict\\JSearchSelectTag.vue","mtime":1611914356000},{"path":"D:\\activiti\\project01\\jeecg-boot-activiti-master\\ant-design-vue-jeecg\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1621061384845},{"path":"D:\\activiti\\project01\\jeecg-boot-activiti-master\\ant-design-vue-jeecg\\node_modules\\babel-loader\\lib\\index.js","mtime":1621061377995},{"path":"D:\\activiti\\project01\\jeecg-boot-activiti-master\\ant-design-vue-jeecg\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1621061384845},{"path":"D:\\activiti\\project01\\jeecg-boot-activiti-master\\ant-design-vue-jeecg\\node_modules\\vue-loader\\lib\\index.js","mtime":1621061372054}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport { ajaxGetDictItems,getDictItemsFromCache } from '@/api/api'\nimport debounce from 'lodash/debounce';\nimport { getAction } from '../../api/manage'\n\nexport default {\n  name: 'JSearchSelectTag',\n  props:{\n    disabled: Boolean,\n    value: [String, Number],\n    dict: String,\n    dictOptions: Array,\n    async: Boolean,\n    placeholder:{\n      type:String,\n      default:\"请选择\",\n      required:false\n    }\n  },\n  data(){\n    this.loadData = debounce(this.loadData, 800);//消抖\n    this.lastLoad = 0;\n    return {\n      loading:false,\n      selectedValue:[],\n      selectedAsyncValue:[],\n      options: [],\n    }\n  },\n  created(){\n    this.initDictData();\n  },\n  watch:{\n    \"value\":{\n      immediate:true,\n      handler(val){\n        if(!val){\n          if(val==0){\n            this.initSelectValue()\n          }else{\n            this.selectedValue=[]\n            this.selectedAsyncValue=[]\n          }\n        }else{\n          this.initSelectValue()\n        }\n      }\n    },\n    \"dict\":{\n      handler(){\n        this.initDictData()\n      }\n    },\n    'dictOptions':{\n      deep: true,\n      handler(val){\n        if(val && val.length>0){\n          this.options = [...val]\n        }\n      }\n    }\n  },\n  methods:{\n    initSelectValue(){\n      if(this.async){\n        if(!this.selectedAsyncValue || !this.selectedAsyncValue.key || this.selectedAsyncValue.key!=this.value){\n          console.log(\"这才请求后台\")\n          getAction(`/sys/dict/loadDictItem/${this.dict}`,{key:this.value}).then(res=>{\n            if(res.success){\n              let obj = {\n                key:this.value,\n                label:res.result\n              }\n              this.selectedAsyncValue = {...obj}\n            }\n          })\n        }\n      }else{\n        this.selectedValue = this.value.toString()\n      }\n    },\n    loadData(value){\n      console.log(\"数据加载\",value)\n      this.lastLoad +=1\n      const currentLoad = this.lastLoad\n      this.options = []\n      this.loading=true\n      // 字典code格式：table,text,code\n      getAction(`/sys/dict/loadDict/${this.dict}`,{keyword:value}).then(res=>{\n        this.loading=false\n        if(res.success){\n          if(currentLoad!=this.lastLoad){\n            return\n          }\n          this.options = res.result\n          console.log(\"我是第一个\",res)\n        }else{\n          this.$message.warning(res.message)\n        }\n\n      })\n\n    },\n    initDictData(){\n      if(!this.async){\n        //如果字典项集合有数据\n        if(this.dictOptions && this.dictOptions.length>0){\n          this.options = [...this.dictOptions]\n        }else{\n          //根据字典Code, 初始化字典数组\n          let dictStr = ''\n          if(this.dict){\n              let arr = this.dict.split(',')\n              if(arr[0].indexOf('where')>0){\n                let tbInfo = arr[0].split('where')\n                dictStr = tbInfo[0].trim()+','+arr[1]+','+arr[2]+','+encodeURIComponent(tbInfo[1])\n              }else{\n                dictStr = this.dict\n              }\n              if (this.dict.indexOf(\",\") == -1) {\n                //优先从缓存中读取字典配置\n                if (getDictItemsFromCache(this.dictCode)) {\n                  this.options = getDictItemsFromCache(this.dictCode);\n                  return\n                }\n              }\n              ajaxGetDictItems(dictStr, null).then((res) => {\n                if (res.success) {\n                  this.options = res.result;\n                }\n              })\n          }\n        }\n      }\n    },\n    filterOption(input, option) {\n      return option.componentOptions.children[0].text.toLowerCase().indexOf(input.toLowerCase()) >= 0\n    },\n    handleChange (selectedValue) {\n      console.log(\"selectedValue\",selectedValue)\n      this.selectedValue = selectedValue\n      this.callback()\n    },\n    handleAsyncChange(selectedObj){\n      this.selectedAsyncValue = selectedObj\n      this.selectedValue = selectedObj.key\n      this.callback()\n    },\n    callback(){\n      this.$emit('change', this.selectedValue);\n    },\n    setCurrentDictOptions(dictOptions){\n      this.options = dictOptions\n    },\n    getCurrentDictOptions(){\n      return this.options\n    }\n\n  },\n  model: {\n    prop: 'value',\n    event: 'change'\n  }\n}\n",{"version":3,"sources":["JSearchSelectTag.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAyfile":"JSearchSelectTag.vue","sourceRoot":"src/components/dict","sourcesContent":["<template>\n\n  <a-select\n    v-if=\"async\"\n    showSearch\n    labelInValue\n    :disabled=\"disabled\"\n    :getPopupContainer=\"(node) => node.parentNode\"\n    @search=\"loadData\"\n    :placeholder=\"placeholder\"\n    v-model=\"selectedAsyncValue\"\n    style=\"width: 100%\"\n    :filterOption=\"false\"\n    @change=\"handleAsyncChange\"\n    allowClear\n    :notFoundContent=\"loading ? undefined : null\"\n  >\n    <a-spin v-if=\"loading\" slot=\"notFoundContent\" size=\"small\"/>\n    <a-select-option v-for=\"d in options\" :key=\"d.value\" :value=\"d.value\">{{ d.text }}</a-select-option>\n  </a-select>\n\n  <a-select\n    v-else\n    :getPopupContainer=\"(node) => node.parentNode\"\n    showSearch\n    :disabled=\"disabled\"\n    :placeholder=\"placeholder\"\n    optionFilterProp=\"children\"\n    style=\"width: 100%\"\n    @change=\"handleChange\"\n    :filterOption=\"filterOption\"\n    v-model=\"selectedValue\"\n    allowClear\n    :notFoundContent=\"loading ? undefined : null\">\n    <a-spin v-if=\"loading\" slot=\"notFoundContent\" size=\"small\"/>\n    <a-select-option v-for=\"d in options\" :key=\"d.value\" :value=\"d.value\">{{ d.text }}</a-select-option>\n  </a-select>\n\n</template>\n\n<script>\n  import { ajaxGetDictItems,getDictItemsFromCache } from '@/api/api'\n  import debounce from 'lodash/debounce';\n  import { getAction } from '../../api/manage'\n\n  export default {\n    name: 'JSearchSelectTag',\n    props:{\n      disabled: Boolean,\n      value: [String, Number],\n      dict: String,\n      dictOptions: Array,\n      async: Boolean,\n      placeholder:{\n        type:String,\n        default:\"请选择\",\n        required:false\n      }\n    },\n    data(){\n      this.loadData = debounce(this.loadData, 800);//消抖\n      this.lastLoad = 0;\n      return {\n        loading:false,\n        selectedValue:[],\n        selectedAsyncValue:[],\n        options: [],\n      }\n    },\n    created(){\n      this.initDictData();\n    },\n    watch:{\n      \"value\":{\n        immediate:true,\n        handler(val){\n          if(!val){\n            if(val==0){\n              this.initSelectValue()\n            }else{\n              this.selectedValue=[]\n              this.selectedAsyncValue=[]\n            }\n          }else{\n            this.initSelectValue()\n          }\n        }\n      },\n      \"dict\":{\n        handler(){\n          this.initDictData()\n        }\n      },\n      'dictOptions':{\n        deep: true,\n        handler(val){\n          if(val && val.length>0){\n            this.options = [...val]\n          }\n        }\n      }\n    },\n    methods:{\n      initSelectValue(){\n        if(this.async){\n          if(!this.selectedAsyncValue || !this.selectedAsyncValue.key || this.selectedAsyncValue.key!=this.value){\n            console.log(\"这才请求后台\")\n            getAction(`/sys/dict/loadDictItem/${this.dict}`,{key:this.value}).then(res=>{\n              if(res.success){\n                let obj = {\n                  key:this.value,\n                  label:res.result\n                }\n                this.selectedAsyncValue = {...obj}\n              }\n            })\n          }\n        }else{\n          this.selectedValue = this.value.toString()\n        }\n      },\n      loadData(value){\n        console.log(\"数据加载\",value)\n        this.lastLoad +=1\n        const currentLoad = this.lastLoad\n        this.options = []\n        this.loading=true\n        // 字典code格式：table,text,code\n        getAction(`/sys/dict/loadDict/${this.dict}`,{keyword:value}).then(res=>{\n          this.loading=false\n          if(res.success){\n            if(currentLoad!=this.lastLoad){\n              return\n            }\n            this.options = res.result\n            console.log(\"我是第一个\",res)\n          }else{\n            this.$message.warning(res.message)\n          }\n\n        })\n\n      },\n      initDictData(){\n        if(!this.async){\n          //如果字典项集合有数据\n          if(this.dictOptions && this.dictOptions.length>0){\n            this.options = [...this.dictOptions]\n          }else{\n            //根据字典Code, 初始化字典数组\n            let dictStr = ''\n            if(this.dict){\n                let arr = this.dict.split(',')\n                if(arr[0].indexOf('where')>0){\n                  let tbInfo = arr[0].split('where')\n                  dictStr = tbInfo[0].trim()+','+arr[1]+','+arr[2]+','+encodeURIComponent(tbInfo[1])\n                }else{\n                  dictStr = this.dict\n                }\n                if (this.dict.indexOf(\",\") == -1) {\n                  //优先从缓存中读取字典配置\n                  if (getDictItemsFromCache(this.dictCode)) {\n                    this.options = getDictItemsFromCache(this.dictCode);\n                    return\n                  }\n                }\n                ajaxGetDictItems(dictStr, null).then((res) => {\n                  if (res.success) {\n                    this.options = res.result;\n                  }\n                })\n            }\n          }\n        }\n      },\n      filterOption(input, option) {\n        return option.componentOptions.children[0].text.toLowerCase().indexOf(input.toLowerCase()) >= 0\n      },\n      handleChange (selectedValue) {\n        console.log(\"selectedValue\",selectedValue)\n        this.selectedValue = selectedValue\n        this.callback()\n      },\n      handleAsyncChange(selectedObj){\n        this.selectedAsyncValue = selectedObj\n        this.selectedValue = selectedObj.key\n        this.callback()\n      },\n      callback(){\n        this.$emit('change', this.selectedValue);\n      },\n      setCurrentDictOptions(dictOptions){\n        this.options = dictOptions\n      },\n      getCurrentDictOptions(){\n        return this.options\n      }\n\n    },\n    model: {\n      prop: 'value',\n      event: 'change'\n    }\n  }\n</script>\n\n<style scoped>\n\n</style>"]}]}