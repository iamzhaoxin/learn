{"remainingRequest":"D:\\activiti\\project01\\jeecg-boot-activiti-master\\ant-design-vue-jeecg\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\activiti\\project01\\jeecg-boot-activiti-master\\ant-design-vue-jeecg\\src\\views\\jeecg\\JVxeDemo\\demo\\PopupSubTable.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\activiti\\project01\\jeecg-boot-activiti-master\\ant-design-vue-jeecg\\src\\views\\jeecg\\JVxeDemo\\demo\\PopupSubTable.vue","mtime":1611914356000},{"path":"D:\\activiti\\project01\\jeecg-boot-activiti-master\\ant-design-vue-jeecg\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1621061384845},{"path":"D:\\activiti\\project01\\jeecg-boot-activiti-master\\ant-design-vue-jeecg\\node_modules\\babel-loader\\lib\\index.js","mtime":1621061377995},{"path":"D:\\activiti\\project01\\jeecg-boot-activiti-master\\ant-design-vue-jeecg\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1621061384845},{"path":"D:\\activiti\\project01\\jeecg-boot-activiti-master\\ant-design-vue-jeecg\\node_modules\\vue-loader\\lib\\index.js","mtime":1621061372054}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport { getAction } from '@api/manage'\nimport { JVXETypes } from '@/components/jeecg/JVxeTable'\n\n// 弹出子表示例\nexport default {\n  name: 'PopupSubTable',\n  data() {\n    return {\n      loading: false,\n      dataSource: [],\n      columns: [\n        {key: 'num', title: '序号', width: '80px'},\n        {key: 'ship_name', title: '船名', width: '180px', type: JVXETypes.input},\n        {key: 'call', title: '呼叫', width: '80px'},\n        {key: 'len', title: '长', width: '80px'},\n        {key: 'ton', title: '吨', width: '120px'},\n        {key: 'payer', title: '付款方', width: '120px'},\n        {key: 'count', title: '数', width: '40px'},\n        {\n          key: 'company',\n          title: '公司',\n          minWidth: '180px',\n          // 是否点击显示详细信息\n          // 只有当前单元格不能编辑的时候才能生效\n          // 如果不设的话，点击就只弹出子表，不会弹出主表的详细信息\n          showDetails: true\n        },\n        {key: 'trend', title: '动向', width: '120px'},\n      ],\n      // 子表的信息\n      subTable: {\n        currentRowId: null,\n        loading: false,\n        pagination: {current: 1, pageSize: 200, pageSizeOptions: ['100', '200'], total: 0},\n        selectedRows: [],\n        dataSource: [],\n        columns: [\n          {key: 'dd_num', title: '调度序号', width: '120px'},\n          {key: 'tug', title: '拖轮', width: '180px', type: JVXETypes.input},\n          {key: 'work_start_time', title: '作业开始时间', width: '180px', type: JVXETypes.input},\n          {key: 'work_stop_time', title: '作业结束时间', width: '180px', type: JVXETypes.input},\n          {key: 'type', title: '船舶分类', width: '120px', type: JVXETypes.input},\n          {key: 'port_area', title: '所属港区', minWidth: '120px', type: JVXETypes.input},\n        ],\n      },\n      // 查询url地址\n      url: {\n        getData: '/mock/vxe/getData',\n      },\n      // 主表form表单字段\n      mainForm: {\n        id: '',\n        num: '',\n        ship_name: '',\n        call: '',\n        len: '',\n        ton: '',\n        payer: '',\n        count: '',\n        company: '',\n        trend: '',\n      },\n      // form表单 col\n      labelCol: {span: 4},\n      wrapperCol: {span: 20},\n      rules: {\n        num: [\n          {required: true, message: '必须输入序号'},\n        ],\n      },\n    }\n  },\n\n  created() {\n    this.loadData()\n  },\n  methods: {\n\n    log: console.log,\n\n    // 加载数据\n    loadData() {\n      // 封装查询条件\n      let formData = {pageNo: 1, pageSize: 30}\n      // 调用查询数据接口\n      this.loading = true\n      getAction(this.url.getData, formData).then(res => {\n        if (res.success) {\n          // 将查询的数据赋值给 dataSource\n          this.dataSource = res.result.records\n          // 重置选择\n          this.selectedRows = []\n        } else {\n          this.$error({title: '主表查询失败', content: res.message})\n        }\n      }).finally(() => {\n        // 这里是无论成功或失败都会执行的方法，在这里关闭loading\n        this.loading = false\n      })\n    },\n\n    // 查询子表数据\n    loadSubData(row) {\n      if (row) {\n        // 这里一定要做限制，限制不能重复查询，否者会出现死循环\n        if (this.subTable.currentRowId === row.id) {\n          return true\n        }\n        this.subTable.currentRowId = row.id\n        let formData = {pageNo: 1, pageSize: 30, parentId: row.id}\n        this.subTable.loading = true\n        getAction(this.url.getData, formData).then(res => {\n          if (res.success) {\n            // 将查询的数据赋值给 dataSource\n            this.subTable.dataSource = res.result.records\n          } else {\n            this.$error({title: '主表查询失败', content: res.message})\n          }\n        }).finally(() => {\n          // 这里是无论成功或失败都会执行的方法，在这里关闭loading\n          this.subTable.loading = false\n        })\n        return true\n      } else {\n        return false\n      }\n    },\n\n    // 详细信息里点了确认按钮\n    handleDetailsConfirm({row, $table, callback}) {\n      console.log('保存的数据：', row)\n      // 校验当前行\n      $table.validate(row).then((errMap) => {\n        // 校验通过\n        if (!errMap) {\n          // 校验子表，如果需要的话，可以操作下面这个对象：\n          // this.$refs.subFormTable\n\n          callback(true)\n          this.loading = true\n          setTimeout(() => {\n            this.loading = false\n            this.$message.success('保存成功')\n          }, 1000)\n        } else {\n          callback(false)\n          this.$message.warn('校验失败')\n        }\n      })\n    },\n\n  },\n}\n",{"version":3,"sources":["PopupSubTable.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAwfile":"PopupSubTable.vue","sourceRoot":"src/views/jeecg/JVxeDemo/demo","sourcesContent":["<template>\n  <a-card title=\"弹出子表示例\" :bordered=\"false\">\n\n    <!--\n      【弹出子表大体思路】\n      1. 必须要有 click-row-show-sub-form 属性，如果该属性设为false，那么就不会弹出子表\n      2. 必须要有 sub-form 插槽，用于规定弹出子表的内容\n      3. highlight-current-row 属性可有可无，如果有则点击一行的时候，该行会背景色会常亮\n    -->\n\n    <!--\n      【弹出详细信息（既有主表的数据也有子表的）大体思路】\n      1. 必须要有 click-row-show-main-form 属性，如果该属性设为false，那么就不会弹出详细信息\n      2. 必须要有 main-form 插槽，用于规定弹出子表的内容\n      3. 可选 click-row-show-sub-form 属性，如果有该属性，就会显示子表，否者不显示\n    -->\n\n    <j-vxe-table\n      toolbar\n      row-number\n      row-selection\n\n      highlight-current-row\n      click-row-show-sub-form\n      click-row-show-main-form\n\n      :height=\"750\"\n      :loading=\"loading\"\n      :columns=\"columns\"\n      :dataSource=\"dataSource\"\n      @detailsConfirm=\"handleDetailsConfirm\"\n    >\n\n      <!-- 主表单 -->\n      <template v-slot:mainForm=\"{row}\">\n        <template v-if=\"row\">\n          <a-form-model\n            ref=\"form2\"\n            :model=\"row\"\n            :rules=\"rules\"\n            :label-col=\"labelCol\"\n            :wrapper-col=\"wrapperCol\"\n          >\n            <a-row :gutter=\"8\">\n              <a-col :span=\"8\">\n                <a-form-model-item label=\"ID\" prop=\"id\">\n                  <a-input v-model=\"row.id\" disabled/>\n                </a-form-model-item>\n              </a-col>\n              <a-col :span=\"8\">\n                <a-form-model-item label=\"序号\" prop=\"num\">\n                  <a-input v-model=\"row.num\"/>\n                </a-form-model-item>\n              </a-col>\n              <a-col :span=\"8\">\n                <a-form-model-item label=\"船名\" prop=\"ship_name\">\n                  <a-input v-model=\"row.ship_name\"/>\n                </a-form-model-item>\n              </a-col>\n              <a-col :span=\"8\">\n                <a-form-model-item label=\"呼叫\" prop=\"call\">\n                  <a-input v-model=\"row.call\"/>\n                </a-form-model-item>\n              </a-col>\n              <a-col :span=\"8\">\n                <a-form-model-item label=\"长\" prop=\"len\">\n                  <a-input v-model=\"row.len\"/>\n                </a-form-model-item>\n              </a-col>\n              <a-col :span=\"8\">\n                <a-form-model-item label=\"吨\" prop=\"ton\">\n                  <a-input v-model=\"row.ton\"/>\n                </a-form-model-item>\n              </a-col>\n              <a-col :span=\"8\">\n                <a-form-model-item label=\"付款方\" prop=\"payer\">\n                  <a-input v-model=\"row.payer\"/>\n                </a-form-model-item>\n              </a-col>\n              <a-col :span=\"8\">\n                <a-form-model-item label=\"数\" prop=\"count\">\n                  <a-input v-model=\"row.count\"/>\n                </a-form-model-item>\n              </a-col>\n              <a-col :span=\"8\">\n                <a-form-model-item label=\"公司\" prop=\"company\">\n                  <a-input v-model=\"row.company\"/>\n                </a-form-model-item>\n              </a-col>\n              <a-col :span=\"8\">\n                <a-form-model-item label=\"动向\" prop=\"trend\">\n                  <a-input v-model=\"row.trend\"/>\n                </a-form-model-item>\n              </a-col>\n            </a-row>\n          </a-form-model>\n        </template>\n\n      </template>\n\n      <!-- 子表单 -->\n      <template v-slot:subForm=\"{row}\">\n        <template v-if=\"loadSubData(row)\">\n          <j-vxe-table\n            ref=\"subFormTable\"\n            height=\"auto\"\n            :max-height=\"350\"\n            :loading=\"subTable.loading\"\n            :columns=\"subTable.columns\"\n            :dataSource=\"subTable.dataSource\"\n          />\n        </template>\n      </template>\n\n    </j-vxe-table>\n\n  </a-card>\n</template>\n\n<script>\n  import { getAction } from '@api/manage'\n  import { JVXETypes } from '@/components/jeecg/JVxeTable'\n\n  // 弹出子表示例\n  export default {\n    name: 'PopupSubTable',\n    data() {\n      return {\n        loading: false,\n        dataSource: [],\n        columns: [\n          {key: 'num', title: '序号', width: '80px'},\n          {key: 'ship_name', title: '船名', width: '180px', type: JVXETypes.input},\n          {key: 'call', title: '呼叫', width: '80px'},\n          {key: 'len', title: '长', width: '80px'},\n          {key: 'ton', title: '吨', width: '120px'},\n          {key: 'payer', title: '付款方', width: '120px'},\n          {key: 'count', title: '数', width: '40px'},\n          {\n            key: 'company',\n            title: '公司',\n            minWidth: '180px',\n            // 是否点击显示详细信息\n            // 只有当前单元格不能编辑的时候才能生效\n            // 如果不设的话，点击就只弹出子表，不会弹出主表的详细信息\n            showDetails: true\n          },\n          {key: 'trend', title: '动向', width: '120px'},\n        ],\n        // 子表的信息\n        subTable: {\n          currentRowId: null,\n          loading: false,\n          pagination: {current: 1, pageSize: 200, pageSizeOptions: ['100', '200'], total: 0},\n          selectedRows: [],\n          dataSource: [],\n          columns: [\n            {key: 'dd_num', title: '调度序号', width: '120px'},\n            {key: 'tug', title: '拖轮', width: '180px', type: JVXETypes.input},\n            {key: 'work_start_time', title: '作业开始时间', width: '180px', type: JVXETypes.input},\n            {key: 'work_stop_time', title: '作业结束时间', width: '180px', type: JVXETypes.input},\n            {key: 'type', title: '船舶分类', width: '120px', type: JVXETypes.input},\n            {key: 'port_area', title: '所属港区', minWidth: '120px', type: JVXETypes.input},\n          ],\n        },\n        // 查询url地址\n        url: {\n          getData: '/mock/vxe/getData',\n        },\n        // 主表form表单字段\n        mainForm: {\n          id: '',\n          num: '',\n          ship_name: '',\n          call: '',\n          len: '',\n          ton: '',\n          payer: '',\n          count: '',\n          company: '',\n          trend: '',\n        },\n        // form表单 col\n        labelCol: {span: 4},\n        wrapperCol: {span: 20},\n        rules: {\n          num: [\n            {required: true, message: '必须输入序号'},\n          ],\n        },\n      }\n    },\n\n    created() {\n      this.loadData()\n    },\n    methods: {\n\n      log: console.log,\n\n      // 加载数据\n      loadData() {\n        // 封装查询条件\n        let formData = {pageNo: 1, pageSize: 30}\n        // 调用查询数据接口\n        this.loading = true\n        getAction(this.url.getData, formData).then(res => {\n          if (res.success) {\n            // 将查询的数据赋值给 dataSource\n            this.dataSource = res.result.records\n            // 重置选择\n            this.selectedRows = []\n          } else {\n            this.$error({title: '主表查询失败', content: res.message})\n          }\n        }).finally(() => {\n          // 这里是无论成功或失败都会执行的方法，在这里关闭loading\n          this.loading = false\n        })\n      },\n\n      // 查询子表数据\n      loadSubData(row) {\n        if (row) {\n          // 这里一定要做限制，限制不能重复查询，否者会出现死循环\n          if (this.subTable.currentRowId === row.id) {\n            return true\n          }\n          this.subTable.currentRowId = row.id\n          let formData = {pageNo: 1, pageSize: 30, parentId: row.id}\n          this.subTable.loading = true\n          getAction(this.url.getData, formData).then(res => {\n            if (res.success) {\n              // 将查询的数据赋值给 dataSource\n              this.subTable.dataSource = res.result.records\n            } else {\n              this.$error({title: '主表查询失败', content: res.message})\n            }\n          }).finally(() => {\n            // 这里是无论成功或失败都会执行的方法，在这里关闭loading\n            this.subTable.loading = false\n          })\n          return true\n        } else {\n          return false\n        }\n      },\n\n      // 详细信息里点了确认按钮\n      handleDetailsConfirm({row, $table, callback}) {\n        console.log('保存的数据：', row)\n        // 校验当前行\n        $table.validate(row).then((errMap) => {\n          // 校验通过\n          if (!errMap) {\n            // 校验子表，如果需要的话，可以操作下面这个对象：\n            // this.$refs.subFormTable\n\n            callback(true)\n            this.loading = true\n            setTimeout(() => {\n              this.loading = false\n              this.$message.success('保存成功')\n            }, 1000)\n          } else {\n            callback(false)\n            this.$message.warn('校验失败')\n          }\n        })\n      },\n\n    },\n  }\n</script>\n\n<style scoped>\n\n</style>"]}]}